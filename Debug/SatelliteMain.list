
SatelliteMain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004870  20000010  08008104  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20004880  08008104  00024880  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003da35  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006afb  00000000  00000000  0005da75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00016d27  00000000  00000000  00064570  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001828  00000000  00000000  0007b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002308  00000000  00000000  0007cac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f49c  00000000  00000000  0007edc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000966f  00000000  00000000  0008e264  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000978d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d10  00000000  00000000  00097950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f7c 	.word	0x08007f7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007f7c 	.word	0x08007f7c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b97a 	b.w	8000e10 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	468c      	mov	ip, r1
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	9e08      	ldr	r6, [sp, #32]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d151      	bne.n	8000be8 <__udivmoddi4+0xb4>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d96d      	bls.n	8000c26 <__udivmoddi4+0xf2>
 8000b4a:	fab2 fe82 	clz	lr, r2
 8000b4e:	f1be 0f00 	cmp.w	lr, #0
 8000b52:	d00b      	beq.n	8000b6c <__udivmoddi4+0x38>
 8000b54:	f1ce 0c20 	rsb	ip, lr, #32
 8000b58:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b5c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b60:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b64:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b68:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b6c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b70:	0c25      	lsrs	r5, r4, #16
 8000b72:	fbbc f8fa 	udiv	r8, ip, sl
 8000b76:	fa1f f987 	uxth.w	r9, r7
 8000b7a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b7e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b82:	fb08 f309 	mul.w	r3, r8, r9
 8000b86:	42ab      	cmp	r3, r5
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x6c>
 8000b8a:	19ed      	adds	r5, r5, r7
 8000b8c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b90:	f080 8123 	bcs.w	8000dda <__udivmoddi4+0x2a6>
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	f240 8120 	bls.w	8000dda <__udivmoddi4+0x2a6>
 8000b9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9e:	443d      	add	r5, r7
 8000ba0:	1aed      	subs	r5, r5, r3
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ba8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb0:	fb00 f909 	mul.w	r9, r0, r9
 8000bb4:	45a1      	cmp	r9, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x98>
 8000bb8:	19e4      	adds	r4, r4, r7
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	f080 810a 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000bc2:	45a1      	cmp	r9, r4
 8000bc4:	f240 8107 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	eba4 0409 	sub.w	r4, r4, r9
 8000bd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d061      	beq.n	8000c9e <__udivmoddi4+0x16a>
 8000bda:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bde:	2300      	movs	r3, #0
 8000be0:	6034      	str	r4, [r6, #0]
 8000be2:	6073      	str	r3, [r6, #4]
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d907      	bls.n	8000bfc <__udivmoddi4+0xc8>
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d054      	beq.n	8000c9a <__udivmoddi4+0x166>
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	fab3 f183 	clz	r1, r3
 8000c00:	2900      	cmp	r1, #0
 8000c02:	f040 808e 	bne.w	8000d22 <__udivmoddi4+0x1ee>
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xdc>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2d0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb65 0503 	sbc.w	r5, r5, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	46ac      	mov	ip, r5
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d03f      	beq.n	8000c9e <__udivmoddi4+0x16a>
 8000c1e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	b912      	cbnz	r2, 8000c2e <__udivmoddi4+0xfa>
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c2e:	fab7 fe87 	clz	lr, r7
 8000c32:	f1be 0f00 	cmp.w	lr, #0
 8000c36:	d134      	bne.n	8000ca2 <__udivmoddi4+0x16e>
 8000c38:	1beb      	subs	r3, r5, r7
 8000c3a:	0c3a      	lsrs	r2, r7, #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c46:	0c25      	lsrs	r5, r4, #16
 8000c48:	fb02 3318 	mls	r3, r2, r8, r3
 8000c4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c50:	fb0c f308 	mul.w	r3, ip, r8
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x134>
 8000c58:	19ed      	adds	r5, r5, r7
 8000c5a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x132>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	f200 80d1 	bhi.w	8000e08 <__udivmoddi4+0x2d4>
 8000c66:	4680      	mov	r8, r0
 8000c68:	1aed      	subs	r5, r5, r3
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c70:	fb02 5510 	mls	r5, r2, r0, r5
 8000c74:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c78:	fb0c fc00 	mul.w	ip, ip, r0
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x15c>
 8000c80:	19e4      	adds	r4, r4, r7
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x15a>
 8000c88:	45a4      	cmp	ip, r4
 8000c8a:	f200 80b8 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 040c 	sub.w	r4, r4, ip
 8000c94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c98:	e79d      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c9a:	4631      	mov	r1, r6
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	f1ce 0420 	rsb	r4, lr, #32
 8000ca6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000caa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cae:	fa20 f804 	lsr.w	r8, r0, r4
 8000cb2:	0c3a      	lsrs	r2, r7, #16
 8000cb4:	fa25 f404 	lsr.w	r4, r5, r4
 8000cb8:	ea48 0803 	orr.w	r8, r8, r3
 8000cbc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cc0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cc4:	fb02 4411 	mls	r4, r2, r1, r4
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cd0:	fb01 f30c 	mul.w	r3, r1, ip
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cda:	d909      	bls.n	8000cf0 <__udivmoddi4+0x1bc>
 8000cdc:	19ed      	adds	r5, r5, r7
 8000cde:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ce2:	f080 808a 	bcs.w	8000dfa <__udivmoddi4+0x2c6>
 8000ce6:	42ab      	cmp	r3, r5
 8000ce8:	f240 8087 	bls.w	8000dfa <__udivmoddi4+0x2c6>
 8000cec:	3902      	subs	r1, #2
 8000cee:	443d      	add	r5, r7
 8000cf0:	1aeb      	subs	r3, r5, r3
 8000cf2:	fa1f f588 	uxth.w	r5, r8
 8000cf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cfa:	fb02 3310 	mls	r3, r2, r0, r3
 8000cfe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d02:	fb00 f30c 	mul.w	r3, r0, ip
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x1e6>
 8000d0a:	19ed      	adds	r5, r5, r7
 8000d0c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d10:	d26f      	bcs.n	8000df2 <__udivmoddi4+0x2be>
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d96d      	bls.n	8000df2 <__udivmoddi4+0x2be>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443d      	add	r5, r7
 8000d1a:	1aeb      	subs	r3, r5, r3
 8000d1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d20:	e78f      	b.n	8000c42 <__udivmoddi4+0x10e>
 8000d22:	f1c1 0720 	rsb	r7, r1, #32
 8000d26:	fa22 f807 	lsr.w	r8, r2, r7
 8000d2a:	408b      	lsls	r3, r1
 8000d2c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d30:	ea48 0303 	orr.w	r3, r8, r3
 8000d34:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d42:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d46:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d4a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d4e:	fa1f f883 	uxth.w	r8, r3
 8000d52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d56:	fb09 f408 	mul.w	r4, r9, r8
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d60:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x244>
 8000d66:	18ed      	adds	r5, r5, r3
 8000d68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d6c:	d243      	bcs.n	8000df6 <__udivmoddi4+0x2c2>
 8000d6e:	42ac      	cmp	r4, r5
 8000d70:	d941      	bls.n	8000df6 <__udivmoddi4+0x2c2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	441d      	add	r5, r3
 8000d78:	1b2d      	subs	r5, r5, r4
 8000d7a:	fa1f fe8e 	uxth.w	lr, lr
 8000d7e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d82:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d86:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d8a:	fb00 f808 	mul.w	r8, r0, r8
 8000d8e:	45a0      	cmp	r8, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x26e>
 8000d92:	18e4      	adds	r4, r4, r3
 8000d94:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d98:	d229      	bcs.n	8000dee <__udivmoddi4+0x2ba>
 8000d9a:	45a0      	cmp	r8, r4
 8000d9c:	d927      	bls.n	8000dee <__udivmoddi4+0x2ba>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	441c      	add	r4, r3
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	eba4 0408 	sub.w	r4, r4, r8
 8000daa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c6      	mov	lr, r8
 8000db2:	464d      	mov	r5, r9
 8000db4:	d315      	bcc.n	8000de2 <__udivmoddi4+0x2ae>
 8000db6:	d012      	beq.n	8000dde <__udivmoddi4+0x2aa>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x29c>
 8000dba:	ebba 030e 	subs.w	r3, sl, lr
 8000dbe:	eb64 0405 	sbc.w	r4, r4, r5
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	6037      	str	r7, [r6, #0]
 8000dce:	6074      	str	r4, [r6, #4]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e6f8      	b.n	8000bcc <__udivmoddi4+0x98>
 8000dda:	4690      	mov	r8, r2
 8000ddc:	e6e0      	b.n	8000ba0 <__udivmoddi4+0x6c>
 8000dde:	45c2      	cmp	sl, r8
 8000de0:	d2ea      	bcs.n	8000db8 <__udivmoddi4+0x284>
 8000de2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de6:	eb69 0503 	sbc.w	r5, r9, r3
 8000dea:	3801      	subs	r0, #1
 8000dec:	e7e4      	b.n	8000db8 <__udivmoddi4+0x284>
 8000dee:	4628      	mov	r0, r5
 8000df0:	e7d7      	b.n	8000da2 <__udivmoddi4+0x26e>
 8000df2:	4640      	mov	r0, r8
 8000df4:	e791      	b.n	8000d1a <__udivmoddi4+0x1e6>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e7be      	b.n	8000d78 <__udivmoddi4+0x244>
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	e778      	b.n	8000cf0 <__udivmoddi4+0x1bc>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	443c      	add	r4, r7
 8000e02:	e745      	b.n	8000c90 <__udivmoddi4+0x15c>
 8000e04:	4608      	mov	r0, r1
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xe6>
 8000e08:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0c:	443d      	add	r5, r7
 8000e0e:	e72b      	b.n	8000c68 <__udivmoddi4+0x134>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x30>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e1e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e26:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f8ab 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f006 ffca 	bl	8007dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f006 fe70 	bl	8007b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x10>)
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_IncTick+0x14>)
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	440b      	add	r3, r1
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20003db4 	.word	0x20003db4
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <HAL_GetTick+0x8>)
 8000e62:	6818      	ldr	r0, [r3, #0]
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20003db4 	.word	0x20003db4

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff6 	bl	8000e60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e74:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	bf1c      	itt	ne
 8000e78:	4b05      	ldrne	r3, [pc, #20]	; (8000e90 <HAL_Delay+0x24>)
 8000e7a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	bf18      	it	ne
 8000e80:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	f7ff ffed 	bl	8000e60 <HAL_GetTick>
 8000e86:	1b40      	subs	r0, r0, r5
 8000e88:	4284      	cmp	r4, r0
 8000e8a:	d8fa      	bhi.n	8000e82 <HAL_Delay+0x16>
  {
  }
}
 8000e8c:	bd38      	pop	{r3, r4, r5, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000

08000e94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e96:	4604      	mov	r4, r0
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d06e      	beq.n	8000f7a <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e9c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000ea0:	b90b      	cbnz	r3, 8000ea6 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ea2:	f006 fe5f 	bl	8007b64 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f023 0302 	bic.w	r3, r3, #2
 8000eae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb0:	f7ff ffd6 	bl	8000e60 <HAL_GetTick>
 8000eb4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	0791      	lsls	r1, r2, #30
 8000ebc:	d451      	bmi.n	8000f62 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f042 0201 	orr.w	r2, r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec6:	f7ff ffcb 	bl	8000e60 <HAL_GetTick>
 8000eca:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	d554      	bpl.n	8000f7e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ed4:	7e22      	ldrb	r2, [r4, #24]
 8000ed6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	bf0c      	ite	eq
 8000edc:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ee6:	7e62      	ldrb	r2, [r4, #25]
 8000ee8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	bf0c      	ite	eq
 8000eee:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ef8:	7ea2      	ldrb	r2, [r4, #26]
 8000efa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	bf0c      	ite	eq
 8000f00:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f04:	f022 0220 	bicne.w	r2, r2, #32
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f0a:	7ee2      	ldrb	r2, [r4, #27]
 8000f0c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	bf0c      	ite	eq
 8000f12:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f16:	f042 0210 	orrne.w	r2, r2, #16
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f1c:	7f22      	ldrb	r2, [r4, #28]
 8000f1e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	bf0c      	ite	eq
 8000f24:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f28:	f022 0208 	bicne.w	r2, r2, #8
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f2e:	7f62      	ldrb	r2, [r4, #29]
 8000f30:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	bf0c      	ite	eq
 8000f36:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f3a:	f022 0204 	bicne.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f40:	68e1      	ldr	r1, [r4, #12]
 8000f42:	68a2      	ldr	r2, [r4, #8]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	6921      	ldr	r1, [r4, #16]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	6961      	ldr	r1, [r4, #20]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	6861      	ldr	r1, [r4, #4]
 8000f50:	3901      	subs	r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f56:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f58:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f5a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000f5c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f62:	f7ff ff7d 	bl	8000e60 <HAL_GetTick>
 8000f66:	1b40      	subs	r0, r0, r5
 8000f68:	280a      	cmp	r0, #10
 8000f6a:	d9a4      	bls.n	8000eb6 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f74:	2305      	movs	r3, #5
 8000f76:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
}
 8000f7c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f7e:	f7ff ff6f 	bl	8000e60 <HAL_GetTick>
 8000f82:	1b40      	subs	r0, r0, r5
 8000f84:	280a      	cmp	r0, #10
 8000f86:	d9a1      	bls.n	8000ecc <HAL_CAN_Init+0x38>
 8000f88:	e7f0      	b.n	8000f6c <HAL_CAN_Init+0xd8>
	...

08000f8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f94:	041b      	lsls	r3, r3, #16
 8000f96:	0c1b      	lsrs	r3, r3, #16
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f9c:	0200      	lsls	r0, r0, #8
 8000f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fa6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fa8:	60d3      	str	r3, [r2, #12]
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b530      	push	{r4, r5, lr}
 8000fb4:	68dc      	ldr	r4, [r3, #12]
 8000fb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	bf28      	it	cs
 8000fc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 0501 	mov.w	r5, #1
 8000fcc:	fa05 f303 	lsl.w	r3, r5, r3
 8000fd0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd4:	bf8c      	ite	hi
 8000fd6:	3c03      	subhi	r4, #3
 8000fd8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fda:	4019      	ands	r1, r3
 8000fdc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fde:	fa05 f404 	lsl.w	r4, r5, r4
 8000fe2:	3c01      	subs	r4, #1
 8000fe4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fe6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	ea42 0201 	orr.w	r2, r2, r1
 8000fec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	bfaf      	iteee	ge
 8000ff2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	f000 000f 	andlt.w	r0, r0, #15
 8000ffa:	4b06      	ldrlt	r3, [pc, #24]	; (8001014 <HAL_NVIC_SetPriority+0x64>)
 8000ffc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	bfa5      	ittet	ge
 8001000:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001004:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800100c:	bd30      	pop	{r4, r5, pc}
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	e000ed14 	.word	0xe000ed14

08001018 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001018:	0942      	lsrs	r2, r0, #5
 800101a:	2301      	movs	r3, #1
 800101c:	f000 001f 	and.w	r0, r0, #31
 8001020:	fa03 f000 	lsl.w	r0, r3, r0
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_NVIC_EnableIRQ+0x14>)
 8001026:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100

08001030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001030:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001032:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001036:	2c01      	cmp	r4, #1
 8001038:	d036      	beq.n	80010a8 <HAL_DMA_Start_IT+0x78>
 800103a:	2401      	movs	r4, #1
 800103c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001040:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001044:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8001046:	2c01      	cmp	r4, #1
 8001048:	f04f 0500 	mov.w	r5, #0
 800104c:	f04f 0402 	mov.w	r4, #2
 8001050:	d128      	bne.n	80010a4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001052:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001056:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001058:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800105a:	6825      	ldr	r5, [r4, #0]
 800105c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001060:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001062:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001064:	6883      	ldr	r3, [r0, #8]
 8001066:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001068:	bf0e      	itee	eq
 800106a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800106c:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800106e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001070:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001072:	bf08      	it	eq
 8001074:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001076:	233f      	movs	r3, #63	; 0x3f
 8001078:	4093      	lsls	r3, r2
 800107a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	f043 0316 	orr.w	r3, r3, #22
 8001082:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001084:	6963      	ldr	r3, [r4, #20]
 8001086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800108c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800108e:	b11b      	cbz	r3, 8001098 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	2000      	movs	r0, #0
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80010a4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80010a8:	2002      	movs	r0, #2
}
 80010aa:	bd70      	pop	{r4, r5, r6, pc}

080010ac <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d003      	beq.n	80010bc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80010bc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80010be:	2305      	movs	r3, #5
 80010c0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80010cc:	2000      	movs	r0, #0
}
 80010ce:	4770      	bx	lr

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800127c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010dc:	4a65      	ldr	r2, [pc, #404]	; (8001274 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001280 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80010e6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010ec:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80010f4:	45b6      	cmp	lr, r6
 80010f6:	f040 80aa 	bne.w	800124e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fa:	684c      	ldr	r4, [r1, #4]
 80010fc:	f024 0710 	bic.w	r7, r4, #16
 8001100:	2f02      	cmp	r7, #2
 8001102:	d116      	bne.n	8001132 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001104:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001108:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001110:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001114:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001118:	f04f 0c0f 	mov.w	ip, #15
 800111c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001120:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	690d      	ldr	r5, [r1, #16]
 8001126:	fa05 f50b 	lsl.w	r5, r5, fp
 800112a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001132:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001138:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001140:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001142:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001156:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115a:	d811      	bhi.n	8001180 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800115c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	68cf      	ldr	r7, [r1, #12]
 8001164:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001168:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800116c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800116e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001174:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001178:	409f      	lsls	r7, r3
 800117a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800117e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001180:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	688f      	ldr	r7, [r1, #8]
 8001186:	fa07 f70a 	lsl.w	r7, r7, sl
 800118a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800118c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118e:	00e5      	lsls	r5, r4, #3
 8001190:	d55d      	bpl.n	800124e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	f04f 0b00 	mov.w	fp, #0
 8001196:	f8cd b00c 	str.w	fp, [sp, #12]
 800119a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	4d36      	ldr	r5, [pc, #216]	; (8001278 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011a4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011a8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011ac:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011b0:	9703      	str	r7, [sp, #12]
 80011b2:	9f03      	ldr	r7, [sp, #12]
 80011b4:	f023 0703 	bic.w	r7, r3, #3
 80011b8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011bc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011cc:	f04f 0e0f 	mov.w	lr, #15
 80011d0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	d03f      	beq.n	800125c <HAL_GPIO_Init+0x18c>
 80011dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011e0:	42a8      	cmp	r0, r5
 80011e2:	d03d      	beq.n	8001260 <HAL_GPIO_Init+0x190>
 80011e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011e8:	42a8      	cmp	r0, r5
 80011ea:	d03b      	beq.n	8001264 <HAL_GPIO_Init+0x194>
 80011ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011f0:	42a8      	cmp	r0, r5
 80011f2:	d039      	beq.n	8001268 <HAL_GPIO_Init+0x198>
 80011f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011f8:	42a8      	cmp	r0, r5
 80011fa:	d037      	beq.n	800126c <HAL_GPIO_Init+0x19c>
 80011fc:	4548      	cmp	r0, r9
 80011fe:	d037      	beq.n	8001270 <HAL_GPIO_Init+0x1a0>
 8001200:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001204:	42a8      	cmp	r0, r5
 8001206:	bf14      	ite	ne
 8001208:	2507      	movne	r5, #7
 800120a:	2506      	moveq	r5, #6
 800120c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001210:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001216:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001218:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800121e:	bf0c      	ite	eq
 8001220:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001222:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001224:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001226:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001228:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800122c:	bf0c      	ite	eq
 800122e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001230:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001232:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001234:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001236:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800123a:	bf0c      	ite	eq
 800123c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800123e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001240:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001242:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001246:	bf54      	ite	pl
 8001248:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800124a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800124c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	3301      	adds	r3, #1
 8001250:	2b10      	cmp	r3, #16
 8001252:	f47f af48 	bne.w	80010e6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001256:	b005      	add	sp, #20
 8001258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125c:	465d      	mov	r5, fp
 800125e:	e7d5      	b.n	800120c <HAL_GPIO_Init+0x13c>
 8001260:	2501      	movs	r5, #1
 8001262:	e7d3      	b.n	800120c <HAL_GPIO_Init+0x13c>
 8001264:	2502      	movs	r5, #2
 8001266:	e7d1      	b.n	800120c <HAL_GPIO_Init+0x13c>
 8001268:	2503      	movs	r5, #3
 800126a:	e7cf      	b.n	800120c <HAL_GPIO_Init+0x13c>
 800126c:	2504      	movs	r5, #4
 800126e:	e7cd      	b.n	800120c <HAL_GPIO_Init+0x13c>
 8001270:	2505      	movs	r5, #5
 8001272:	e7cb      	b.n	800120c <HAL_GPIO_Init+0x13c>
 8001274:	40013c00 	.word	0x40013c00
 8001278:	40020000 	.word	0x40020000
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400

08001284 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	b10a      	cbz	r2, 800128a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	6181      	str	r1, [r0, #24]
 8001288:	4770      	bx	lr
 800128a:	0409      	lsls	r1, r1, #16
 800128c:	e7fb      	b.n	8001286 <HAL_GPIO_WritePin+0x2>

0800128e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	6953      	ldr	r3, [r2, #20]
 8001292:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001296:	d00d      	beq.n	80012b4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001298:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800129c:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800129e:	2304      	movs	r3, #4
 80012a0:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012a2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80012ac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
 80012b2:	4770      	bx	lr
  }
  return HAL_OK;
 80012b4:	4618      	mov	r0, r3
}
 80012b6:	4770      	bx	lr

080012b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012bc:	4604      	mov	r4, r0
 80012be:	4617      	mov	r7, r2
 80012c0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012c2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012c6:	b28e      	uxth	r6, r1
 80012c8:	6825      	ldr	r5, [r4, #0]
 80012ca:	f1b8 0f01 	cmp.w	r8, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	696b      	ldreq	r3, [r5, #20]
 80012d2:	69ab      	ldrne	r3, [r5, #24]
 80012d4:	ea36 0303 	bics.w	r3, r6, r3
 80012d8:	bf14      	ite	ne
 80012da:	2001      	movne	r0, #1
 80012dc:	2000      	moveq	r0, #0
 80012de:	b908      	cbnz	r0, 80012e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80012e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012e4:	696b      	ldr	r3, [r5, #20]
 80012e6:	055a      	lsls	r2, r3, #21
 80012e8:	d512      	bpl.n	8001310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012f6:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012f8:	2304      	movs	r3, #4
 80012fa:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80012fc:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001302:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001306:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800130a:	2001      	movs	r0, #1
 800130c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001310:	1c7b      	adds	r3, r7, #1
 8001312:	d0d9      	beq.n	80012c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001314:	b94f      	cbnz	r7, 800132a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001316:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001318:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800131a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800131c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001320:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
 8001326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800132a:	f7ff fd99 	bl	8000e60 <HAL_GetTick>
 800132e:	eba0 0009 	sub.w	r0, r0, r9
 8001332:	4287      	cmp	r7, r0
 8001334:	d2c8      	bcs.n	80012c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001336:	e7ee      	b.n	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001338 <I2C_WaitOnFlagUntilTimeout>:
{
 8001338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800133c:	9e08      	ldr	r6, [sp, #32]
 800133e:	4604      	mov	r4, r0
 8001340:	4690      	mov	r8, r2
 8001342:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001344:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001348:	b28d      	uxth	r5, r1
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	f1b9 0f01 	cmp.w	r9, #1
 8001350:	bf0c      	ite	eq
 8001352:	695b      	ldreq	r3, [r3, #20]
 8001354:	699b      	ldrne	r3, [r3, #24]
 8001356:	ea35 0303 	bics.w	r3, r5, r3
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	4543      	cmp	r3, r8
 8001362:	d002      	beq.n	800136a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
}
 8001366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800136a:	1c7b      	adds	r3, r7, #1
 800136c:	d0ed      	beq.n	800134a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800136e:	b95f      	cbnz	r7, 8001388 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001370:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001372:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001374:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001376:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800137a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800137e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001388:	f7ff fd6a 	bl	8000e60 <HAL_GetTick>
 800138c:	1b80      	subs	r0, r0, r6
 800138e:	4287      	cmp	r7, r0
 8001390:	d2db      	bcs.n	800134a <I2C_WaitOnFlagUntilTimeout+0x12>
 8001392:	e7ed      	b.n	8001370 <I2C_WaitOnFlagUntilTimeout+0x38>

08001394 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4604      	mov	r4, r0
 8001398:	460d      	mov	r5, r1
 800139a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	d501      	bpl.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80013a4:	2000      	movs	r0, #0
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff ff70 	bl	800128e <I2C_IsAcknowledgeFailed>
 80013ae:	b9a8      	cbnz	r0, 80013dc <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80013b0:	1c6a      	adds	r2, r5, #1
 80013b2:	d0f3      	beq.n	800139c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013b4:	b965      	cbnz	r5, 80013d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013be:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013cc:	2003      	movs	r0, #3
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013d0:	f7ff fd46 	bl	8000e60 <HAL_GetTick>
 80013d4:	1b80      	subs	r0, r0, r6
 80013d6:	4285      	cmp	r5, r0
 80013d8:	d2e0      	bcs.n	800139c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013da:	e7ec      	b.n	80013b6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013dc:	2001      	movs	r0, #1
}
 80013de:	bd70      	pop	{r4, r5, r6, pc}

080013e0 <I2C_RequestMemoryWrite>:
{
 80013e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013e4:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80013e6:	6802      	ldr	r2, [r0, #0]
{
 80013e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80013ea:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f2:	6013      	str	r3, [r2, #0]
{
 80013f4:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013f6:	9600      	str	r6, [sp, #0]
 80013f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013fa:	2200      	movs	r2, #0
 80013fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001400:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001402:	f7ff ff99 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001406:	b968      	cbnz	r0, 8001424 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001408:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800140a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800140c:	491c      	ldr	r1, [pc, #112]	; (8001480 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800140e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001412:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001414:	4620      	mov	r0, r4
 8001416:	4633      	mov	r3, r6
 8001418:	f7ff ff4e 	bl	80012b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800141c:	b130      	cbz	r0, 800142c <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800141e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001420:	2b04      	cmp	r3, #4
 8001422:	d018      	beq.n	8001456 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
}
 8001426:	b004      	add	sp, #16
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	9003      	str	r0, [sp, #12]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	9203      	str	r2, [sp, #12]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001438:	4632      	mov	r2, r6
 800143a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800143c:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff ffa8 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 8001444:	b148      	cbz	r0, 800145a <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001448:	2b04      	cmp	r3, #4
 800144a:	d1eb      	bne.n	8001424 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001454:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e7e5      	b.n	8001426 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800145a:	f1b8 0f01 	cmp.w	r8, #1
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	d102      	bne.n	8001468 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001462:	b2ed      	uxtb	r5, r5
 8001464:	611d      	str	r5, [r3, #16]
 8001466:	e7de      	b.n	8001426 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001468:	0a2a      	lsrs	r2, r5, #8
 800146a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800146e:	4632      	mov	r2, r6
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff ff8f 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 8001476:	2800      	cmp	r0, #0
 8001478:	d1e5      	bne.n	8001446 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	e7f1      	b.n	8001462 <I2C_RequestMemoryWrite+0x82>
 800147e:	bf00      	nop
 8001480:	00010002 	.word	0x00010002

08001484 <I2C_RequestMemoryRead>:
{
 8001484:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001488:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800148a:	6803      	ldr	r3, [r0, #0]
{
 800148c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800148e:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800149e:	601a      	str	r2, [r3, #0]
{
 80014a0:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014a2:	9500      	str	r5, [sp, #0]
 80014a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014a6:	2200      	movs	r2, #0
 80014a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80014ac:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014ae:	f7ff ff43 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 80014b2:	b980      	cbnz	r0, 80014d6 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014b4:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014b8:	b2ff      	uxtb	r7, r7
 80014ba:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80014be:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014c0:	4620      	mov	r0, r4
 80014c2:	462b      	mov	r3, r5
 80014c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014c6:	f7ff fef7 	bl	80012b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014ca:	b140      	cbz	r0, 80014de <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d101      	bne.n	80014d6 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
 80014d4:	e000      	b.n	80014d8 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
}
 80014d8:	b004      	add	sp, #16
 80014da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	9003      	str	r0, [sp, #12]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	9203      	str	r2, [sp, #12]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ea:	462a      	mov	r2, r5
 80014ec:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ee:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff ff4f 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 80014f6:	b140      	cbz	r0, 800150a <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d1eb      	bne.n	80014d6 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e7e3      	b.n	80014d2 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800150a:	f1b8 0f01 	cmp.w	r8, #1
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	d124      	bne.n	800155c <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001512:	b2f6      	uxtb	r6, r6
 8001514:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001516:	462a      	mov	r2, r5
 8001518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff ff3a 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 8001520:	4602      	mov	r2, r0
 8001522:	2800      	cmp	r0, #0
 8001524:	d1e8      	bne.n	80014f8 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001526:	6821      	ldr	r1, [r4, #0]
 8001528:	680b      	ldr	r3, [r1, #0]
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001530:	4620      	mov	r0, r4
 8001532:	9500      	str	r5, [sp, #0]
 8001534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800153a:	f7ff fefd 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 800153e:	2800      	cmp	r0, #0
 8001540:	d1c9      	bne.n	80014d6 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001542:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001546:	490b      	ldr	r1, [pc, #44]	; (8001574 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001548:	f047 0701 	orr.w	r7, r7, #1
 800154c:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800154e:	4620      	mov	r0, r4
 8001550:	462b      	mov	r3, r5
 8001552:	f7ff feb1 	bl	80012b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1b8      	bne.n	80014cc <I2C_RequestMemoryRead+0x48>
 800155a:	e7bd      	b.n	80014d8 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800155c:	0a32      	lsrs	r2, r6, #8
 800155e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001560:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001562:	462a      	mov	r2, r5
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff15 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 800156a:	2800      	cmp	r0, #0
 800156c:	d1c4      	bne.n	80014f8 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	e7cf      	b.n	8001512 <I2C_RequestMemoryRead+0x8e>
 8001572:	bf00      	nop
 8001574:	00010002 	.word	0x00010002

08001578 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	6943      	ldr	r3, [r0, #20]
 8001584:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001588:	d001      	beq.n	800158e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800158a:	2000      	movs	r0, #0
}
 800158c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800158e:	6942      	ldr	r2, [r0, #20]
 8001590:	06d2      	lsls	r2, r2, #27
 8001592:	d50b      	bpl.n	80015ac <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001594:	f06f 0210 	mvn.w	r2, #16
 8001598:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800159a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800159e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80015a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015ac:	b95d      	cbnz	r5, 80015c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80015b6:	2320      	movs	r3, #32
 80015b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80015bc:	2300      	movs	r3, #0
 80015be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80015c2:	2003      	movs	r0, #3
 80015c4:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015c6:	f7ff fc4b 	bl	8000e60 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	4285      	cmp	r5, r0
 80015ce:	d2d7      	bcs.n	8001580 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80015d0:	e7ed      	b.n	80015ae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080015d2 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80015d2:	b570      	push	{r4, r5, r6, lr}
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	075b      	lsls	r3, r3, #29
 80015e0:	d501      	bpl.n	80015e6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80015e2:	2000      	movs	r0, #0
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fe51 	bl	800128e <I2C_IsAcknowledgeFailed>
 80015ec:	b9a8      	cbnz	r0, 800161a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80015ee:	1c6a      	adds	r2, r5, #1
 80015f0:	d0f3      	beq.n	80015da <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015f2:	b965      	cbnz	r5, 800160e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80015fc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001602:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001606:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800160a:	2003      	movs	r0, #3
 800160c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800160e:	f7ff fc27 	bl	8000e60 <HAL_GetTick>
 8001612:	1b80      	subs	r0, r0, r6
 8001614:	4285      	cmp	r5, r0
 8001616:	d2e0      	bcs.n	80015da <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001618:	e7ec      	b.n	80015f4 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800161a:	2001      	movs	r0, #1
}
 800161c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001620 <HAL_I2C_Init>:
{
 8001620:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001622:	4604      	mov	r4, r0
 8001624:	2800      	cmp	r0, #0
 8001626:	d062      	beq.n	80016ee <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001628:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800162c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001630:	b91b      	cbnz	r3, 800163a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001632:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001636:	f006 facb 	bl	8007bd0 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 800163a:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800163c:	4e2d      	ldr	r6, [pc, #180]	; (80016f4 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800163e:	4d2e      	ldr	r5, [pc, #184]	; (80016f8 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001640:	2324      	movs	r3, #36	; 0x24
 8001642:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800164e:	f000 ff71 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001652:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001654:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001656:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800165a:	42b3      	cmp	r3, r6
 800165c:	bf84      	itt	hi
 800165e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001662:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001664:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001666:	bf91      	iteee	ls
 8001668:	1c69      	addls	r1, r5, #1
 800166a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800166e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001672:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001674:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001676:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001678:	d821      	bhi.n	80016be <HAL_I2C_Init+0x9e>
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001680:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001684:	2b03      	cmp	r3, #3
 8001686:	bf98      	it	ls
 8001688:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800168a:	6a21      	ldr	r1, [r4, #32]
 800168c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800168e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001690:	430b      	orrs	r3, r1
 8001692:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001694:	68e1      	ldr	r1, [r4, #12]
 8001696:	6923      	ldr	r3, [r4, #16]
 8001698:	430b      	orrs	r3, r1
 800169a:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800169c:	69a1      	ldr	r1, [r4, #24]
 800169e:	6963      	ldr	r3, [r4, #20]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016be:	68a1      	ldr	r1, [r4, #8]
 80016c0:	b949      	cbnz	r1, 80016d6 <HAL_I2C_Init+0xb6>
 80016c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ca:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80016ce:	b163      	cbz	r3, 80016ea <HAL_I2C_Init+0xca>
 80016d0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80016d4:	e7d9      	b.n	800168a <HAL_I2C_Init+0x6a>
 80016d6:	2119      	movs	r1, #25
 80016d8:	434b      	muls	r3, r1
 80016da:	fbb0 f0f3 	udiv	r0, r0, r3
 80016de:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80016e2:	b113      	cbz	r3, 80016ea <HAL_I2C_Init+0xca>
 80016e4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80016e8:	e7cf      	b.n	800168a <HAL_I2C_Init+0x6a>
 80016ea:	2001      	movs	r0, #1
 80016ec:	e7cd      	b.n	800168a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
}
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
 80016f2:	bf00      	nop
 80016f4:	000186a0 	.word	0x000186a0
 80016f8:	000f4240 	.word	0x000f4240

080016fc <HAL_I2C_Mem_Write>:
{
 80016fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001700:	4604      	mov	r4, r0
 8001702:	469a      	mov	sl, r3
 8001704:	4688      	mov	r8, r1
 8001706:	4691      	mov	r9, r2
 8001708:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 800170a:	f7ff fba9 	bl	8000e60 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800170e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001712:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001714:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001716:	d003      	beq.n	8001720 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001718:	2002      	movs	r0, #2
}
 800171a:	b002      	add	sp, #8
 800171c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001720:	9000      	str	r0, [sp, #0]
 8001722:	2319      	movs	r3, #25
 8001724:	2201      	movs	r2, #1
 8001726:	493e      	ldr	r1, [pc, #248]	; (8001820 <HAL_I2C_Mem_Write+0x124>)
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fe05 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 800172e:	2800      	cmp	r0, #0
 8001730:	d1f2      	bne.n	8001718 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001732:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d0ee      	beq.n	8001718 <HAL_I2C_Mem_Write+0x1c>
 800173a:	2301      	movs	r3, #1
 800173c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001746:	bf5e      	ittt	pl
 8001748:	681a      	ldrpl	r2, [r3, #0]
 800174a:	f042 0201 	orrpl.w	r2, r2, #1
 800174e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001758:	2321      	movs	r3, #33	; 0x21
 800175a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800175e:	2340      	movs	r3, #64	; 0x40
 8001760:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001766:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001768:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800176a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176e:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001770:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <HAL_I2C_Mem_Write+0x128>)
 8001774:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001776:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001778:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800177a:	9501      	str	r5, [sp, #4]
 800177c:	9600      	str	r6, [sp, #0]
 800177e:	4653      	mov	r3, sl
 8001780:	464a      	mov	r2, r9
 8001782:	4641      	mov	r1, r8
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fe2b 	bl	80013e0 <I2C_RequestMemoryWrite>
 800178a:	2800      	cmp	r0, #0
 800178c:	d02a      	beq.n	80017e4 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001790:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
 800179a:	e7be      	b.n	800171a <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179c:	f7ff fdfa 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 80017a0:	b120      	cbz	r0, 80017ac <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d034      	beq.n	8001812 <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 80017a8:	2003      	movs	r0, #3
 80017aa:	e7b6      	b.n	800171a <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017ae:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 80017b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017b2:	1c4b      	adds	r3, r1, #1
 80017b4:	6263      	str	r3, [r4, #36]	; 0x24
 80017b6:	780b      	ldrb	r3, [r1, #0]
 80017b8:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80017ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017c2:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80017c4:	1e50      	subs	r0, r2, #1
 80017c6:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017c8:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80017ca:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017cc:	d50a      	bpl.n	80017e4 <HAL_I2C_Mem_Write+0xe8>
 80017ce:	b148      	cbz	r0, 80017e4 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017d0:	1c8b      	adds	r3, r1, #2
 80017d2:	6263      	str	r3, [r4, #36]	; 0x24
 80017d4:	784b      	ldrb	r3, [r1, #1]
 80017d6:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80017d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017da:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80017dc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80017de:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80017e0:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80017e2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80017e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	462a      	mov	r2, r5
 80017e8:	4631      	mov	r1, r6
 80017ea:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1d5      	bne.n	800179c <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f0:	f7ff feef 	bl	80015d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1d4      	bne.n	80017a2 <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001800:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	2320      	movs	r3, #32
 8001804:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001808:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800180c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001810:	e783      	b.n	800171a <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e7bc      	b.n	8001798 <HAL_I2C_Mem_Write+0x9c>
 800181e:	bf00      	nop
 8001820:	00100002 	.word	0x00100002
 8001824:	ffff0000 	.word	0xffff0000

08001828 <HAL_I2C_Mem_Read>:
{
 8001828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800182c:	4604      	mov	r4, r0
 800182e:	b086      	sub	sp, #24
 8001830:	469a      	mov	sl, r3
 8001832:	460d      	mov	r5, r1
 8001834:	4691      	mov	r9, r2
 8001836:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001838:	f7ff fb12 	bl	8000e60 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800183c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001840:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001842:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001844:	d004      	beq.n	8001850 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001846:	2502      	movs	r5, #2
}
 8001848:	4628      	mov	r0, r5
 800184a:	b006      	add	sp, #24
 800184c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001850:	9000      	str	r0, [sp, #0]
 8001852:	2319      	movs	r3, #25
 8001854:	2201      	movs	r2, #1
 8001856:	4979      	ldr	r1, [pc, #484]	; (8001a3c <HAL_I2C_Mem_Read+0x214>)
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fd6d 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 800185e:	2800      	cmp	r0, #0
 8001860:	d1f1      	bne.n	8001846 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001862:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d0ed      	beq.n	8001846 <HAL_I2C_Mem_Read+0x1e>
 800186a:	2301      	movs	r3, #1
 800186c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001876:	bf5e      	ittt	pl
 8001878:	681a      	ldrpl	r2, [r3, #0]
 800187a:	f042 0201 	orrpl.w	r2, r2, #1
 800187e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001886:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001888:	2322      	movs	r3, #34	; 0x22
 800188a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001896:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001898:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 800189c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80018a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_I2C_Mem_Read+0x218>)
 80018a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80018aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018ac:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ae:	4629      	mov	r1, r5
 80018b0:	9601      	str	r6, [sp, #4]
 80018b2:	9700      	str	r7, [sp, #0]
 80018b4:	4653      	mov	r3, sl
 80018b6:	464a      	mov	r2, r9
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff fde3 	bl	8001484 <I2C_RequestMemoryRead>
 80018be:	4605      	mov	r5, r0
 80018c0:	b130      	cbz	r0, 80018d0 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80018c4:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d13a      	bne.n	8001942 <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 80018cc:	2501      	movs	r5, #1
 80018ce:	e7bb      	b.n	8001848 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 80018d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	b992      	cbnz	r2, 80018fc <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	9002      	str	r0, [sp, #8]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	9202      	str	r2, [sp, #8]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	9202      	str	r2, [sp, #8]
 80018e0:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	2320      	movs	r3, #32
 80018ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80018f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80018fa:	e7a5      	b.n	8001848 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 80018fc:	2a01      	cmp	r2, #1
 80018fe:	d122      	bne.n	8001946 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001906:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001908:	9003      	str	r0, [sp, #12]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	9203      	str	r2, [sp, #12]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	9203      	str	r2, [sp, #12]
 8001912:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800191c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001a44 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001920:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0e1      	beq.n	80018ea <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8001926:	2b03      	cmp	r3, #3
 8001928:	d86b      	bhi.n	8001a02 <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 800192a:	2b01      	cmp	r3, #1
 800192c:	d123      	bne.n	8001976 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800192e:	4632      	mov	r2, r6
 8001930:	4639      	mov	r1, r7
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fe20 	bl	8001578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001938:	2800      	cmp	r0, #0
 800193a:	d039      	beq.n	80019b0 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800193c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800193e:	2b20      	cmp	r3, #32
 8001940:	d1c4      	bne.n	80018cc <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8001942:	2503      	movs	r5, #3
 8001944:	e780      	b.n	8001848 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001946:	2a02      	cmp	r2, #2
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001950:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001958:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	9004      	str	r0, [sp, #16]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	9204      	str	r2, [sp, #16]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	9304      	str	r3, [sp, #16]
 8001964:	9b04      	ldr	r3, [sp, #16]
 8001966:	e7d9      	b.n	800191c <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001968:	9005      	str	r0, [sp, #20]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	9205      	str	r2, [sp, #20]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	9305      	str	r3, [sp, #20]
 8001972:	9b05      	ldr	r3, [sp, #20]
 8001974:	e7d2      	b.n	800191c <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8001976:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001978:	9600      	str	r6, [sp, #0]
 800197a:	463b      	mov	r3, r7
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4641      	mov	r1, r8
 8001982:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001984:	d122      	bne.n	80019cc <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001986:	f7ff fcd7 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 800198a:	2800      	cmp	r0, #0
 800198c:	d1d9      	bne.n	8001942 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001996:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001998:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	1c51      	adds	r1, r2, #1
 800199e:	6261      	str	r1, [r4, #36]	; 0x24
 80019a0:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80019a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	6262      	str	r2, [r4, #36]	; 0x24
 80019b6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019b8:	6912      	ldr	r2, [r2, #16]
 80019ba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80019bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019be:	3b01      	subs	r3, #1
 80019c0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80019ca:	e7a9      	b.n	8001920 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019cc:	f7ff fcb4 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 80019d0:	4602      	mov	r2, r0
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d1b5      	bne.n	8001942 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	6819      	ldr	r1, [r3, #0]
 80019da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80019de:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	1c48      	adds	r0, r1, #1
 80019e6:	6260      	str	r0, [r4, #36]	; 0x24
 80019e8:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 80019ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80019ee:	3b01      	subs	r3, #1
 80019f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019fa:	4641      	mov	r1, r8
 80019fc:	463b      	mov	r3, r7
 80019fe:	4620      	mov	r0, r4
 8001a00:	e7c1      	b.n	8001986 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a02:	4632      	mov	r2, r6
 8001a04:	4639      	mov	r1, r7
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff fdb6 	bl	8001578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d195      	bne.n	800193c <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	6262      	str	r2, [r4, #36]	; 0x24
 8001a16:	6822      	ldr	r2, [r4, #0]
 8001a18:	6912      	ldr	r2, [r2, #16]
 8001a1a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001a1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a1e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001a20:	3b01      	subs	r3, #1
 8001a22:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a2c:	6953      	ldr	r3, [r2, #20]
 8001a2e:	075b      	lsls	r3, r3, #29
 8001a30:	f57f af76 	bpl.w	8001920 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a36:	1c59      	adds	r1, r3, #1
 8001a38:	6261      	str	r1, [r4, #36]	; 0x24
 8001a3a:	e7bd      	b.n	80019b8 <HAL_I2C_Mem_Read+0x190>
 8001a3c:	00100002 	.word	0x00100002
 8001a40:	ffff0000 	.word	0xffff0000
 8001a44:	00010004 	.word	0x00010004

08001a48 <HAL_I2C_IsDeviceReady>:
{
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	b085      	sub	sp, #20
 8001a50:	4698      	mov	r8, r3
 8001a52:	4689      	mov	r9, r1
 8001a54:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8001a56:	f7ff fa03 	bl	8000e60 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001a5e:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001a60:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a62:	d003      	beq.n	8001a6c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001a64:	2002      	movs	r0, #2
}
 8001a66:	b005      	add	sp, #20
 8001a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6c:	9000      	str	r0, [sp, #0]
 8001a6e:	2319      	movs	r3, #25
 8001a70:	2201      	movs	r2, #1
 8001a72:	494a      	ldr	r1, [pc, #296]	; (8001b9c <HAL_I2C_IsDeviceReady+0x154>)
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff fc5f 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1f2      	bne.n	8001a64 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001a7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d0ee      	beq.n	8001a64 <HAL_I2C_IsDeviceReady+0x1c>
 8001a86:	2301      	movs	r3, #1
 8001a88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8c:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a8e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001b9c <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001a96:	bf5e      	ittt	pl
 8001a98:	681a      	ldrpl	r2, [r3, #0]
 8001a9a:	f042 0201 	orrpl.w	r2, r2, #1
 8001a9e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa8:	2324      	movs	r3, #36	; 0x24
 8001aaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aae:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab2:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ab4:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	6813      	ldr	r3, [r2, #0]
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac8:	9600      	str	r6, [sp, #0]
 8001aca:	4643      	mov	r3, r8
 8001acc:	2200      	movs	r2, #0
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff fc32 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	b108      	cbz	r0, 8001ada <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	e7c5      	b.n	8001a66 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f9be 	bl	8000e60 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ae8:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001aea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 8001aee:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001af0:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001af8:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001afa:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001afc:	b911      	cbnz	r1, 8001b04 <HAL_I2C_IsDeviceReady+0xbc>
 8001afe:	b90a      	cbnz	r2, 8001b04 <HAL_I2C_IsDeviceReady+0xbc>
 8001b00:	2ba0      	cmp	r3, #160	; 0xa0
 8001b02:	d120      	bne.n	8001b46 <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b04:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001b06:	2720      	movs	r7, #32
 8001b08:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b1a:	d02a      	beq.n	8001b72 <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	9203      	str	r2, [sp, #12]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	9203      	str	r2, [sp, #12]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	9303      	str	r3, [sp, #12]
 8001b28:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2a:	9600      	str	r6, [sp, #0]
 8001b2c:	2319      	movs	r3, #25
 8001b2e:	2201      	movs	r2, #1
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <HAL_I2C_IsDeviceReady+0x154>)
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff fc00 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d1cc      	bne.n	8001ad6 <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001b40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001b44:	e78f      	b.n	8001a66 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b46:	f1b8 0f00 	cmp.w	r8, #0
 8001b4a:	d10c      	bne.n	8001b66 <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b4c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b54:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001b56:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b5a:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b5e:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e7ca      	b.n	8001afc <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b66:	f7ff f97b 	bl	8000e60 <HAL_GetTick>
 8001b6a:	1b80      	subs	r0, r0, r6
 8001b6c:	4580      	cmp	r8, r0
 8001b6e:	d3ed      	bcc.n	8001b4c <HAL_I2C_IsDeviceReady+0x104>
 8001b70:	e7ee      	b.n	8001b50 <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b76:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b78:	4659      	mov	r1, fp
 8001b7a:	9600      	str	r6, [sp, #0]
 8001b7c:	2319      	movs	r3, #25
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff fbd9 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d1a5      	bne.n	8001ad6 <HAL_I2C_IsDeviceReady+0x8e>
 8001b8a:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001b8c:	45aa      	cmp	sl, r5
 8001b8e:	d894      	bhi.n	8001aba <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 8001b90:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001b98:	2001      	movs	r0, #1
 8001b9a:	e764      	b.n	8001a66 <HAL_I2C_IsDeviceReady+0x1e>
 8001b9c:	00100002 	.word	0x00100002
 8001ba0:	ffff0000 	.word	0xffff0000

08001ba4 <HAL_I2C_MasterTxCpltCallback>:
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_I2C_MasterRxCpltCallback>:
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_SlaveTxCpltCallback>:
 8001ba8:	4770      	bx	lr

08001baa <HAL_I2C_SlaveRxCpltCallback>:
 8001baa:	4770      	bx	lr

08001bac <HAL_I2C_AddrCallback>:
{
 8001bac:	4770      	bx	lr

08001bae <HAL_I2C_ListenCpltCallback>:
 8001bae:	4770      	bx	lr

08001bb0 <HAL_I2C_MemTxCpltCallback>:
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_I2C_MemRxCpltCallback>:
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_I2C_ErrorCallback>:
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_I2C_AbortCpltCallback>:
{
 8001bb6:	4770      	bx	lr

08001bb8 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001bb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bbc:	3b29      	subs	r3, #41	; 0x29
 8001bbe:	2b01      	cmp	r3, #1
{
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bc6:	d839      	bhi.n	8001c3c <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001bcc:	2228      	movs	r2, #40	; 0x28
 8001bce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd8:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001be0:	d054      	beq.n	8001c8c <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001be2:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001be4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bea:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001bec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <I2C_ITError+0x120>)
 8001bf4:	d031      	beq.n	8001c5a <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001bf6:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001bf8:	f7ff fa58 	bl	80010ac <HAL_DMA_Abort_IT>
 8001bfc:	b150      	cbz	r0, 8001c14 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 8001bfe:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c00:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c12:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001c14:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c18:	2b28      	cmp	r3, #40	; 0x28
 8001c1a:	d10e      	bne.n	8001c3a <I2C_ITError+0x82>
 8001c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c1e:	075b      	lsls	r3, r3, #29
 8001c20:	d50b      	bpl.n	8001c3a <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <I2C_ITError+0x124>)
 8001c24:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001c2c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001c36:	f7ff ffba 	bl	8001bae <HAL_I2C_ListenCpltCallback>
 8001c3a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8001c3c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001c40:	2a60      	cmp	r2, #96	; 0x60
 8001c42:	d005      	beq.n	8001c50 <I2C_ITError+0x98>
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	bf5c      	itt	pl
 8001c4a:	2220      	movpl	r2, #32
 8001c4c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c50:	2200      	movs	r2, #0
 8001c52:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001c58:	e7bb      	b.n	8001bd2 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001c5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c5c:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001c5e:	f7ff fa25 	bl	80010ac <HAL_DMA_Abort_IT>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0d6      	beq.n	8001c14 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c66:	6822      	ldr	r2, [r4, #0]
 8001c68:	6953      	ldr	r3, [r2, #20]
 8001c6a:	0658      	lsls	r0, r3, #25
 8001c6c:	d504      	bpl.n	8001c78 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c70:	6912      	ldr	r2, [r2, #16]
 8001c72:	1c59      	adds	r1, r3, #1
 8001c74:	6261      	str	r1, [r4, #36]	; 0x24
 8001c76:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8001c78:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001c7c:	6813      	ldr	r3, [r2, #0]
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	2320      	movs	r3, #32
 8001c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001c8a:	e7c1      	b.n	8001c10 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001c8c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001c90:	2960      	cmp	r1, #96	; 0x60
 8001c92:	d114      	bne.n	8001cbe <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c94:	2120      	movs	r1, #32
 8001c96:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9a:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	0651      	lsls	r1, r2, #25
 8001ca0:	d504      	bpl.n	8001cac <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ca2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	1c51      	adds	r1, r2, #1
 8001ca8:	6261      	str	r1, [r4, #36]	; 0x24
 8001caa:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001cac:	6822      	ldr	r2, [r4, #0]
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff ff7d 	bl	8001bb6 <HAL_I2C_AbortCpltCallback>
 8001cbc:	e7aa      	b.n	8001c14 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	0652      	lsls	r2, r2, #25
 8001cc2:	d504      	bpl.n	8001cce <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	1c51      	adds	r1, r2, #1
 8001cca:	6261      	str	r1, [r4, #36]	; 0x24
 8001ccc:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff ff70 	bl	8001bb4 <HAL_I2C_ErrorCallback>
 8001cd4:	e79e      	b.n	8001c14 <I2C_ITError+0x5c>
 8001cd6:	bf00      	nop
 8001cd8:	080023b5 	.word	0x080023b5
 8001cdc:	ffff0000 	.word	0xffff0000

08001ce0 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ce0:	6803      	ldr	r3, [r0, #0]
{
 8001ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ce4:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ce6:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001ce8:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8001cea:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001cee:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cf0:	2c10      	cmp	r4, #16
{
 8001cf2:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cf4:	d002      	beq.n	8001cfc <HAL_I2C_EV_IRQHandler+0x1c>
 8001cf6:	2c40      	cmp	r4, #64	; 0x40
 8001cf8:	f040 8255 	bne.w	80021a6 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001cfc:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001d00:	d066      	beq.n	8001dd0 <HAL_I2C_EV_IRQHandler+0xf0>
 8001d02:	0597      	lsls	r7, r2, #22
 8001d04:	d564      	bpl.n	8001dd0 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d06:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001d0a:	2c40      	cmp	r4, #64	; 0x40
 8001d0c:	d143      	bne.n	8001d96 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8001d0e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d13b      	bne.n	8001d8c <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d14:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d16:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001d1a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001d1c:	4e98      	ldr	r6, [pc, #608]	; (8001f80 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8001d1e:	4c99      	ldr	r4, [pc, #612]	; (8001f84 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8001d20:	402e      	ands	r6, r5
 8001d22:	400c      	ands	r4, r1
 8001d24:	2e00      	cmp	r6, #0
 8001d26:	f000 819f 	beq.w	8002068 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001d2a:	4d97      	ldr	r5, [pc, #604]	; (8001f88 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8001d2c:	400d      	ands	r5, r1
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	f000 8166 	beq.w	8002000 <HAL_I2C_EV_IRQHandler+0x320>
 8001d34:	0555      	lsls	r5, r2, #21
 8001d36:	f140 8163 	bpl.w	8002000 <HAL_I2C_EV_IRQHandler+0x320>
 8001d3a:	2c00      	cmp	r4, #0
 8001d3c:	f040 8160 	bne.w	8002000 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001d40:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d44:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001d46:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d4a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 8001d4c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8001d4e:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	f040 8105 	bne.w	8001f60 <HAL_I2C_EV_IRQHandler+0x280>
 8001d56:	2a21      	cmp	r2, #33	; 0x21
 8001d58:	f040 8104 	bne.w	8001f64 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d5c:	2c04      	cmp	r4, #4
 8001d5e:	f000 816c 	beq.w	800203a <HAL_I2C_EV_IRQHandler+0x35a>
 8001d62:	2c08      	cmp	r4, #8
 8001d64:	f000 8169 	beq.w	800203a <HAL_I2C_EV_IRQHandler+0x35a>
 8001d68:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001d6c:	f000 8165 	beq.w	800203a <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d76:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d78:	2311      	movs	r3, #17
 8001d7a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	2320      	movs	r3, #32
 8001d82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d86:	f7ff ff0d 	bl	8001ba4 <HAL_I2C_MasterTxCpltCallback>
 8001d8a:	e0f6      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d8c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d8e:	f044 0401 	orr.w	r4, r4, #1
 8001d92:	b2e4      	uxtb	r4, r4
 8001d94:	e7c1      	b.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d96:	6904      	ldr	r4, [r0, #16]
 8001d98:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001d9c:	d105      	bne.n	8001daa <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001d9e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001da2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001da4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001da6:	d1f2      	bne.n	8001d8e <HAL_I2C_EV_IRQHandler+0xae>
 8001da8:	e7b5      	b.n	8001d16 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8001daa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001dac:	b934      	cbnz	r4, 8001dbc <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001dae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001db0:	11e4      	asrs	r4, r4, #7
 8001db2:	f004 0406 	and.w	r4, r4, #6
 8001db6:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001dba:	e7ae      	b.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001dbc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001dbe:	2c01      	cmp	r4, #1
 8001dc0:	d1ac      	bne.n	8001d1c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001dc2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001dc4:	11e4      	asrs	r4, r4, #7
 8001dc6:	f004 0406 	and.w	r4, r4, #6
 8001dca:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001dce:	e7a4      	b.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001dd0:	4c6e      	ldr	r4, [pc, #440]	; (8001f8c <HAL_I2C_EV_IRQHandler+0x2ac>)
 8001dd2:	400c      	ands	r4, r1
 8001dd4:	b11c      	cbz	r4, 8001dde <HAL_I2C_EV_IRQHandler+0xfe>
 8001dd6:	0596      	lsls	r6, r2, #22
 8001dd8:	d501      	bpl.n	8001dde <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001dda:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ddc:	e7d9      	b.n	8001d92 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001dde:	4c6c      	ldr	r4, [pc, #432]	; (8001f90 <HAL_I2C_EV_IRQHandler+0x2b0>)
 8001de0:	400c      	ands	r4, r1
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d09a      	beq.n	8001d1c <HAL_I2C_EV_IRQHandler+0x3c>
 8001de6:	0594      	lsls	r4, r2, #22
 8001de8:	d598      	bpl.n	8001d1c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8001dea:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dee:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001df0:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001df4:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001df8:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8001dfa:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dfc:	f040 80a8 	bne.w	8001f50 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001e00:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001e02:	b947      	cbnz	r7, 8001e16 <HAL_I2C_EV_IRQHandler+0x136>
 8001e04:	2c40      	cmp	r4, #64	; 0x40
 8001e06:	d106      	bne.n	8001e16 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e08:	9701      	str	r7, [sp, #4]
 8001e0a:	695c      	ldr	r4, [r3, #20]
 8001e0c:	9401      	str	r4, [sp, #4]
 8001e0e:	699c      	ldr	r4, [r3, #24]
 8001e10:	9401      	str	r4, [sp, #4]
 8001e12:	9c01      	ldr	r4, [sp, #4]
 8001e14:	e782      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001e16:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001e18:	b98c      	cbnz	r4, 8001e3e <HAL_I2C_EV_IRQHandler+0x15e>
 8001e1a:	6907      	ldr	r7, [r0, #16]
 8001e1c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001e20:	d10d      	bne.n	8001e3e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e22:	9402      	str	r4, [sp, #8]
 8001e24:	695c      	ldr	r4, [r3, #20]
 8001e26:	9402      	str	r4, [sp, #8]
 8001e28:	699c      	ldr	r4, [r3, #24]
 8001e2a:	9402      	str	r4, [sp, #8]
 8001e2c:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e2e:	681c      	ldr	r4, [r3, #0]
 8001e30:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001e34:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001e36:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001e38:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8001e3a:	6504      	str	r4, [r0, #80]	; 0x50
 8001e3c:	e76e      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001e3e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001e40:	b2a4      	uxth	r4, r4
 8001e42:	b954      	cbnz	r4, 8001e5a <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e44:	9403      	str	r4, [sp, #12]
 8001e46:	695c      	ldr	r4, [r3, #20]
 8001e48:	9403      	str	r4, [sp, #12]
 8001e4a:	699c      	ldr	r4, [r3, #24]
 8001e4c:	9403      	str	r4, [sp, #12]
 8001e4e:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e50:	681c      	ldr	r4, [r3, #0]
 8001e52:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001e56:	601c      	str	r4, [r3, #0]
 8001e58:	e019      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8001e5a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001e5c:	b2a4      	uxth	r4, r4
 8001e5e:	2c01      	cmp	r4, #1
 8001e60:	d142      	bne.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001e62:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001e66:	d11b      	bne.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e68:	681c      	ldr	r4, [r3, #0]
 8001e6a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001e6e:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e70:	685c      	ldr	r4, [r3, #4]
 8001e72:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001e76:	d00c      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e78:	681c      	ldr	r4, [r3, #0]
 8001e7a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001e7e:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e80:	2400      	movs	r4, #0
 8001e82:	9404      	str	r4, [sp, #16]
 8001e84:	695c      	ldr	r4, [r3, #20]
 8001e86:	9404      	str	r4, [sp, #16]
 8001e88:	699c      	ldr	r4, [r3, #24]
 8001e8a:	9404      	str	r4, [sp, #16]
 8001e8c:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 8001e8e:	2400      	movs	r4, #0
 8001e90:	e7d3      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e92:	9405      	str	r4, [sp, #20]
 8001e94:	695c      	ldr	r4, [r3, #20]
 8001e96:	9405      	str	r4, [sp, #20]
 8001e98:	699c      	ldr	r4, [r3, #24]
 8001e9a:	9405      	str	r4, [sp, #20]
 8001e9c:	9c05      	ldr	r4, [sp, #20]
 8001e9e:	e7d7      	b.n	8001e50 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001ea0:	2e04      	cmp	r6, #4
 8001ea2:	d015      	beq.n	8001ed0 <HAL_I2C_EV_IRQHandler+0x1f0>
 8001ea4:	2e08      	cmp	r6, #8
 8001ea6:	d013      	beq.n	8001ed0 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001ea8:	f1be 0f12 	cmp.w	lr, #18
 8001eac:	d010      	beq.n	8001ed0 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001eae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001eb0:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001eb2:	681c      	ldr	r4, [r3, #0]
 8001eb4:	bf14      	ite	ne
 8001eb6:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001eba:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001ebe:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec0:	2400      	movs	r4, #0
 8001ec2:	9406      	str	r4, [sp, #24]
 8001ec4:	695c      	ldr	r4, [r3, #20]
 8001ec6:	9406      	str	r4, [sp, #24]
 8001ec8:	699c      	ldr	r4, [r3, #24]
 8001eca:	9406      	str	r4, [sp, #24]
 8001ecc:	9c06      	ldr	r4, [sp, #24]
 8001ece:	e7de      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ed0:	681c      	ldr	r4, [r3, #0]
 8001ed2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001ed6:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed8:	2400      	movs	r4, #0
 8001eda:	9407      	str	r4, [sp, #28]
 8001edc:	695c      	ldr	r4, [r3, #20]
 8001ede:	9407      	str	r4, [sp, #28]
 8001ee0:	699c      	ldr	r4, [r3, #24]
 8001ee2:	9407      	str	r4, [sp, #28]
 8001ee4:	9c07      	ldr	r4, [sp, #28]
 8001ee6:	e7b3      	b.n	8001e50 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8001ee8:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001eea:	b2a4      	uxth	r4, r4
 8001eec:	2c02      	cmp	r4, #2
 8001eee:	d11c      	bne.n	8001f2a <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001ef0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ef2:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ef4:	681c      	ldr	r4, [r3, #0]
 8001ef6:	bf1d      	ittte	ne
 8001ef8:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8001efc:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001efe:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f00:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f04:	bf18      	it	ne
 8001f06:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f0a:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f0c:	685c      	ldr	r4, [r3, #4]
 8001f0e:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001f10:	bf42      	ittt	mi
 8001f12:	685c      	ldrmi	r4, [r3, #4]
 8001f14:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001f18:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	9408      	str	r4, [sp, #32]
 8001f1e:	695c      	ldr	r4, [r3, #20]
 8001f20:	9408      	str	r4, [sp, #32]
 8001f22:	699c      	ldr	r4, [r3, #24]
 8001f24:	9408      	str	r4, [sp, #32]
 8001f26:	9c08      	ldr	r4, [sp, #32]
 8001f28:	e7b1      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f2a:	681c      	ldr	r4, [r3, #0]
 8001f2c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001f30:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f32:	685c      	ldr	r4, [r3, #4]
 8001f34:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001f36:	bf42      	ittt	mi
 8001f38:	685c      	ldrmi	r4, [r3, #4]
 8001f3a:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001f3e:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f40:	2400      	movs	r4, #0
 8001f42:	9409      	str	r4, [sp, #36]	; 0x24
 8001f44:	695c      	ldr	r4, [r3, #20]
 8001f46:	9409      	str	r4, [sp, #36]	; 0x24
 8001f48:	699c      	ldr	r4, [r3, #24]
 8001f4a:	9409      	str	r4, [sp, #36]	; 0x24
 8001f4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001f4e:	e79e      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f50:	2400      	movs	r4, #0
 8001f52:	940a      	str	r4, [sp, #40]	; 0x28
 8001f54:	695c      	ldr	r4, [r3, #20]
 8001f56:	940a      	str	r4, [sp, #40]	; 0x28
 8001f58:	699c      	ldr	r4, [r3, #24]
 8001f5a:	940a      	str	r4, [sp, #40]	; 0x28
 8001f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001f5e:	e6dd      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f60:	2a21      	cmp	r2, #33	; 0x21
 8001f62:	d003      	beq.n	8001f6c <HAL_I2C_EV_IRQHandler+0x28c>
 8001f64:	2940      	cmp	r1, #64	; 0x40
 8001f66:	d108      	bne.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f68:	2a22      	cmp	r2, #34	; 0x22
 8001f6a:	d106      	bne.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 8001f6c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	b982      	cbnz	r2, 8001f94 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f78:	605a      	str	r2, [r3, #4]
}
 8001f7a:	b00d      	add	sp, #52	; 0x34
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	00100004 	.word	0x00100004
 8001f84:	00010004 	.word	0x00010004
 8001f88:	00010080 	.word	0x00010080
 8001f8c:	00010008 	.word	0x00010008
 8001f90:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f94:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001f98:	2a40      	cmp	r2, #64	; 0x40
 8001f9a:	d127      	bne.n	8001fec <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 8001f9c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001f9e:	b97a      	cbnz	r2, 8001fc0 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001fa2:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fa4:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa6:	d105      	bne.n	8001fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8001fa8:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001faa:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8001fac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001fae:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8001fb0:	6503      	str	r3, [r0, #80]	; 0x50
 8001fb2:	e7e2      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fb4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fb8:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001fba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	e7f7      	b.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 8001fc0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fc6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	e7f5      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 8001fcc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001fce:	2a02      	cmp	r2, #2
 8001fd0:	d1d3      	bne.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fd2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001fd6:	2a22      	cmp	r2, #34	; 0x22
 8001fd8:	d104      	bne.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e7ca      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fe4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001fe8:	2a21      	cmp	r2, #33	; 0x21
 8001fea:	d1c6      	bne.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001fec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001fee:	1c51      	adds	r1, r2, #1
 8001ff0:	6241      	str	r1, [r0, #36]	; 0x24
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001ff6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8001ffe:	e7bc      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002000:	2c00      	cmp	r4, #0
 8002002:	d0ba      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 8002004:	0594      	lsls	r4, r2, #22
 8002006:	d5b8      	bpl.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002008:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800200a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800200e:	2a21      	cmp	r2, #33	; 0x21
 8002010:	d1b3      	bne.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 8002012:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002014:	b292      	uxth	r2, r2
 8002016:	2a00      	cmp	r2, #0
 8002018:	d1e8      	bne.n	8001fec <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800201a:	2904      	cmp	r1, #4
 800201c:	d00d      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x35a>
 800201e:	2908      	cmp	r1, #8
 8002020:	d00b      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x35a>
 8002022:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002026:	d008      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800202e:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002030:	2311      	movs	r3, #17
 8002032:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8002038:	e6a2      	b.n	8001d80 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002040:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002048:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800204a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800204c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800204e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002050:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002054:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002058:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800205c:	2a40      	cmp	r2, #64	; 0x40
 800205e:	f47f ae92 	bne.w	8001d86 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002062:	f7ff fda5 	bl	8001bb0 <HAL_I2C_MemTxCpltCallback>
 8002066:	e788      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002068:	4d90      	ldr	r5, [pc, #576]	; (80022ac <HAL_I2C_EV_IRQHandler+0x5cc>)
 800206a:	400d      	ands	r5, r1
 800206c:	2d00      	cmp	r5, #0
 800206e:	d041      	beq.n	80020f4 <HAL_I2C_EV_IRQHandler+0x414>
 8002070:	0551      	lsls	r1, r2, #21
 8002072:	d53f      	bpl.n	80020f4 <HAL_I2C_EV_IRQHandler+0x414>
 8002074:	2c00      	cmp	r4, #0
 8002076:	d13d      	bne.n	80020f4 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002078:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800207c:	2a22      	cmp	r2, #34	; 0x22
 800207e:	f47f af7c 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 8002082:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002084:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8002086:	2a03      	cmp	r2, #3
 8002088:	d913      	bls.n	80020b2 <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800208a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	1c51      	adds	r1, r2, #1
 8002090:	6241      	str	r1, [r0, #36]	; 0x24
 8002092:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002094:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002096:	3b01      	subs	r3, #1
 8002098:	b29b      	uxth	r3, r3
 800209a:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 800209c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	f47f af6a 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020a6:	6802      	ldr	r2, [r0, #0]
 80020a8:	6853      	ldr	r3, [r2, #4]
 80020aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ae:	6053      	str	r3, [r2, #4]
 80020b0:	e763      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 80020b2:	2a01      	cmp	r2, #1
 80020b4:	f63f af61 	bhi.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020be:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020c6:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020c8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	1c51      	adds	r1, r2, #1
 80020ce:	6241      	str	r1, [r0, #36]	; 0x24
 80020d0:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80020d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80020da:	2320      	movs	r3, #32
 80020dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80020e0:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ea:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ec:	d158      	bne.n	80021a0 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020ee:	f7ff fd60 	bl	8001bb2 <HAL_I2C_MemRxCpltCallback>
 80020f2:	e742      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	f43f af40 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 80020fa:	0597      	lsls	r7, r2, #22
 80020fc:	f57f af3d 	bpl.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002100:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8002102:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002104:	b292      	uxth	r2, r2
 8002106:	2a04      	cmp	r2, #4
 8002108:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800210a:	d108      	bne.n	800211e <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002112:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002114:	1c51      	adds	r1, r2, #1
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	6241      	str	r1, [r0, #36]	; 0x24
 800211a:	7013      	strb	r3, [r2, #0]
 800211c:	e76b      	b.n	8001ff6 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 800211e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002120:	b2a4      	uxth	r4, r4
 8002122:	2c03      	cmp	r4, #3
 8002124:	d108      	bne.n	8002138 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800212c:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002134:	6019      	str	r1, [r3, #0]
 8002136:	e7ed      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 8002138:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800213a:	b2a4      	uxth	r4, r4
 800213c:	2c02      	cmp	r4, #2
 800213e:	d1e9      	bne.n	8002114 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8002140:	3901      	subs	r1, #1
 8002142:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	bf9d      	ittte	ls
 8002148:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 800214c:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800214e:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002150:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002154:	bf98      	it	ls
 8002156:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800215a:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	1c51      	adds	r1, r2, #1
 8002160:	6241      	str	r1, [r0, #36]	; 0x24
 8002162:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002164:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002166:	3b01      	subs	r3, #1
 8002168:	b29b      	uxth	r3, r3
 800216a:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800216c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	6242      	str	r2, [r0, #36]	; 0x24
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6912      	ldr	r2, [r2, #16]
 8002176:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002178:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800217a:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 800217c:	3b01      	subs	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002182:	6853      	ldr	r3, [r2, #4]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800218a:	2320      	movs	r3, #32
 800218c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	2300      	movs	r3, #0
 8002192:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002194:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800219c:	2a40      	cmp	r2, #64	; 0x40
 800219e:	e7a5      	b.n	80020ec <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021a0:	f7ff fd01 	bl	8001ba6 <HAL_I2C_MasterRxCpltCallback>
 80021a4:	e6e9      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80021a6:	4c42      	ldr	r4, [pc, #264]	; (80022b0 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80021a8:	400c      	ands	r4, r1
 80021aa:	b174      	cbz	r4, 80021ca <HAL_I2C_EV_IRQHandler+0x4ea>
 80021ac:	0596      	lsls	r6, r2, #22
 80021ae:	d50c      	bpl.n	80021ca <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80021b0:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80021b2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80021b4:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80021b8:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80021ba:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 80021be:	bf54      	ite	pl
 80021c0:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 80021c2:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80021c4:	f7ff fcf2 	bl	8001bac <HAL_I2C_AddrCallback>
 80021c8:	e6d7      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80021ca:	4c3a      	ldr	r4, [pc, #232]	; (80022b4 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80021cc:	400c      	ands	r4, r1
 80021ce:	2c00      	cmp	r4, #0
 80021d0:	d074      	beq.n	80022bc <HAL_I2C_EV_IRQHandler+0x5dc>
 80021d2:	0594      	lsls	r4, r2, #22
 80021d4:	d572      	bpl.n	80022bc <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80021d6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80021e0:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80021e2:	2100      	movs	r1, #0
 80021e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80021e6:	6959      	ldr	r1, [r3, #20]
 80021e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	f041 0101 	orr.w	r1, r1, #1
 80021f0:	6019      	str	r1, [r3, #0]
 80021f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80021fa:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 8002200:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002202:	d50c      	bpl.n	800221e <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002204:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002208:	2922      	cmp	r1, #34	; 0x22
 800220a:	d003      	beq.n	8002214 <HAL_I2C_EV_IRQHandler+0x534>
 800220c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002210:	292a      	cmp	r1, #42	; 0x2a
 8002212:	d129      	bne.n	8002268 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002214:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002216:	6809      	ldr	r1, [r1, #0]
 8002218:	6849      	ldr	r1, [r1, #4]
 800221a:	b289      	uxth	r1, r1
 800221c:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800221e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002220:	b289      	uxth	r1, r1
 8002222:	b1e1      	cbz	r1, 800225e <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	074f      	lsls	r7, r1, #29
 8002228:	d508      	bpl.n	800223c <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800222a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	1c4c      	adds	r4, r1, #1
 8002230:	6244      	str	r4, [r0, #36]	; 0x24
 8002232:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002234:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002236:	3b01      	subs	r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800223c:	6801      	ldr	r1, [r0, #0]
 800223e:	694b      	ldr	r3, [r1, #20]
 8002240:	065e      	lsls	r6, r3, #25
 8002242:	d508      	bpl.n	8002256 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002244:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002246:	6909      	ldr	r1, [r1, #16]
 8002248:	1c5c      	adds	r4, r3, #1
 800224a:	6244      	str	r4, [r0, #36]	; 0x24
 800224c:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 800224e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002250:	3b01      	subs	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002256:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800225e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002260:	b123      	cbz	r3, 800226c <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 8002262:	f7ff fca9 	bl	8001bb8 <I2C_ITError>
 8002266:	e688      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002268:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800226a:	e7d4      	b.n	8002216 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800226c:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8002270:	2902      	cmp	r1, #2
 8002272:	d80a      	bhi.n	800228a <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8002276:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002278:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800227c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002284:	f7ff fc93 	bl	8001bae <HAL_I2C_ListenCpltCallback>
 8002288:	e677      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800228a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800228c:	2b22      	cmp	r3, #34	; 0x22
 800228e:	d002      	beq.n	8002296 <HAL_I2C_EV_IRQHandler+0x5b6>
 8002290:	2a22      	cmp	r2, #34	; 0x22
 8002292:	f47f ae72 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002296:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002298:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800229c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022a4:	f7ff fc81 	bl	8001baa <HAL_I2C_SlaveRxCpltCallback>
 80022a8:	e667      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 80022aa:	bf00      	nop
 80022ac:	00010040 	.word	0x00010040
 80022b0:	00010002 	.word	0x00010002
 80022b4:	00010010 	.word	0x00010010
 80022b8:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80022bc:	4e39      	ldr	r6, [pc, #228]	; (80023a4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 80022be:	4c3a      	ldr	r4, [pc, #232]	; (80023a8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 80022c0:	402e      	ands	r6, r5
 80022c2:	400c      	ands	r4, r1
 80022c4:	2e00      	cmp	r6, #0
 80022c6:	d036      	beq.n	8002336 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80022c8:	4d38      	ldr	r5, [pc, #224]	; (80023ac <HAL_I2C_EV_IRQHandler+0x6cc>)
 80022ca:	400d      	ands	r5, r1
 80022cc:	b33d      	cbz	r5, 800231e <HAL_I2C_EV_IRQHandler+0x63e>
 80022ce:	0555      	lsls	r5, r2, #21
 80022d0:	d525      	bpl.n	800231e <HAL_I2C_EV_IRQHandler+0x63e>
 80022d2:	bb24      	cbnz	r4, 800231e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80022d4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80022d8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022da:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 80022dc:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 80022de:	2a00      	cmp	r2, #0
 80022e0:	f43f ae4b 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80022e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80022e6:	1c54      	adds	r4, r2, #1
 80022e8:	6244      	str	r4, [r0, #36]	; 0x24
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80022ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022f0:	3a01      	subs	r2, #1
 80022f2:	b292      	uxth	r2, r2
 80022f4:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022f6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022f8:	b292      	uxth	r2, r2
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	f47f ae3d 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 8002300:	2929      	cmp	r1, #41	; 0x29
 8002302:	f47f ae3a 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800230e:	2321      	movs	r3, #33	; 0x21
 8002310:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002312:	2328      	movs	r3, #40	; 0x28
 8002314:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002318:	f7ff fc46 	bl	8001ba8 <HAL_I2C_SlaveTxCpltCallback>
 800231c:	e62d      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800231e:	2c00      	cmp	r4, #0
 8002320:	f43f ae2b 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 8002324:	0594      	lsls	r4, r2, #22
 8002326:	f57f ae28 	bpl.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 800232a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800232c:	b292      	uxth	r2, r2
 800232e:	2a00      	cmp	r2, #0
 8002330:	f47f ae5c 	bne.w	8001fec <HAL_I2C_EV_IRQHandler+0x30c>
 8002334:	e621      	b.n	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002336:	4d1e      	ldr	r5, [pc, #120]	; (80023b0 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8002338:	400d      	ands	r5, r1
 800233a:	b335      	cbz	r5, 800238a <HAL_I2C_EV_IRQHandler+0x6aa>
 800233c:	0551      	lsls	r1, r2, #21
 800233e:	d524      	bpl.n	800238a <HAL_I2C_EV_IRQHandler+0x6aa>
 8002340:	bb1c      	cbnz	r4, 800238a <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8002342:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002346:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002348:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 800234a:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 800234c:	2900      	cmp	r1, #0
 800234e:	f43f ae14 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002352:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	1c4c      	adds	r4, r1, #1
 8002358:	6244      	str	r4, [r0, #36]	; 0x24
 800235a:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800235c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800235e:	3b01      	subs	r3, #1
 8002360:	b29b      	uxth	r3, r3
 8002362:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002364:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	f47f ae06 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 800236e:	2a2a      	cmp	r2, #42	; 0x2a
 8002370:	f47f ae03 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002374:	6802      	ldr	r2, [r0, #0]
 8002376:	6853      	ldr	r3, [r2, #4]
 8002378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800237c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800237e:	2322      	movs	r3, #34	; 0x22
 8002380:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002382:	2328      	movs	r3, #40	; 0x28
 8002384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002388:	e78c      	b.n	80022a4 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800238a:	2c00      	cmp	r4, #0
 800238c:	f43f adf5 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
 8002390:	0592      	lsls	r2, r2, #22
 8002392:	f57f adf2 	bpl.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002396:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002398:	b292      	uxth	r2, r2
 800239a:	2a00      	cmp	r2, #0
 800239c:	f43f aded 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80023a2:	e6b7      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x434>
 80023a4:	00100004 	.word	0x00100004
 80023a8:	00010004 	.word	0x00010004
 80023ac:	00010080 	.word	0x00010080
 80023b0:	00010040 	.word	0x00010040

080023b4 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80023b6:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023b8:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80023ba:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c2:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 80023c4:	2200      	movs	r2, #0
 80023c6:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 80023c8:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80023ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023cc:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80023ce:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80023d2:	2960      	cmp	r1, #96	; 0x60
 80023d4:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80023e0:	d107      	bne.n	80023f2 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e2:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80023ec:	f7ff fbe3 	bl	8001bb6 <HAL_I2C_AbortCpltCallback>
 80023f0:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80023fa:	f7ff fbdb 	bl	8001bb4 <HAL_I2C_ErrorCallback>
 80023fe:	bd08      	pop	{r3, pc}

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002404:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	4604      	mov	r4, r0
 8002408:	b910      	cbnz	r0, 8002410 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800240a:	2001      	movs	r0, #1
 800240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_ClockConfig+0x124>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	f002 020f 	and.w	r2, r2, #15
 8002418:	428a      	cmp	r2, r1
 800241a:	d328      	bcc.n	800246e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	6821      	ldr	r1, [r4, #0]
 800241e:	078f      	lsls	r7, r1, #30
 8002420:	d42d      	bmi.n	800247e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	07c8      	lsls	r0, r1, #31
 8002424:	d440      	bmi.n	80024a8 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_ClockConfig+0x124>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f002 020f 	and.w	r2, r2, #15
 800242e:	4295      	cmp	r5, r2
 8002430:	d366      	bcc.n	8002500 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	0751      	lsls	r1, r2, #29
 8002436:	d46c      	bmi.n	8002512 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	0713      	lsls	r3, r2, #28
 800243a:	d507      	bpl.n	800244c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243c:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <HAL_RCC_ClockConfig+0x128>)
 800243e:	6921      	ldr	r1, [r4, #16]
 8002440:	6893      	ldr	r3, [r2, #8]
 8002442:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002446:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800244a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244c:	f000 faa8 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCC_ClockConfig+0x128>)
 8002452:	4a36      	ldr	r2, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x12c>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	40d8      	lsrs	r0, r3
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x130>)
 8002460:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002462:	2000      	movs	r0, #0
 8002464:	f005 fcb4 	bl	8007dd0 <HAL_InitTick>

  return HAL_OK;
 8002468:	2000      	movs	r0, #0
 800246a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	b2ca      	uxtb	r2, r1
 8002470:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	4299      	cmp	r1, r3
 800247a:	d1c6      	bne.n	800240a <HAL_RCC_ClockConfig+0xa>
 800247c:	e7ce      	b.n	800241c <HAL_RCC_ClockConfig+0x1c>
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002484:	bf1e      	ittt	ne
 8002486:	689a      	ldrne	r2, [r3, #8]
 8002488:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800248c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002490:	bf42      	ittt	mi
 8002492:	689a      	ldrmi	r2, [r3, #8]
 8002494:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002498:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68a0      	ldr	r0, [r4, #8]
 800249e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024a2:	4302      	orrs	r2, r0
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	e7bc      	b.n	8002422 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a8:	6862      	ldr	r2, [r4, #4]
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_ClockConfig+0x128>)
 80024ac:	2a01      	cmp	r2, #1
 80024ae:	d11d      	bne.n	80024ec <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	d0a8      	beq.n	800240a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b8:	4e1b      	ldr	r6, [pc, #108]	; (8002528 <HAL_RCC_ClockConfig+0x128>)
 80024ba:	68b3      	ldr	r3, [r6, #8]
 80024bc:	f023 0303 	bic.w	r3, r3, #3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80024c4:	f7fe fccc 	bl	8000e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80024cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	68b3      	ldr	r3, [r6, #8]
 80024d0:	6862      	ldr	r2, [r4, #4]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024da:	d0a4      	beq.n	8002426 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe fcc0 	bl	8000e60 <HAL_GetTick>
 80024e0:	1bc0      	subs	r0, r0, r7
 80024e2:	4540      	cmp	r0, r8
 80024e4:	d9f3      	bls.n	80024ce <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80024e6:	2003      	movs	r0, #3
}
 80024e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ec:	1e91      	subs	r1, r2, #2
 80024ee:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	d802      	bhi.n	80024fa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024f8:	e7dd      	b.n	80024b6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	f013 0f02 	tst.w	r3, #2
 80024fe:	e7da      	b.n	80024b6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002500:	b2ea      	uxtb	r2, r5
 8002502:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	429d      	cmp	r5, r3
 800250c:	f47f af7d 	bne.w	800240a <HAL_RCC_ClockConfig+0xa>
 8002510:	e78f      	b.n	8002432 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002512:	4905      	ldr	r1, [pc, #20]	; (8002528 <HAL_RCC_ClockConfig+0x128>)
 8002514:	68e0      	ldr	r0, [r4, #12]
 8002516:	688b      	ldr	r3, [r1, #8]
 8002518:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800251c:	4303      	orrs	r3, r0
 800251e:	608b      	str	r3, [r1, #8]
 8002520:	e78a      	b.n	8002438 <HAL_RCC_ClockConfig+0x38>
 8002522:	bf00      	nop
 8002524:	40023c00 	.word	0x40023c00
 8002528:	40023800 	.word	0x40023800
 800252c:	080080cc 	.word	0x080080cc
 8002530:	2000000c 	.word	0x2000000c

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002542:	6810      	ldr	r0, [r2, #0]
}
 8002544:	40d8      	lsrs	r0, r3
 8002546:	4770      	bx	lr
 8002548:	40023800 	.word	0x40023800
 800254c:	080080dc 	.word	0x080080dc
 8002550:	2000000c 	.word	0x2000000c

08002554 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002554:	230f      	movs	r3, #15
 8002556:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_GetClockConfig+0x34>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	f002 0203 	and.w	r2, r2, #3
 8002560:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002568:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002570:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800257a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCC_GetClockConfig+0x38>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	600b      	str	r3, [r1, #0]
 8002586:	4770      	bx	lr
 8002588:	40023800 	.word	0x40023800
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002590:	6803      	ldr	r3, [r0, #0]
{
 8002592:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002596:	f013 0601 	ands.w	r6, r3, #1
{
 800259a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800259c:	d00b      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800259e:	49aa      	ldr	r1, [pc, #680]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80025a0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80025a2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80025a6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80025aa:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80025ac:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80025b0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80025b4:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80025b6:	079d      	lsls	r5, r3, #30
 80025b8:	d50b      	bpl.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80025ba:	48a3      	ldr	r0, [pc, #652]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80025bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025be:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80025c2:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 80025c6:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 80025c8:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80025ca:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 80025ce:	bf08      	it	eq
 80025d0:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025d2:	f013 0504 	ands.w	r5, r3, #4
 80025d6:	d012      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d8:	499b      	ldr	r1, [pc, #620]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80025da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80025dc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025e8:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025ec:	bf18      	it	ne
 80025ee:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025f6:	bf12      	itee	ne
 80025f8:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 80025fa:	2500      	moveq	r5, #0
      plli2sused = 1U;
 80025fc:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025fe:	0718      	lsls	r0, r3, #28
 8002600:	d50f      	bpl.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002602:	4891      	ldr	r0, [pc, #580]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002606:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800260a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800260e:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002610:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002614:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002618:	f000 8109 	beq.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 800261c:	2900      	cmp	r1, #0
 800261e:	bf08      	it	eq
 8002620:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002622:	0699      	lsls	r1, r3, #26
 8002624:	d533      	bpl.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	4b87      	ldr	r3, [pc, #540]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800262c:	4f87      	ldr	r7, [pc, #540]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002630:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002648:	f7fe fc0a 	bl	8000e60 <HAL_GetTick>
 800264c:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	05da      	lsls	r2, r3, #23
 8002652:	f140 80ee 	bpl.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002656:	4f7c      	ldr	r7, [pc, #496]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800265a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800265e:	f040 80fb 	bne.w	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002664:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002668:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800266c:	4a76      	ldr	r2, [pc, #472]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800266e:	f040 8116 	bne.w	800289e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002672:	6891      	ldr	r1, [r2, #8]
 8002674:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002678:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800267c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002680:	4301      	orrs	r1, r0
 8002682:	6091      	str	r1, [r2, #8]
 8002684:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268a:	430b      	orrs	r3, r1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002692:	bf42      	ittt	mi
 8002694:	4b6e      	ldrmi	r3, [pc, #440]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002696:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 800269a:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	061a      	lsls	r2, r3, #24
 80026a0:	d508      	bpl.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80026a2:	4969      	ldr	r1, [pc, #420]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80026a6:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80026aa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80026ae:	4302      	orrs	r2, r0
 80026b0:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026b4:	065f      	lsls	r7, r3, #25
 80026b6:	d508      	bpl.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026b8:	4963      	ldr	r1, [pc, #396]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026bc:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80026c0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026c4:	4302      	orrs	r2, r0
 80026c6:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026ca:	05d8      	lsls	r0, r3, #23
 80026cc:	d50c      	bpl.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026ce:	485e      	ldr	r0, [pc, #376]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80026d2:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80026d6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 80026da:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 80026dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026e0:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 80026e4:	bf08      	it	eq
 80026e6:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026e8:	0599      	lsls	r1, r3, #22
 80026ea:	d508      	bpl.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026ec:	4956      	ldr	r1, [pc, #344]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80026f0:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80026f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80026f8:	4302      	orrs	r2, r0
 80026fa:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026fe:	055a      	lsls	r2, r3, #21
 8002700:	f100 80d1 	bmi.w	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002704:	2e01      	cmp	r6, #1
 8002706:	f040 80dc 	bne.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800270a:	4e52      	ldr	r6, [pc, #328]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800270c:	4f4e      	ldr	r7, [pc, #312]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002712:	f7fe fba5 	bl	8000e60 <HAL_GetTick>
 8002716:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	f100 8125 	bmi.w	800296a <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	07d0      	lsls	r0, r2, #31
 8002724:	d501      	bpl.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8002726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002728:	b11b      	cbz	r3, 8002732 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800272a:	0791      	lsls	r1, r2, #30
 800272c:	d515      	bpl.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800272e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002730:	b99b      	cbnz	r3, 800275a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002732:	4945      	ldr	r1, [pc, #276]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002734:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002738:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800273c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002740:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002744:	4303      	orrs	r3, r0
 8002746:	6860      	ldr	r0, [r4, #4]
 8002748:	4303      	orrs	r3, r0
 800274a:	68a0      	ldr	r0, [r4, #8]
 800274c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002750:	6960      	ldr	r0, [r4, #20]
 8002752:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800275a:	0753      	lsls	r3, r2, #29
 800275c:	d503      	bpl.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800275e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002764:	d005      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002766:	0717      	lsls	r7, r2, #28
 8002768:	d520      	bpl.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800276a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800276c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002770:	d11c      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002772:	4935      	ldr	r1, [pc, #212]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002774:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002778:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002784:	4303      	orrs	r3, r0
 8002786:	6860      	ldr	r0, [r4, #4]
 8002788:	4303      	orrs	r3, r0
 800278a:	68a0      	ldr	r0, [r4, #8]
 800278c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002790:	6920      	ldr	r0, [r4, #16]
 8002792:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002796:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800279a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800279e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027a0:	f020 001f 	bic.w	r0, r0, #31
 80027a4:	3b01      	subs	r3, #1
 80027a6:	4303      	orrs	r3, r0
 80027a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80027ac:	0550      	lsls	r0, r2, #21
 80027ae:	d51b      	bpl.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80027b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b6:	d117      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027b8:	4823      	ldr	r0, [pc, #140]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80027ba:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027bc:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027c0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80027c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80027c8:	433b      	orrs	r3, r7
 80027ca:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027cc:	f3c1 4101 	ubfx	r1, r1, #16, #2
 80027d0:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80027d2:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80027d6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80027da:	68e1      	ldr	r1, [r4, #12]
 80027dc:	0849      	lsrs	r1, r1, #1
 80027de:	3901      	subs	r1, #1
 80027e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027e4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027e8:	0511      	lsls	r1, r2, #20
 80027ea:	d511      	bpl.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027ec:	6923      	ldr	r3, [r4, #16]
 80027ee:	68a2      	ldr	r2, [r4, #8]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	6962      	ldr	r2, [r4, #20]
 80027fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002800:	68e2      	ldr	r2, [r4, #12]
 8002802:	0852      	lsrs	r2, r2, #1
 8002804:	3a01      	subs	r2, #1
 8002806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800280c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002810:	2301      	movs	r3, #1
 8002812:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002814:	f7fe fb24 	bl	8000e60 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002818:	4e0b      	ldr	r6, [pc, #44]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 800281a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800281c:	6833      	ldr	r3, [r6, #0]
 800281e:	011a      	lsls	r2, r3, #4
 8002820:	d453      	bmi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002822:	f7fe fb1d 	bl	8000e60 <HAL_GetTick>
 8002826:	1bc0      	subs	r0, r0, r7
 8002828:	2802      	cmp	r0, #2
 800282a:	d9f7      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800282c:	e008      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 800282e:	2601      	movs	r6, #1
 8002830:	e6f7      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fe fb15 	bl	8000e60 <HAL_GetTick>
 8002836:	eba0 0008 	sub.w	r0, r0, r8
 800283a:	2802      	cmp	r0, #2
 800283c:	f67f af07 	bls.w	800264e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8002840:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002842:	b003      	add	sp, #12
 8002844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002848:	40023800 	.word	0x40023800
 800284c:	40007000 	.word	0x40007000
 8002850:	424711e0 	.word	0x424711e0
 8002854:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800285a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800285e:	4293      	cmp	r3, r2
 8002860:	f43f aeff 	beq.w	8002662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002866:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8002868:	2101      	movs	r1, #1
 800286a:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002870:	2100      	movs	r1, #0
 8002872:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002874:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002878:	07db      	lsls	r3, r3, #31
 800287a:	f57f aef2 	bpl.w	8002662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 800287e:	f7fe faef 	bl	8000e60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002886:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800288a:	0798      	lsls	r0, r3, #30
 800288c:	f53f aee9 	bmi.w	8002662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe fae6 	bl	8000e60 <HAL_GetTick>
 8002894:	eba0 0008 	sub.w	r0, r0, r8
 8002898:	4548      	cmp	r0, r9
 800289a:	d9f5      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800289c:	e7d0      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289e:	6891      	ldr	r1, [r2, #8]
 80028a0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80028a4:	e6ed      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028a6:	483c      	ldr	r0, [pc, #240]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80028a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80028aa:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80028ae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028b2:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028b4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028b8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028bc:	f47f af22 	bne.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80028c0:	e723      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c6:	f43f af20 	beq.w	800270a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 80028ca:	2d01      	cmp	r5, #1
 80028cc:	d14b      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 80028ce:	4d33      	ldr	r5, [pc, #204]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028d0:	4e31      	ldr	r6, [pc, #196]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80028d6:	f7fe fac3 	bl	8000e60 <HAL_GetTick>
 80028da:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028dc:	6833      	ldr	r3, [r6, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	d44b      	bmi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80028e2:	6821      	ldr	r1, [r4, #0]
 80028e4:	074e      	lsls	r6, r1, #29
 80028e6:	d501      	bpl.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80028e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028ea:	b11b      	cbz	r3, 80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80028ec:	0708      	lsls	r0, r1, #28
 80028ee:	d51a      	bpl.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028f2:	b9c3      	cbnz	r3, 8002926 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80028f4:	4a28      	ldr	r2, [pc, #160]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80028f6:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80028f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80028fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002900:	4303      	orrs	r3, r0
 8002902:	69e0      	ldr	r0, [r4, #28]
 8002904:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002908:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800290a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800290e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002912:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002916:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002918:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800291c:	3801      	subs	r0, #1
 800291e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002922:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002926:	05ca      	lsls	r2, r1, #23
 8002928:	d514      	bpl.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800292a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800292c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002930:	d110      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002932:	4919      	ldr	r1, [pc, #100]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002934:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002936:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800293a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800293e:	4313      	orrs	r3, r2
 8002940:	69e2      	ldr	r2, [r4, #28]
 8002942:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002946:	6a22      	ldr	r2, [r4, #32]
 8002948:	0852      	lsrs	r2, r2, #1
 800294a:	3a01      	subs	r2, #1
 800294c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8002954:	2301      	movs	r3, #1
 8002956:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002958:	f7fe fa82 	bl	8000e60 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800295c:	4c0e      	ldr	r4, [pc, #56]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 800295e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	d50f      	bpl.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8002966:	2000      	movs	r0, #0
 8002968:	e76b      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800296a:	f7fe fa79 	bl	8000e60 <HAL_GetTick>
 800296e:	eba0 0008 	sub.w	r0, r0, r8
 8002972:	2802      	cmp	r0, #2
 8002974:	f67f aed0 	bls.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002978:	e762      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800297a:	f7fe fa71 	bl	8000e60 <HAL_GetTick>
 800297e:	1bc0      	subs	r0, r0, r7
 8002980:	2802      	cmp	r0, #2
 8002982:	d9ab      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002984:	e75c      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002986:	f7fe fa6b 	bl	8000e60 <HAL_GetTick>
 800298a:	1b40      	subs	r0, r0, r5
 800298c:	2802      	cmp	r0, #2
 800298e:	d9e7      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002990:	e756      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002992:	bf00      	nop
 8002994:	42470e40 	.word	0x42470e40
 8002998:	40023800 	.word	0x40023800
 800299c:	42470070 	.word	0x42470070

080029a0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a0:	4920      	ldr	r1, [pc, #128]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80029a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a4:	688b      	ldr	r3, [r1, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d007      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x1e>
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d020      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x88>)
 80029b4:	481d      	ldr	r0, [pc, #116]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x8c>)
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf18      	it	ne
 80029ba:	4610      	movne	r0, r2
 80029bc:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029be:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c8:	bf14      	ite	ne
 80029ca:	4818      	ldrne	r0, [pc, #96]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029cc:	4816      	ldreq	r0, [pc, #88]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029d2:	bf18      	it	ne
 80029d4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	fba1 0100 	umull	r0, r1, r1, r0
 80029de:	f7fe f891 	bl	8000b04 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x84>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80029ee:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029f2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	bf14      	ite	ne
 8002a00:	480a      	ldrne	r0, [pc, #40]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4809      	ldreq	r0, [pc, #36]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a04:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a08:	bf18      	it	ne
 8002a0a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	fba1 0100 	umull	r0, r1, r1, r0
 8002a14:	f7fe f876 	bl	8000b04 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x84>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002a20:	e7e5      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x4e>
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	017d7840 	.word	0x017d7840

08002a30 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a30:	6803      	ldr	r3, [r0, #0]
{
 8002a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	07df      	lsls	r7, r3, #31
{
 8002a38:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	d410      	bmi.n	8002a5e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	079e      	lsls	r6, r3, #30
 8002a40:	d467      	bmi.n	8002b12 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	071a      	lsls	r2, r3, #28
 8002a46:	f100 80b2 	bmi.w	8002bae <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	075b      	lsls	r3, r3, #29
 8002a4e:	f100 80d0 	bmi.w	8002bf2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a52:	69a2      	ldr	r2, [r4, #24]
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	f040 8139 	bne.w	8002ccc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	e01e      	b.n	8002a9c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a5e:	4b97      	ldr	r3, [pc, #604]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	f002 020c 	and.w	r2, r2, #12
 8002a66:	2a04      	cmp	r2, #4
 8002a68:	d010      	beq.n	8002a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a70:	2a08      	cmp	r2, #8
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	025d      	lsls	r5, r3, #9
 8002a78:	d408      	bmi.n	8002a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b90      	ldr	r3, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a82:	2a0c      	cmp	r2, #12
 8002a84:	d10d      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	0250      	lsls	r0, r2, #9
 8002a8a:	d50a      	bpl.n	8002aa2 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0399      	lsls	r1, r3, #14
 8002a92:	d5d3      	bpl.n	8002a3c <HAL_RCC_OscConfig+0xc>
 8002a94:	6863      	ldr	r3, [r4, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1d0      	bne.n	8002a3c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
}
 8002a9c:	b002      	add	sp, #8
 8002a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	6862      	ldr	r2, [r4, #4]
 8002aa4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002aa8:	d111      	bne.n	8002ace <HAL_RCC_OscConfig+0x9e>
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ab0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ab2:	f7fe f9d5 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4d81      	ldr	r5, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002ab8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	039a      	lsls	r2, r3, #14
 8002abe:	d4bd      	bmi.n	8002a3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe f9ce 	bl	8000e60 <HAL_GetTick>
 8002ac4:	1b80      	subs	r0, r0, r6
 8002ac6:	2864      	cmp	r0, #100	; 0x64
 8002ac8:	d9f7      	bls.n	8002aba <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002aca:	2003      	movs	r0, #3
 8002acc:	e7e6      	b.n	8002a9c <HAL_RCC_OscConfig+0x6c>
 8002ace:	4d7b      	ldr	r5, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xb8>
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	602b      	str	r3, [r5, #0]
 8002ae6:	e7e4      	b.n	8002ab2 <HAL_RCC_OscConfig+0x82>
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	602b      	str	r3, [r5, #0]
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d1db      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002afa:	f7fe f9b1 	bl	8000e60 <HAL_GetTick>
 8002afe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	039b      	lsls	r3, r3, #14
 8002b04:	d59a      	bpl.n	8002a3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b06:	f7fe f9ab 	bl	8000e60 <HAL_GetTick>
 8002b0a:	1b80      	subs	r0, r0, r6
 8002b0c:	2864      	cmp	r0, #100	; 0x64
 8002b0e:	d9f7      	bls.n	8002b00 <HAL_RCC_OscConfig+0xd0>
 8002b10:	e7db      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	f012 0f0c 	tst.w	r2, #12
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b22:	2a08      	cmp	r2, #8
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	025f      	lsls	r7, r3, #9
 8002b2a:	d508      	bpl.n	8002b3e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2c:	4a63      	ldr	r2, [pc, #396]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002b2e:	6893      	ldr	r3, [r2, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d111      	bne.n	8002b5c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b38:	6853      	ldr	r3, [r2, #4]
 8002b3a:	025e      	lsls	r6, r3, #9
 8002b3c:	d40e      	bmi.n	8002b5c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	0795      	lsls	r5, r2, #30
 8002b44:	d502      	bpl.n	8002b4c <HAL_RCC_OscConfig+0x11c>
 8002b46:	68e2      	ldr	r2, [r4, #12]
 8002b48:	2a01      	cmp	r2, #1
 8002b4a:	d1a6      	bne.n	8002a9a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	6921      	ldr	r1, [r4, #16]
 8002b50:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b54:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b58:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e772      	b.n	8002a42 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b5c:	68e2      	ldr	r2, [r4, #12]
 8002b5e:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x290>)
 8002b60:	b1b2      	cbz	r2, 8002b90 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b66:	f7fe f97b 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4d54      	ldr	r5, [pc, #336]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002b6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	682b      	ldr	r3, [r5, #0]
 8002b70:	0798      	lsls	r0, r3, #30
 8002b72:	d507      	bpl.n	8002b84 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	6922      	ldr	r2, [r4, #16]
 8002b78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b80:	602b      	str	r3, [r5, #0]
 8002b82:	e75e      	b.n	8002a42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe f96c 	bl	8000e60 <HAL_GetTick>
 8002b88:	1b80      	subs	r0, r0, r6
 8002b8a:	2802      	cmp	r0, #2
 8002b8c:	d9ef      	bls.n	8002b6e <HAL_RCC_OscConfig+0x13e>
 8002b8e:	e79c      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8002b90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b92:	f7fe f965 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4d49      	ldr	r5, [pc, #292]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002b98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	682b      	ldr	r3, [r5, #0]
 8002b9c:	0799      	lsls	r1, r3, #30
 8002b9e:	f57f af50 	bpl.w	8002a42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe f95d 	bl	8000e60 <HAL_GetTick>
 8002ba6:	1b80      	subs	r0, r0, r6
 8002ba8:	2802      	cmp	r0, #2
 8002baa:	d9f6      	bls.n	8002b9a <HAL_RCC_OscConfig+0x16a>
 8002bac:	e78d      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bae:	6962      	ldr	r2, [r4, #20]
 8002bb0:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_RCC_OscConfig+0x294>)
 8002bb2:	b17a      	cbz	r2, 8002bd4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002bb8:	f7fe f952 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbc:	4d3f      	ldr	r5, [pc, #252]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002bbe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002bc2:	079f      	lsls	r7, r3, #30
 8002bc4:	f53f af41 	bmi.w	8002a4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe f94a 	bl	8000e60 <HAL_GetTick>
 8002bcc:	1b80      	subs	r0, r0, r6
 8002bce:	2802      	cmp	r0, #2
 8002bd0:	d9f6      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x190>
 8002bd2:	e77a      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002bd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002bd6:	f7fe f943 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bda:	4d38      	ldr	r5, [pc, #224]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002bdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002be0:	0798      	lsls	r0, r3, #30
 8002be2:	f57f af32 	bpl.w	8002a4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe f93b 	bl	8000e60 <HAL_GetTick>
 8002bea:	1b80      	subs	r0, r0, r6
 8002bec:	2802      	cmp	r0, #2
 8002bee:	d9f6      	bls.n	8002bde <HAL_RCC_OscConfig+0x1ae>
 8002bf0:	e76b      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002bfa:	d128      	bne.n	8002c4e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	9201      	str	r2, [sp, #4]
 8002bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c10:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4d2d      	ldr	r5, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x298>)
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	05d9      	lsls	r1, r3, #23
 8002c18:	d51b      	bpl.n	8002c52 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1a:	68a3      	ldr	r3, [r4, #8]
 8002c1c:	4d27      	ldr	r5, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d127      	bne.n	8002c72 <HAL_RCC_OscConfig+0x242>
 8002c22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c2a:	f7fe f919 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	4d23      	ldr	r5, [pc, #140]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002c30:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c38:	079b      	lsls	r3, r3, #30
 8002c3a:	d539      	bpl.n	8002cb0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8002c3c:	2e00      	cmp	r6, #0
 8002c3e:	f43f af08 	beq.w	8002a52 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_RCC_OscConfig+0x28c>)
 8002c44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4c:	e701      	b.n	8002a52 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2600      	movs	r6, #0
 8002c50:	e7df      	b.n	8002c12 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f901 	bl	8000e60 <HAL_GetTick>
 8002c5e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	05da      	lsls	r2, r3, #23
 8002c64:	d4d9      	bmi.n	8002c1a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe f8fb 	bl	8000e60 <HAL_GetTick>
 8002c6a:	1bc0      	subs	r0, r0, r7
 8002c6c:	2802      	cmp	r0, #2
 8002c6e:	d9f7      	bls.n	8002c60 <HAL_RCC_OscConfig+0x230>
 8002c70:	e72b      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d104      	bne.n	8002c80 <HAL_RCC_OscConfig+0x250>
 8002c76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	672b      	str	r3, [r5, #112]	; 0x70
 8002c7e:	e7d0      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f2>
 8002c80:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	672a      	str	r2, [r5, #112]	; 0x70
 8002c88:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ca      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8002c94:	f7fe f8e4 	bl	8000e60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c9c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ca0:	0798      	lsls	r0, r3, #30
 8002ca2:	d5cb      	bpl.n	8002c3c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f8dc 	bl	8000e60 <HAL_GetTick>
 8002ca8:	1bc0      	subs	r0, r0, r7
 8002caa:	4540      	cmp	r0, r8
 8002cac:	d9f7      	bls.n	8002c9e <HAL_RCC_OscConfig+0x26e>
 8002cae:	e70c      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f8d6 	bl	8000e60 <HAL_GetTick>
 8002cb4:	1bc0      	subs	r0, r0, r7
 8002cb6:	4540      	cmp	r0, r8
 8002cb8:	d9bd      	bls.n	8002c36 <HAL_RCC_OscConfig+0x206>
 8002cba:	e706      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
 8002cc8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ccc:	4d23      	ldr	r5, [pc, #140]	; (8002d5c <HAL_RCC_OscConfig+0x32c>)
 8002cce:	68ab      	ldr	r3, [r5, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	f43f aee0 	beq.w	8002a9a <HAL_RCC_OscConfig+0x6a>
 8002cda:	4e21      	ldr	r6, [pc, #132]	; (8002d60 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce2:	d12d      	bne.n	8002d40 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f8bc 	bl	8000e60 <HAL_GetTick>
 8002ce8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	682b      	ldr	r3, [r5, #0]
 8002cec:	0199      	lsls	r1, r3, #6
 8002cee:	d421      	bmi.n	8002d34 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf0:	6a22      	ldr	r2, [r4, #32]
 8002cf2:	69e3      	ldr	r3, [r4, #28]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cf8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002cfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002d08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4c14      	ldr	r4, [pc, #80]	; (8002d5c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	0852      	lsrs	r2, r2, #1
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d16:	2301      	movs	r3, #1
 8002d18:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d1a:	f7fe f8a1 	bl	8000e60 <HAL_GetTick>
 8002d1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	019a      	lsls	r2, r3, #6
 8002d24:	f53f ae99 	bmi.w	8002a5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe f89a 	bl	8000e60 <HAL_GetTick>
 8002d2c:	1b40      	subs	r0, r0, r5
 8002d2e:	2802      	cmp	r0, #2
 8002d30:	d9f6      	bls.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
 8002d32:	e6ca      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f894 	bl	8000e60 <HAL_GetTick>
 8002d38:	1bc0      	subs	r0, r0, r7
 8002d3a:	2802      	cmp	r0, #2
 8002d3c:	d9d5      	bls.n	8002cea <HAL_RCC_OscConfig+0x2ba>
 8002d3e:	e6c4      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8002d40:	f7fe f88e 	bl	8000e60 <HAL_GetTick>
 8002d44:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	f57f ae86 	bpl.w	8002a5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe f887 	bl	8000e60 <HAL_GetTick>
 8002d52:	1b00      	subs	r0, r0, r4
 8002d54:	2802      	cmp	r0, #2
 8002d56:	d9f6      	bls.n	8002d46 <HAL_RCC_OscConfig+0x316>
 8002d58:	e6b7      	b.n	8002aca <HAL_RCC_OscConfig+0x9a>
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470060 	.word	0x42470060

08002d64 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d64:	6802      	ldr	r2, [r0, #0]
{
 8002d66:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d68:	68d3      	ldr	r3, [r2, #12]
 8002d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d6e:	60d3      	str	r3, [r2, #12]
{
 8002d70:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d72:	f7fe f875 	bl	8000e60 <HAL_GetTick>
 8002d76:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	d501      	bpl.n	8002d84 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8002d80:	2000      	movs	r0, #0
 8002d82:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d84:	f7fe f86c 	bl	8000e60 <HAL_GetTick>
 8002d88:	1b40      	subs	r0, r0, r5
 8002d8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d8e:	d9f3      	bls.n	8002d78 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002d90:	2003      	movs	r0, #3
}
 8002d92:	bd38      	pop	{r3, r4, r5, pc}

08002d94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d96:	6803      	ldr	r3, [r0, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	0652      	lsls	r2, r2, #25
{
 8002d9c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d9e:	d501      	bpl.n	8002da4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002da0:	2000      	movs	r0, #0
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002daa:	f7fe f859 	bl	8000e60 <HAL_GetTick>
 8002dae:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	065b      	lsls	r3, r3, #25
 8002db6:	d4f3      	bmi.n	8002da0 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002db8:	f7fe f852 	bl	8000e60 <HAL_GetTick>
 8002dbc:	1b40      	subs	r0, r0, r5
 8002dbe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dc2:	d9f5      	bls.n	8002db0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002dc4:	2003      	movs	r0, #3
}
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}

08002dc8 <HAL_RTC_Init>:
{
 8002dc8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002dca:	4604      	mov	r4, r0
 8002dcc:	b1b8      	cbz	r0, 8002dfe <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002dce:	7f43      	ldrb	r3, [r0, #29]
 8002dd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dd4:	b913      	cbnz	r3, 8002ddc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002dd6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002dd8:	f004 ff86 	bl	8007ce8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002ddc:	2302      	movs	r3, #2
 8002dde:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	22ca      	movs	r2, #202	; 0xca
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
 8002de6:	2253      	movs	r2, #83	; 0x53
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff ffd2 	bl	8002d94 <RTC_EnterInitMode>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	4605      	mov	r5, r0
 8002df4:	b128      	cbz	r0, 8002e02 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df6:	22ff      	movs	r2, #255	; 0xff
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8002dfe:	2501      	movs	r5, #1
 8002e00:	e02e      	b.n	8002e60 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e02:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e04:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e06:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e10:	6862      	ldr	r2, [r4, #4]
 8002e12:	6899      	ldr	r1, [r3, #8]
 8002e14:	4302      	orrs	r2, r0
 8002e16:	6960      	ldr	r0, [r4, #20]
 8002e18:	4302      	orrs	r2, r0
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e1e:	68e2      	ldr	r2, [r4, #12]
 8002e20:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68a1      	ldr	r1, [r4, #8]
 8002e26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e32:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	069b      	lsls	r3, r3, #26
 8002e38:	d405      	bmi.n	8002e46 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ff92 	bl	8002d64 <HAL_RTC_WaitForSynchro>
 8002e40:	b108      	cbz	r0, 8002e46 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	e7d7      	b.n	8002df6 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002e46:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002e48:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e54:	430a      	orrs	r2, r1
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	7763      	strb	r3, [r4, #29]
}
 8002e60:	4628      	mov	r0, r5
 8002e62:	bd38      	pop	{r3, r4, r5, pc}

08002e64 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002e64:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002e66:	2809      	cmp	r0, #9
 8002e68:	d803      	bhi.n	8002e72 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002e6a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002e6e:	b2c0      	uxtb	r0, r0
 8002e70:	4770      	bx	lr
    Value -= 10U;
 8002e72:	380a      	subs	r0, #10
    bcdhigh++;
 8002e74:	3301      	adds	r3, #1
    Value -= 10U;
 8002e76:	b2c0      	uxtb	r0, r0
 8002e78:	e7f5      	b.n	8002e66 <RTC_ByteToBcd2+0x2>

08002e7a <HAL_RTC_SetDate>:
{
 8002e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002e7c:	7f03      	ldrb	r3, [r0, #28]
 8002e7e:	2b01      	cmp	r3, #1
{
 8002e80:	4605      	mov	r5, r0
 8002e82:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8002e86:	d030      	beq.n	8002eea <HAL_RTC_SetDate+0x70>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002e8c:	7746      	strb	r6, [r0, #29]
 8002e8e:	784b      	ldrb	r3, [r1, #1]
 8002e90:	78c8      	ldrb	r0, [r1, #3]
 8002e92:	788e      	ldrb	r6, [r1, #2]
 8002e94:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e96:	2a00      	cmp	r2, #0
 8002e98:	d148      	bne.n	8002f2c <HAL_RTC_SetDate+0xb2>
 8002e9a:	06da      	lsls	r2, r3, #27
 8002e9c:	d503      	bpl.n	8002ea6 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	330a      	adds	r3, #10
 8002ea4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ea6:	f7ff ffdd 	bl	8002e64 <RTC_ByteToBcd2>
 8002eaa:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002eac:	7848      	ldrb	r0, [r1, #1]
 8002eae:	f7ff ffd9 	bl	8002e64 <RTC_ByteToBcd2>
 8002eb2:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f7ff ffd5 	bl	8002e64 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002eba:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002ebe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002ec2:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	22ca      	movs	r2, #202	; 0xca
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
 8002ecc:	2253      	movs	r2, #83	; 0x53
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f7ff ff5f 	bl	8002d94 <RTC_EnterInitMode>
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	4606      	mov	r6, r0
 8002eda:	b140      	cbz	r0, 8002eee <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8002ee8:	2601      	movs	r6, #1
}
 8002eea:	4630      	mov	r0, r6
 8002eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002eee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002ef2:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002ef6:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efe:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	069b      	lsls	r3, r3, #26
 8002f04:	d40a      	bmi.n	8002f1c <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f06:	4628      	mov	r0, r5
 8002f08:	f7ff ff2c 	bl	8002d64 <HAL_RTC_WaitForSynchro>
 8002f0c:	b130      	cbz	r0, 8002f1c <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	22ff      	movs	r2, #255	; 0xff
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f14:	2304      	movs	r3, #4
 8002f16:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8002f18:	772e      	strb	r6, [r5, #28]
 8002f1a:	e7e5      	b.n	8002ee8 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f22:	2301      	movs	r3, #1
 8002f24:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002f26:	2300      	movs	r3, #0
 8002f28:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8002f2a:	e7de      	b.n	8002eea <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f2e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f32:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f34:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002f38:	e7c5      	b.n	8002ec6 <HAL_RTC_SetDate+0x4c>

08002f3a <HAL_RTC_SetTime>:
{
 8002f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002f3c:	7f03      	ldrb	r3, [r0, #28]
 8002f3e:	2b01      	cmp	r3, #1
{
 8002f40:	4606      	mov	r6, r0
 8002f42:	460f      	mov	r7, r1
 8002f44:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8002f48:	d02f      	beq.n	8002faa <HAL_RTC_SetTime+0x70>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	7703      	strb	r3, [r0, #28]
 8002f4e:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f50:	7745      	strb	r5, [r0, #29]
 8002f52:	7808      	ldrb	r0, [r1, #0]
 8002f54:	784d      	ldrb	r5, [r1, #1]
 8002f56:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f58:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002f5a:	bb42      	cbnz	r2, 8002fae <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f5c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8002f60:	bf08      	it	eq
 8002f62:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f64:	f7ff ff7e 	bl	8002e64 <RTC_ByteToBcd2>
 8002f68:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f7ff ff7a 	bl	8002e64 <RTC_ByteToBcd2>
 8002f70:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff ff76 	bl	8002e64 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002f78:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002f7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002f82:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f86:	6833      	ldr	r3, [r6, #0]
 8002f88:	22ca      	movs	r2, #202	; 0xca
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8c:	2253      	movs	r2, #83	; 0x53
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f90:	4630      	mov	r0, r6
 8002f92:	f7ff feff 	bl	8002d94 <RTC_EnterInitMode>
 8002f96:	6833      	ldr	r3, [r6, #0]
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b1a8      	cbz	r0, 8002fc8 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8002fa8:	2501      	movs	r5, #1
}
 8002faa:	4628      	mov	r0, r5
 8002fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fae:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002fb2:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8002fb6:	bf08      	it	eq
 8002fb8:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002fba:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002fbe:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002fc0:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002fc2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002fc6:	e7de      	b.n	8002f86 <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fc8:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8002fcc:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002fd0:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002fd2:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fd4:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002fd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fda:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	4302      	orrs	r2, r0
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	d40a      	bmi.n	800300a <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f7ff feb5 	bl	8002d64 <HAL_RTC_WaitForSynchro>
 8002ffa:	b130      	cbz	r0, 800300a <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002ffc:	6833      	ldr	r3, [r6, #0]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003002:	2304      	movs	r3, #4
 8003004:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8003006:	7735      	strb	r5, [r6, #28]
 8003008:	e7ce      	b.n	8002fa8 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800300a:	6833      	ldr	r3, [r6, #0]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003010:	2301      	movs	r3, #1
 8003012:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8003014:	2300      	movs	r3, #0
 8003016:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8003018:	e7c7      	b.n	8002faa <HAL_RTC_SetTime+0x70>

0800301a <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800301a:	0903      	lsrs	r3, r0, #4
 800301c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003020:	f000 000f 	and.w	r0, r0, #15
 8003024:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8003028:	b2c0      	uxtb	r0, r0
 800302a:	4770      	bx	lr

0800302c <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800302c:	6803      	ldr	r3, [r0, #0]
 800302e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003030:	6048      	str	r0, [r1, #4]
{
 8003032:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003034:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003036:	681d      	ldr	r5, [r3, #0]
 8003038:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 800303c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003040:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003044:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003046:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003048:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800304c:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003050:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003054:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003058:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800305a:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800305c:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800305e:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8003060:	b952      	cbnz	r2, 8003078 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003062:	f7ff ffda 	bl	800301a <RTC_Bcd2ToByte>
 8003066:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ffd6 	bl	800301a <RTC_Bcd2ToByte>
 800306e:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8003070:	4628      	mov	r0, r5
 8003072:	f7ff ffd2 	bl	800301a <RTC_Bcd2ToByte>
 8003076:	7088      	strb	r0, [r1, #2]
}
 8003078:	2000      	movs	r0, #0
 800307a:	bd70      	pop	{r4, r5, r6, pc}

0800307c <HAL_RTC_GetDate>:
{
 800307c:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800307e:	6803      	ldr	r3, [r0, #0]
 8003080:	685c      	ldr	r4, [r3, #4]
 8003082:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8003086:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800308a:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800308c:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003090:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003094:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003098:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800309a:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800309c:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800309e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80030a0:	b952      	cbnz	r2, 80030b8 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030a2:	f7ff ffba 	bl	800301a <RTC_Bcd2ToByte>
 80030a6:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7ff ffb6 	bl	800301a <RTC_Bcd2ToByte>
 80030ae:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff ffb2 	bl	800301a <RTC_Bcd2ToByte>
 80030b6:	7088      	strb	r0, [r1, #2]
}
 80030b8:	2000      	movs	r0, #0
 80030ba:	bd38      	pop	{r3, r4, r5, pc}

080030bc <HAL_RTCEx_SetCalibrationOutPut>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80030bc:	7f03      	ldrb	r3, [r0, #28]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	f04f 0302 	mov.w	r3, #2
 80030c4:	d016      	beq.n	80030f4 <HAL_RTCEx_SetCalibrationOutPut+0x38>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030c6:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	22ca      	movs	r2, #202	; 0xca
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
 80030ce:	2253      	movs	r2, #83	; 0x53
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80030d8:	609a      	str	r2, [r3, #8]
  
  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4311      	orrs	r1, r2
 80030de:	6099      	str	r1, [r3, #8]
  
  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030e6:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e8:	22ff      	movs	r2, #255	; 0xff
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80030ec:	2301      	movs	r3, #1
 80030ee:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 80030f0:	2300      	movs	r3, #0
 80030f2:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 80030f4:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 80030f6:	4770      	bx	lr

080030f8 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80030f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003104:	4770      	bx	lr
	...

08003108 <HAL_SD_ReadBlocks_DMA>:
{
 8003108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800310c:	4616      	mov	r6, r2
 800310e:	b087      	sub	sp, #28
 8003110:	4605      	mov	r5, r0
 8003112:	4698      	mov	r8, r3
  if(NULL == pData)
 8003114:	460a      	mov	r2, r1
 8003116:	b939      	cbnz	r1, 8003128 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003118:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800311a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800311e:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	b007      	add	sp, #28
 8003124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8003128:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800312c:	b2c4      	uxtb	r4, r0
 800312e:	2c01      	cmp	r4, #1
 8003130:	d168      	bne.n	8003204 <HAL_SD_ReadBlocks_DMA+0xfc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003132:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8003134:	eb06 0008 	add.w	r0, r6, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003138:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800313a:	42b8      	cmp	r0, r7
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800313e:	d903      	bls.n	8003148 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003140:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003146:	e7ea      	b.n	800311e <HAL_SD_ReadBlocks_DMA+0x16>
    hsd->Instance->DCTRL = 0U;
 8003148:	682f      	ldr	r7, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800314a:	2103      	movs	r1, #3
 800314c:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003152:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003154:	492c      	ldr	r1, [pc, #176]	; (8003208 <HAL_SD_ReadBlocks_DMA+0x100>)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003156:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 800315a:	63f8      	str	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800315c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800315e:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003162:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003164:	4929      	ldr	r1, [pc, #164]	; (800320c <HAL_SD_ReadBlocks_DMA+0x104>)
 8003166:	64c1      	str	r1, [r0, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8003168:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800316a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800316e:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8003172:	f7fd ff5d 	bl	8001030 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_SD_ReadBlocks_DMA+0x108>)
    SDIO_ConfigData(hsd->Instance, &config);
 8003178:	6828      	ldr	r0, [r5, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 800317a:	601c      	str	r4, [r3, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800317c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800317e:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003184:	e88d 0208 	stmia.w	sp, {r3, r9}
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003188:	f04f 0390 	mov.w	r3, #144	; 0x90
 800318c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800318e:	f04f 0302 	mov.w	r3, #2
 8003192:	9303      	str	r3, [sp, #12]
    SDIO_ConfigData(hsd->Instance, &config);
 8003194:	4669      	mov	r1, sp
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003196:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDIO_DPSM_ENABLE;
 800319a:	f04f 0401 	mov.w	r4, #1
      BlockAdd *= 512U;
 800319e:	bf18      	it	ne
 80031a0:	0276      	lslne	r6, r6, #9
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031a2:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031a4:	9405      	str	r4, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80031a6:	f000 fd55 	bl	8003c54 <SDIO_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ae:	6828      	ldr	r0, [r5, #0]
 80031b0:	f000 fd63 	bl	8003c7a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031b4:	b148      	cbz	r0, 80031ca <HAL_SD_ReadBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80031c0:	4318      	orrs	r0, r3
 80031c2:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031c4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80031c8:	e7aa      	b.n	8003120 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 80031ca:	f1b8 0f01 	cmp.w	r8, #1
 80031ce:	d912      	bls.n	80031f6 <HAL_SD_ReadBlocks_DMA+0xee>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80031d0:	2382      	movs	r3, #130	; 0x82
 80031d2:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80031d4:	4631      	mov	r1, r6
 80031d6:	6828      	ldr	r0, [r5, #0]
 80031d8:	f000 fd7f 	bl	8003cda <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031dc:	2800      	cmp	r0, #0
 80031de:	d0a0      	beq.n	8003122 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80031ea:	4318      	orrs	r0, r3
 80031ec:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031ee:	2001      	movs	r0, #1
 80031f0:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 80031f4:	e795      	b.n	8003122 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80031f6:	2381      	movs	r3, #129	; 0x81
 80031f8:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80031fa:	4631      	mov	r1, r6
 80031fc:	6828      	ldr	r0, [r5, #0]
 80031fe:	f000 fd54 	bl	8003caa <SDMMC_CmdReadSingleBlock>
 8003202:	e7eb      	b.n	80031dc <HAL_SD_ReadBlocks_DMA+0xd4>
    return HAL_BUSY;
 8003204:	2002      	movs	r0, #2
 8003206:	e78c      	b.n	8003122 <HAL_SD_ReadBlocks_DMA+0x1a>
 8003208:	08003317 	.word	0x08003317
 800320c:	0800376d 	.word	0x0800376d
 8003210:	4225858c 	.word	0x4225858c

08003214 <HAL_SD_WriteBlocks_DMA>:
{
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	b086      	sub	sp, #24
 800321c:	4615      	mov	r5, r2
 800321e:	461e      	mov	r6, r3
  if(NULL == pData)
 8003220:	460f      	mov	r7, r1
 8003222:	b939      	cbnz	r1, 8003234 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003224:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800322a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800322c:	2001      	movs	r0, #1
}
 800322e:	b006      	add	sp, #24
 8003230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8003234:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003238:	b2c0      	uxtb	r0, r0
 800323a:	2801      	cmp	r0, #1
 800323c:	d162      	bne.n	8003304 <HAL_SD_WriteBlocks_DMA+0xf0>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800323e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003240:	18eb      	adds	r3, r5, r3
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003242:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003244:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003246:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003248:	d904      	bls.n	8003254 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800324a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800324c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003250:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003252:	e7ec      	b.n	800322e <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8003254:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003256:	492c      	ldr	r1, [pc, #176]	; (8003308 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->State = HAL_SD_STATE_BUSY;
 8003258:	2303      	movs	r3, #3
 800325a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800325e:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 8003260:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003262:	f043 031a 	orr.w	r3, r3, #26
 8003266:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800326a:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800326c:	4927      	ldr	r1, [pc, #156]	; (800330c <HAL_SD_WriteBlocks_DMA+0xf8>)
 800326e:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8003270:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003272:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003274:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003278:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 800327a:	bf18      	it	ne
 800327c:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800327e:	f000 fcfc 	bl	8003c7a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003282:	b150      	cbz	r0, 800329a <HAL_SD_WriteBlocks_DMA+0x86>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800328c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800328e:	4318      	orrs	r0, r3
 8003290:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003292:	2001      	movs	r0, #1
 8003294:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003298:	e7c9      	b.n	800322e <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 800329a:	2e01      	cmp	r6, #1
 800329c:	d90f      	bls.n	80032be <HAL_SD_WriteBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800329e:	23a0      	movs	r3, #160	; 0xa0
 80032a0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80032a2:	4629      	mov	r1, r5
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	f000 fd48 	bl	8003d3a <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80032aa:	4605      	mov	r5, r0
 80032ac:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ae:	b168      	cbz	r0, 80032cc <HAL_SD_WriteBlocks_DMA+0xb8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80032b0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80032b4:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032b8:	4305      	orrs	r5, r0
 80032ba:	63a5      	str	r5, [r4, #56]	; 0x38
 80032bc:	e7e9      	b.n	8003292 <HAL_SD_WriteBlocks_DMA+0x7e>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80032be:	2390      	movs	r3, #144	; 0x90
 80032c0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80032c2:	4629      	mov	r1, r5
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	f000 fd20 	bl	8003d0a <SDMMC_CmdWriteSingleBlock>
 80032ca:	e7ee      	b.n	80032aa <HAL_SD_WriteBlocks_DMA+0x96>
    __HAL_SD_DMA_ENABLE(hsd);
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_SD_WriteBlocks_DMA+0xfc>)
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80032ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 80032d0:	f04f 0801 	mov.w	r8, #1
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80032d4:	0276      	lsls	r6, r6, #9
    __HAL_SD_DMA_ENABLE(hsd);
 80032d6:	f8c3 8000 	str.w	r8, [r3]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80032da:	3280      	adds	r2, #128	; 0x80
 80032dc:	08b3      	lsrs	r3, r6, #2
 80032de:	4639      	mov	r1, r7
 80032e0:	f7fd fea6 	bl	8001030 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032e8:	e88d 0048 	stmia.w	sp, {r3, r6}
    SDIO_ConfigData(hsd->Instance, &config);
 80032ec:	4669      	mov	r1, sp
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032ee:	2390      	movs	r3, #144	; 0x90
    SDIO_ConfigData(hsd->Instance, &config);
 80032f0:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032f2:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032f4:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032f6:	9504      	str	r5, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032f8:	f8cd 8014 	str.w	r8, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80032fc:	f000 fcaa 	bl	8003c54 <SDIO_ConfigData>
    return HAL_OK;
 8003300:	4628      	mov	r0, r5
 8003302:	e794      	b.n	800322e <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8003304:	2002      	movs	r0, #2
 8003306:	e792      	b.n	800322e <HAL_SD_WriteBlocks_DMA+0x1a>
 8003308:	080030f9 	.word	0x080030f9
 800330c:	0800376d 	.word	0x0800376d
 8003310:	4225858c 	.word	0x4225858c

08003314 <HAL_SD_ErrorCallback>:
 8003314:	4770      	bx	lr

08003316 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8003316:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003318:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800331a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800331c:	2b82      	cmp	r3, #130	; 0x82
 800331e:	d109      	bne.n	8003334 <SD_DMAReceiveCplt+0x1e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	f000 fd23 	bl	8003d6c <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003326:	b128      	cbz	r0, 8003334 <SD_DMAReceiveCplt+0x1e>
    {
      hsd->ErrorCode |= errorstate;
 8003328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800332a:	4318      	orrs	r0, r3
 800332c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 800332e:	4620      	mov	r0, r4
 8003330:	f7ff fff0 	bl	8003314 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800333e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8003344:	2301      	movs	r3, #1
 8003346:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  HAL_SD_RxCpltCallback(hsd);
 800334a:	4620      	mov	r0, r4
 800334c:	f004 f9ae 	bl	80076ac <HAL_SD_RxCpltCallback>
 8003350:	bd10      	pop	{r4, pc}

08003352 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003352:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8003354:	0f9a      	lsrs	r2, r3, #30
 8003356:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8003358:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800335c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800335e:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8003362:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8003364:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003368:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800336a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800336e:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8003370:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003372:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8003374:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003376:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800337c:	88ca      	ldrh	r2, [r1, #6]
{
 800337e:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8003380:	b292      	uxth	r2, r2
 8003382:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8003386:	4322      	orrs	r2, r4
 8003388:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800338a:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800338e:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8003390:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003394:	09d4      	lsrs	r4, r2, #7
 8003396:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003398:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800339c:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800339e:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80033a2:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80033a4:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80033a8:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80033aa:	2400      	movs	r4, #0
 80033ac:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80033ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033b0:	2c00      	cmp	r4, #0
 80033b2:	f040 8083 	bne.w	80034bc <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80033b6:	0292      	lsls	r2, r2, #10
 80033b8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80033bc:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 80033be:	690a      	ldr	r2, [r1, #16]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80033c6:	4313      	orrs	r3, r2
 80033c8:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80033ca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80033cc:	690b      	ldr	r3, [r1, #16]
 80033ce:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80033d2:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80033d4:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80033d8:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80033da:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80033de:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80033e0:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80033e4:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80033e6:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80033ea:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80033ec:	0bd3      	lsrs	r3, r2, #15
 80033ee:	f003 0306 	and.w	r3, r3, #6
 80033f2:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80033f4:	7e0c      	ldrb	r4, [r1, #24]
 80033f6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80033fa:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80033fe:	4322      	orrs	r2, r4
 8003400:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003402:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003404:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003406:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003408:	3402      	adds	r4, #2
 800340a:	40a2      	lsls	r2, r4
 800340c:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800340e:	7a0d      	ldrb	r5, [r1, #8]
 8003410:	2401      	movs	r4, #1
 8003412:	40ac      	lsls	r4, r5
 8003414:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003416:	0a64      	lsrs	r4, r4, #9
 8003418:	4362      	muls	r2, r4
 800341a:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800341c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003420:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003422:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800342c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800342e:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003430:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003432:	7e8a      	ldrb	r2, [r1, #26]
 8003434:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8003438:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800343a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800343e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003440:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003442:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003444:	0fda      	lsrs	r2, r3, #31
 8003446:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8003448:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800344c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800344e:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8003452:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8003454:	0d9a      	lsrs	r2, r3, #22
 8003456:	f002 020c 	and.w	r2, r2, #12
 800345a:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800345c:	7fca      	ldrb	r2, [r1, #31]
 800345e:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8003462:	4302      	orrs	r2, r0
 8003464:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8003466:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800346a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 800346e:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8003470:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 8003474:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8003478:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800347c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003480:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8003484:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003488:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800348c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8003490:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8003494:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003498:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800349c:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80034a0:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80034a4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80034a8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 80034ac:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80034b0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80034ba:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034bc:	2c01      	cmp	r4, #1
 80034be:	d11a      	bne.n	80034f6 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80034c6:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80034c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 80034ca:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80034cc:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 80034ce:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80034d2:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80034d4:	690c      	ldr	r4, [r1, #16]
 80034d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80034da:	4322      	orrs	r2, r4
 80034dc:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80034de:	690a      	ldr	r2, [r1, #16]
 80034e0:	0292      	lsls	r2, r2, #10
 80034e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e6:	6542      	str	r2, [r0, #84]	; 0x54
 80034e8:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80034ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80034f2:	6582      	str	r2, [r0, #88]	; 0x58
 80034f4:	e794      	b.n	8003420 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80034f6:	6803      	ldr	r3, [r0, #0]
 80034f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003506:	2301      	movs	r3, #1
 8003508:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800350c:	4618      	mov	r0, r3
 800350e:	bd30      	pop	{r4, r5, pc}

08003510 <HAL_SD_InitCard>:
{
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003514:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003516:	2376      	movs	r3, #118	; 0x76
 8003518:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800351a:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800351c:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 800351e:	ab0a      	add	r3, sp, #40	; 0x28
{
 8003520:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8003522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003526:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 800352a:	4e6f      	ldr	r6, [pc, #444]	; (80036e8 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800352c:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800352e:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003530:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8003532:	ab07      	add	r3, sp, #28
 8003534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	f000 faba 	bl	8003ab0 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 800353c:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 800353e:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8003540:	6820      	ldr	r0, [r4, #0]
 8003542:	f000 fad1 	bl	8003ae8 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003546:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8003548:	2002      	movs	r0, #2
 800354a:	f7fd fc8f 	bl	8000e6c <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800354e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8003550:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003552:	f000 fc3d 	bl	8003dd0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003556:	4606      	mov	r6, r0
 8003558:	b968      	cbnz	r0, 8003576 <HAL_SD_InitCard+0x66>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f000 fc60 	bl	8003e20 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003560:	b380      	cbz	r0, 80035c4 <HAL_SD_InitCard+0xb4>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003562:	64a6      	str	r6, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003564:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003568:	9b06      	ldr	r3, [sp, #24]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	42ab      	cmp	r3, r5
 800356e:	9206      	str	r2, [sp, #24]
 8003570:	d108      	bne.n	8003584 <HAL_SD_InitCard+0x74>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003572:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8003576:	2001      	movs	r0, #1
 8003578:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800357c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800357e:	430e      	orrs	r6, r1
 8003580:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003582:	e081      	b.n	8003688 <HAL_SD_InitCard+0x178>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003584:	2100      	movs	r1, #0
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f000 fc82 	bl	8003e90 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800358c:	4601      	mov	r1, r0
 800358e:	b110      	cbz	r0, 8003596 <HAL_SD_InitCard+0x86>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003590:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8003594:	e7ef      	b.n	8003576 <HAL_SD_InitCard+0x66>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	f000 fc92 	bl	8003ec0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800359c:	4601      	mov	r1, r0
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1f6      	bne.n	8003590 <HAL_SD_InitCard+0x80>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	f000 fabb 	bl	8003b1e <SDIO_GetResponse>
    while(validvoltage == 0U)
 80035a8:	2800      	cmp	r0, #0
 80035aa:	dadd      	bge.n	8003568 <HAL_SD_InitCard+0x58>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80035ac:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80035ae:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80035b0:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80035b8:	f000 fa9a 	bl	8003af0 <SDIO_GetPowerState>
 80035bc:	bb10      	cbnz	r0, 8003604 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80035be:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80035c2:	e06b      	b.n	800369c <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80035c4:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80035c6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80035ca:	9b06      	ldr	r3, [sp, #24]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	42ab      	cmp	r3, r5
 80035d0:	9206      	str	r2, [sp, #24]
 80035d2:	d0ce      	beq.n	8003572 <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80035d4:	2100      	movs	r1, #0
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f000 fc5a 	bl	8003e90 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035dc:	4606      	mov	r6, r0
 80035de:	2800      	cmp	r0, #0
 80035e0:	d1c9      	bne.n	8003576 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80035e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	f000 fc6a 	bl	8003ec0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035ec:	4606      	mov	r6, r0
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d1c1      	bne.n	8003576 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035f2:	4601      	mov	r1, r0
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	f000 fa92 	bl	8003b1e <SDIO_GetResponse>
    while(validvoltage == 0U)
 80035fa:	0fc3      	lsrs	r3, r0, #31
 80035fc:	d0e5      	beq.n	80035ca <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80035fe:	0042      	lsls	r2, r0, #1
 8003600:	d5d4      	bpl.n	80035ac <HAL_SD_InitCard+0x9c>
 8003602:	e7d4      	b.n	80035ae <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003604:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003606:	2b03      	cmp	r3, #3
 8003608:	d01a      	beq.n	8003640 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	f000 fc71 	bl	8003ef2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003610:	4605      	mov	r5, r0
 8003612:	2800      	cmp	r0, #0
 8003614:	d142      	bne.n	800369c <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003616:	4601      	mov	r1, r0
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f000 fa80 	bl	8003b1e <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800361e:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003620:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	f000 fa7b 	bl	8003b1e <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003628:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800362a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	f000 fa76 	bl	8003b1e <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003632:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003634:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	f000 fa71 	bl	8003b1e <SDIO_GetResponse>
 800363c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003640:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003642:	2b03      	cmp	r3, #3
 8003644:	d122      	bne.n	800368c <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003646:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003648:	2b03      	cmp	r3, #3
 800364a:	d12e      	bne.n	80036aa <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800364c:	2104      	movs	r1, #4
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	f000 fa65 	bl	8003b1e <SDIO_GetResponse>
 8003654:	0d00      	lsrs	r0, r0, #20
 8003656:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003658:	a90d      	add	r1, sp, #52	; 0x34
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff fe79 	bl	8003352 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003660:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	0412      	lsls	r2, r2, #16
 8003666:	2300      	movs	r3, #0
 8003668:	f000 fb9a 	bl	8003da0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800366c:	4605      	mov	r5, r0
 800366e:	b9a8      	cbnz	r0, 800369c <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8003670:	f104 0310 	add.w	r3, r4, #16
 8003674:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003678:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800367c:	1d23      	adds	r3, r4, #4
 800367e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	f000 fa15 	bl	8003ab0 <SDIO_Init>
  return HAL_OK;
 8003686:	4628      	mov	r0, r5
}
 8003688:	b019      	add	sp, #100	; 0x64
 800368a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800368c:	f10d 0116 	add.w	r1, sp, #22
 8003690:	6820      	ldr	r0, [r4, #0]
 8003692:	f000 fc59 	bl	8003f48 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003696:	4605      	mov	r5, r0
 8003698:	2800      	cmp	r0, #0
 800369a:	d0d4      	beq.n	8003646 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 800369c:	2001      	movs	r0, #1
 800369e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80036a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036a4:	431d      	orrs	r5, r3
 80036a6:	63a5      	str	r5, [r4, #56]	; 0x38
 80036a8:	e7ee      	b.n	8003688 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 80036aa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80036ae:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	0409      	lsls	r1, r1, #16
 80036b4:	f000 fc32 	bl	8003f1c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b8:	4605      	mov	r5, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d1ee      	bne.n	800369c <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036be:	4601      	mov	r1, r0
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	f000 fa2c 	bl	8003b1e <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036c6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036c8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	f000 fa27 	bl	8003b1e <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036d0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036d2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	f000 fa22 	bl	8003b1e <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036da:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036dc:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	f000 fa1d 	bl	8003b1e <SDIO_GetResponse>
 80036e4:	6720      	str	r0, [r4, #112]	; 0x70
 80036e6:	e7b1      	b.n	800364c <HAL_SD_InitCard+0x13c>
 80036e8:	422580a0 	.word	0x422580a0

080036ec <HAL_SD_Init>:
{
 80036ec:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80036ee:	4604      	mov	r4, r0
 80036f0:	b1a0      	cbz	r0, 800371c <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 80036f2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80036f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036fa:	b913      	cbnz	r3, 8003702 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 80036fc:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80036fe:	f004 faff 	bl	8007d00 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8003702:	2303      	movs	r3, #3
 8003704:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8003708:	4620      	mov	r0, r4
 800370a:	f7ff ff01 	bl	8003510 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800370e:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8003710:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003712:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003714:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003716:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800371a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800371c:	2001      	movs	r0, #1
}
 800371e:	bd10      	pop	{r4, pc}

08003720 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003720:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003722:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003724:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003726:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003728:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800372a:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800372c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800372e:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003730:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003732:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003734:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003736:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003738:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800373a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800373c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800373e:	61cb      	str	r3, [r1, #28]
}
 8003740:	2000      	movs	r0, #0
 8003742:	4770      	bx	lr

08003744 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003744:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003746:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003748:	0409      	lsls	r1, r1, #16
{
 800374a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800374c:	6800      	ldr	r0, [r0, #0]
 800374e:	f000 fc4f 	bl	8003ff0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8003752:	4601      	mov	r1, r0
 8003754:	b928      	cbnz	r0, 8003762 <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	f000 f9e1 	bl	8003b1e <SDIO_GetResponse>
  return cardstate;
 800375c:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8003760:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003764:	4319      	orrs	r1, r3
 8003766:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8003768:	2000      	movs	r0, #0
 800376a:	e7f7      	b.n	800375c <HAL_SD_GetCardState+0x18>

0800376c <SD_DMAError>:
{
 800376c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800376e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8003770:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	2b01      	cmp	r3, #1
 8003776:	d003      	beq.n	8003780 <SD_DMAError+0x14>
 8003778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	2b01      	cmp	r3, #1
 800377e:	d11b      	bne.n	80037b8 <SD_DMAError+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003786:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003796:	63a3      	str	r3, [r4, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ffd3 	bl	8003744 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800379e:	3805      	subs	r0, #5
 80037a0:	b2c0      	uxtb	r0, r0
 80037a2:	2801      	cmp	r0, #1
 80037a4:	d805      	bhi.n	80037b2 <SD_DMAError+0x46>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	f000 fae0 	bl	8003d6c <SDMMC_CmdStopTransfer>
 80037ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ae:	4318      	orrs	r0, r3
 80037b0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State= HAL_SD_STATE_READY;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_ErrorCallback(hsd);
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff fdab 	bl	8003314 <HAL_SD_ErrorCallback>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <HAL_TIM_Base_MspInit>:
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c2:	6803      	ldr	r3, [r0, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80037d4:	2000      	movs	r0, #0
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_IC_CaptureCallback>:
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_TriggerCallback>:
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	6803      	ldr	r3, [r0, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	0791      	lsls	r1, r2, #30
{
 80037e6:	b510      	push	{r4, lr}
 80037e8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ea:	d50e      	bpl.n	800380a <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	0792      	lsls	r2, r2, #30
 80037f0:	d50b      	bpl.n	800380a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f2:	f06f 0202 	mvn.w	r2, #2
 80037f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fa:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fe:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003800:	d077      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003802:	f7ff ffea 	bl	80037da <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	2300      	movs	r3, #0
 8003808:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	0750      	lsls	r0, r2, #29
 8003810:	d510      	bpl.n	8003834 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	0751      	lsls	r1, r2, #29
 8003816:	d50d      	bpl.n	8003834 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003818:	f06f 0204 	mvn.w	r2, #4
 800381c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003820:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003822:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003826:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003828:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800382a:	d068      	beq.n	80038fe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800382c:	f7ff ffd5 	bl	80037da <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	2300      	movs	r3, #0
 8003832:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	0712      	lsls	r2, r2, #28
 800383a:	d50f      	bpl.n	800385c <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	0710      	lsls	r0, r2, #28
 8003840:	d50c      	bpl.n	800385c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003842:	f06f 0208 	mvn.w	r2, #8
 8003846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003850:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003852:	d05a      	beq.n	800390a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003854:	f7ff ffc1 	bl	80037da <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003858:	2300      	movs	r3, #0
 800385a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	06d2      	lsls	r2, r2, #27
 8003862:	d510      	bpl.n	8003886 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	06d0      	lsls	r0, r2, #27
 8003868:	d50d      	bpl.n	8003886 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800386a:	f06f 0210 	mvn.w	r2, #16
 800386e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003870:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003872:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003874:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003878:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800387c:	d04b      	beq.n	8003916 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	f7ff ffac 	bl	80037da <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	2300      	movs	r3, #0
 8003884:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	07d1      	lsls	r1, r2, #31
 800388c:	d508      	bpl.n	80038a0 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	07d2      	lsls	r2, r2, #31
 8003892:	d505      	bpl.n	80038a0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	4620      	mov	r0, r4
 800389c:	f004 f87c 	bl	8007998 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	0610      	lsls	r0, r2, #24
 80038a6:	d508      	bpl.n	80038ba <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	0611      	lsls	r1, r2, #24
 80038ac:	d505      	bpl.n	80038ba <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 f8b4 	bl	8003a22 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	0652      	lsls	r2, r2, #25
 80038c0:	d508      	bpl.n	80038d4 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	0650      	lsls	r0, r2, #25
 80038c6:	d505      	bpl.n	80038d4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7ff ff85 	bl	80037de <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	0691      	lsls	r1, r2, #26
 80038da:	d522      	bpl.n	8003922 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	0692      	lsls	r2, r2, #26
 80038e0:	d51f      	bpl.n	8003922 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80038e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e8:	611a      	str	r2, [r3, #16]
    }
  }
}
 80038ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80038ee:	f000 b897 	b.w	8003a20 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	f7ff ff71 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff ff70 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
 80038fc:	e783      	b.n	8003806 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	f7ff ff6b 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ff6a 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003908:	e792      	b.n	8003830 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	f7ff ff65 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800390e:	4620      	mov	r0, r4
 8003910:	f7ff ff64 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003914:	e7a0      	b.n	8003858 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	f7ff ff5f 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391a:	4620      	mov	r0, r4
 800391c:	f7ff ff5e 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003920:	e7af      	b.n	8003882 <HAL_TIM_IRQHandler+0xa2>
 8003922:	bd10      	pop	{r4, pc}

08003924 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003924:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8003926:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003928:	4290      	cmp	r0, r2
 800392a:	d012      	beq.n	8003952 <TIM_Base_SetConfig+0x2e>
 800392c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0x2e>
 8003932:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003936:	4290      	cmp	r0, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0x2e>
 800393a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393e:	4290      	cmp	r0, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0x2e>
 8003942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003946:	4290      	cmp	r0, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0x2e>
 800394a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800394e:	4290      	cmp	r0, r2
 8003950:	d11d      	bne.n	800398e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003952:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003958:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800395a:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <TIM_Base_SetConfig+0xbc>)
 800395c:	4290      	cmp	r0, r2
 800395e:	d104      	bne.n	800396a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003960:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	4313      	orrs	r3, r2
 8003968:	e028      	b.n	80039bc <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800396a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800396e:	d0f7      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <TIM_Base_SetConfig+0xc0>)
 8003972:	4290      	cmp	r0, r2
 8003974:	d0f4      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 8003976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800397a:	4290      	cmp	r0, r2
 800397c:	d0f0      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 800397e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003982:	4290      	cmp	r0, r2
 8003984:	d0ec      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 8003986:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800398a:	4290      	cmp	r0, r2
 800398c:	d0e8      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <TIM_Base_SetConfig+0xc4>)
 8003990:	4290      	cmp	r0, r2
 8003992:	d0e5      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 8003994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003998:	4290      	cmp	r0, r2
 800399a:	d0e1      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 800399c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039a0:	4290      	cmp	r0, r2
 80039a2:	d0dd      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 80039a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80039a8:	4290      	cmp	r0, r2
 80039aa:	d0d9      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 80039ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039b0:	4290      	cmp	r0, r2
 80039b2:	d0d5      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
 80039b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039b8:	4290      	cmp	r0, r2
 80039ba:	d0d1      	beq.n	8003960 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 80039bc:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039be:	688b      	ldr	r3, [r1, #8]
 80039c0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80039c2:	680b      	ldr	r3, [r1, #0]
 80039c4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <TIM_Base_SetConfig+0xbc>)
 80039c8:	4298      	cmp	r0, r3
 80039ca:	d006      	beq.n	80039da <TIM_Base_SetConfig+0xb6>
 80039cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d0:	4298      	cmp	r0, r3
 80039d2:	d002      	beq.n	80039da <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	2301      	movs	r3, #1
 80039d6:	6143      	str	r3, [r0, #20]
}
 80039d8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80039da:	690b      	ldr	r3, [r1, #16]
 80039dc:	6303      	str	r3, [r0, #48]	; 0x30
 80039de:	e7f9      	b.n	80039d4 <TIM_Base_SetConfig+0xb0>
 80039e0:	40010000 	.word	0x40010000
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40014000 	.word	0x40014000

080039ec <HAL_TIM_Base_Init>:
{ 
 80039ec:	b510      	push	{r4, lr}
  if(htim == NULL)
 80039ee:	4604      	mov	r4, r0
 80039f0:	b1a0      	cbz	r0, 8003a1c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80039f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80039f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039fa:	b91b      	cbnz	r3, 8003a04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003a00:	f7ff fede 	bl	80037c0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003a04:	2302      	movs	r3, #2
 8003a06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1d21      	adds	r1, r4, #4
 8003a0e:	f7ff ff89 	bl	8003924 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003a18:	2000      	movs	r0, #0
 8003a1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
}
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <HAL_TIMEx_CommutationCallback>:
 8003a20:	4770      	bx	lr

08003a22 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a22:	4770      	bx	lr

08003a24 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <SDMMC_GetCmdResp2+0x48>)
 8003a26:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a30:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a34:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003a36:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003a3a:	d314      	bcc.n	8003a66 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003a3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a3e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003a42:	d0f8      	beq.n	8003a36 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a46:	075b      	lsls	r3, r3, #29
 8003a48:	d503      	bpl.n	8003a52 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a4a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a4c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a54:	f013 0301 	ands.w	r3, r3, #1
 8003a58:	d001      	beq.n	8003a5e <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e7f6      	b.n	8003a4c <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a62:	6382      	str	r2, [r0, #56]	; 0x38
 8003a64:	e7f3      	b.n	8003a4e <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003a66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a6a:	e7f0      	b.n	8003a4e <SDMMC_GetCmdResp2+0x2a>
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <SDMMC_GetCmdResp3+0x3c>)
 8003a72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a80:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003a82:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003a86:	d30e      	bcc.n	8003aa6 <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003a88:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a8a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003a8e:	d0f8      	beq.n	8003a82 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a92:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a96:	bf15      	itete	ne
 8003a98:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a9a:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a9e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003aa0:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003aa6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003aaa:	4770      	bx	lr
 8003aac:	2000000c 	.word	0x2000000c

08003ab0 <SDIO_Init>:
{
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	b510      	push	{r4, lr}
 8003ab4:	ac03      	add	r4, sp, #12
 8003ab6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003aba:	9904      	ldr	r1, [sp, #16]
 8003abc:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003abe:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003ac0:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003ac2:	9905      	ldr	r1, [sp, #20]
 8003ac4:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003ac6:	9906      	ldr	r1, [sp, #24]
 8003ac8:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003aca:	9907      	ldr	r1, [sp, #28]
 8003acc:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003ace:	9908      	ldr	r1, [sp, #32]
}
 8003ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ad4:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8003ad8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ada:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	6043      	str	r3, [r0, #4]
}
 8003ae2:	b004      	add	sp, #16
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	4770      	bx	lr

08003ae8 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	6003      	str	r3, [r0, #0]
}
 8003aec:	2000      	movs	r0, #0
 8003aee:	4770      	bx	lr

08003af0 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003af0:	6800      	ldr	r0, [r0, #0]
}
 8003af2:	f000 0003 	and.w	r0, r0, #3
 8003af6:	4770      	bx	lr

08003af8 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003af8:	680b      	ldr	r3, [r1, #0]
{
 8003afa:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8003afc:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003afe:	688c      	ldr	r4, [r1, #8]
 8003b00:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b02:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b04:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003b06:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003b08:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8003b0a:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b0c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8003b10:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b12:	f022 020f 	bic.w	r2, r2, #15
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60c3      	str	r3, [r0, #12]
}
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	bd10      	pop	{r4, pc}

08003b1e <SDIO_GetResponse>:
{
 8003b1e:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003b20:	3014      	adds	r0, #20
 8003b22:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003b28:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
}  
 8003b2e:	b002      	add	sp, #8
 8003b30:	4770      	bx	lr
	...

08003b34 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <SDMMC_GetCmdResp1+0x118>)
{
 8003b36:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8003b3e:	fbb3 f3f4 	udiv	r3, r3, r4
 8003b42:	435a      	muls	r2, r3
    if (count-- == 0U)
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d04a      	beq.n	8003bde <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003b48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b4a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003b4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b52:	d0f7      	beq.n	8003b44 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b56:	075c      	lsls	r4, r3, #29
 8003b58:	d503      	bpl.n	8003b62 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b5a:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b5c:	6383      	str	r3, [r0, #56]	; 0x38
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b64:	f013 0301 	ands.w	r3, r3, #1
 8003b68:	d001      	beq.n	8003b6e <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7f6      	b.n	8003b5c <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8003b6e:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	4291      	cmp	r1, r2
 8003b74:	d136      	bne.n	8003be4 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003b76:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003b7a:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003b7c:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003b7e:	f7ff ffce 	bl	8003b1e <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003b82:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <SDMMC_GetCmdResp1+0x11c>)
 8003b84:	4003      	ands	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0e9      	beq.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	db2c      	blt.n	8003be8 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003b8e:	0042      	lsls	r2, r0, #1
 8003b90:	d42d      	bmi.n	8003bee <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003b92:	0084      	lsls	r4, r0, #2
 8003b94:	d42d      	bmi.n	8003bf2 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003b96:	00c1      	lsls	r1, r0, #3
 8003b98:	d42d      	bmi.n	8003bf6 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003b9a:	0102      	lsls	r2, r0, #4
 8003b9c:	d42e      	bmi.n	8003bfc <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003b9e:	0144      	lsls	r4, r0, #5
 8003ba0:	d42f      	bmi.n	8003c02 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003ba2:	01c1      	lsls	r1, r0, #7
 8003ba4:	d430      	bmi.n	8003c08 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003ba6:	0202      	lsls	r2, r0, #8
 8003ba8:	d431      	bmi.n	8003c0e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003baa:	0244      	lsls	r4, r0, #9
 8003bac:	d432      	bmi.n	8003c14 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003bae:	0281      	lsls	r1, r0, #10
 8003bb0:	d433      	bmi.n	8003c1a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003bb2:	02c2      	lsls	r2, r0, #11
 8003bb4:	d434      	bmi.n	8003c20 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003bb6:	0344      	lsls	r4, r0, #13
 8003bb8:	d435      	bmi.n	8003c26 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003bba:	0381      	lsls	r1, r0, #14
 8003bbc:	d436      	bmi.n	8003c2c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003bbe:	03c2      	lsls	r2, r0, #15
 8003bc0:	d437      	bmi.n	8003c32 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003bc2:	0404      	lsls	r4, r0, #16
 8003bc4:	d438      	bmi.n	8003c38 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003bc6:	0441      	lsls	r1, r0, #17
 8003bc8:	d439      	bmi.n	8003c3e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003bca:	0482      	lsls	r2, r0, #18
 8003bcc:	d43a      	bmi.n	8003c44 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003bce:	f010 0f08 	tst.w	r0, #8
 8003bd2:	bf14      	ite	ne
 8003bd4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003bd8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003bdc:	e7bf      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003bde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003be2:	e7bc      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e7ba      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bec:	e7b7      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003bee:	2340      	movs	r3, #64	; 0x40
 8003bf0:	e7b5      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	e7b3      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bfa:	e7b0      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c00:	e7ad      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c06:	e7aa      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c0c:	e7a7      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c12:	e7a4      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c18:	e7a1      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c1e:	e79e      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8003c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c24:	e79b      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c2a:	e798      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c30:	e795      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003c32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c36:	e792      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003c38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c3c:	e78f      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003c3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c42:	e78c      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8003c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c48:	e789      	b.n	8003b5e <SDMMC_GetCmdResp1+0x2a>
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c
 8003c50:	fdffe008 	.word	0xfdffe008

08003c54 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c54:	680b      	ldr	r3, [r1, #0]
{
 8003c56:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c58:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8003c5a:	684b      	ldr	r3, [r1, #4]
 8003c5c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c5e:	68cc      	ldr	r4, [r1, #12]
 8003c60:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c64:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003c66:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8003c68:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003c6a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003c6c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c6e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003c72:	4313      	orrs	r3, r2
 8003c74:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8003c76:	2000      	movs	r0, #0
 8003c78:	bd10      	pop	{r4, pc}

08003c7a <SDMMC_CmdBlockLength>:
{
 8003c7a:	b530      	push	{r4, r5, lr}
 8003c7c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c82:	2300      	movs	r3, #0
{
 8003c84:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003c86:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003c88:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c8a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c8c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c92:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003c94:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c96:	f7ff ff2f 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f7ff ff47 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003ca6:	b007      	add	sp, #28
 8003ca8:	bd30      	pop	{r4, r5, pc}

08003caa <SDMMC_CmdReadSingleBlock>:
{
 8003caa:	b530      	push	{r4, r5, lr}
 8003cac:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cb2:	2300      	movs	r3, #0
{
 8003cb4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003cb6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cb8:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cba:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cbc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cc4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cc6:	f7ff ff17 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4621      	mov	r1, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f7ff ff2f 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003cd6:	b007      	add	sp, #28
 8003cd8:	bd30      	pop	{r4, r5, pc}

08003cda <SDMMC_CmdReadMultiBlock>:
{
 8003cda:	b530      	push	{r4, r5, lr}
 8003cdc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ce2:	2300      	movs	r3, #0
{
 8003ce4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ce6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003ce8:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cea:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003cf4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cf6:	f7ff feff 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	f7ff ff17 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003d06:	b007      	add	sp, #28
 8003d08:	bd30      	pop	{r4, r5, pc}

08003d0a <SDMMC_CmdWriteSingleBlock>:
{
 8003d0a:	b530      	push	{r4, r5, lr}
 8003d0c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d0e:	2340      	movs	r3, #64	; 0x40
 8003d10:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d12:	2300      	movs	r3, #0
{
 8003d14:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d16:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d18:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d1a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d1c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d22:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d24:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d26:	f7ff fee7 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f7ff feff 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003d36:	b007      	add	sp, #28
 8003d38:	bd30      	pop	{r4, r5, pc}

08003d3a <SDMMC_CmdWriteMultiBlock>:
{
 8003d3a:	b530      	push	{r4, r5, lr}
 8003d3c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d3e:	2340      	movs	r3, #64	; 0x40
 8003d40:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d42:	2300      	movs	r3, #0
{
 8003d44:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d46:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003d48:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d4a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d4c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d52:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003d54:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d56:	f7ff fecf 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f7ff fee7 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003d66:	b007      	add	sp, #28
 8003d68:	bd30      	pop	{r4, r5, pc}
	...

08003d6c <SDMMC_CmdStopTransfer>:
{
 8003d6c:	b530      	push	{r4, r5, lr}
 8003d6e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003d70:	2300      	movs	r3, #0
{
 8003d72:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003d74:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003d76:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d78:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d7a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d7c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d82:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d84:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003d86:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d88:	f7ff feb6 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003d8c:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <SDMMC_CmdStopTransfer+0x30>)
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f7ff fecf 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003d96:	b007      	add	sp, #28
 8003d98:	bd30      	pop	{r4, r5, pc}
 8003d9a:	bf00      	nop
 8003d9c:	05f5e100 	.word	0x05f5e100

08003da0 <SDMMC_CmdSelDesel>:
{
 8003da0:	b530      	push	{r4, r5, lr}
 8003da2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003da8:	2300      	movs	r3, #0
{
 8003daa:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003dac:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dae:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003db0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003db6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003db8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003dba:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dbc:	f7ff fe9c 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f7ff feb4 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003dcc:	b007      	add	sp, #28
 8003dce:	bd30      	pop	{r4, r5, pc}

08003dd0 <SDMMC_CmdGoIdleState>:
{
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003dd8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003dda:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ddc:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dde:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de4:	9305      	str	r3, [sp, #20]
{
 8003de6:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003de8:	f7ff fe86 	bl	8003af8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <SDMMC_CmdGoIdleState+0x4c>)
 8003dee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dfc:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003dfe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e02:	d308      	bcc.n	8003e16 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003e04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e06:	0612      	lsls	r2, r2, #24
 8003e08:	d5f9      	bpl.n	8003dfe <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003e0a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003e0e:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8003e10:	2000      	movs	r0, #0
}
 8003e12:	b006      	add	sp, #24
 8003e14:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003e16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8003e1a:	e7fa      	b.n	8003e12 <SDMMC_CmdGoIdleState+0x42>
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <SDMMC_CmdOperCond>:
{
 8003e20:	b510      	push	{r4, lr}
 8003e22:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003e24:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003e28:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e32:	2300      	movs	r3, #0
 8003e34:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e36:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3c:	9305      	str	r3, [sp, #20]
{
 8003e3e:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e40:	f7ff fe5a 	bl	8003af8 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <SDMMC_CmdOperCond+0x6c>)
 8003e46:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e50:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e54:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003e56:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e5a:	d314      	bcc.n	8003e86 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003e5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e5e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003e62:	d0f8      	beq.n	8003e56 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e64:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e66:	f012 0204 	ands.w	r2, r2, #4
 8003e6a:	d004      	beq.n	8003e76 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003e6c:	2340      	movs	r3, #64	; 0x40
 8003e6e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e70:	2004      	movs	r0, #4
}
 8003e72:	b006      	add	sp, #24
 8003e74:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003e76:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e78:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003e7c:	d0f9      	beq.n	8003e72 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e82:	4610      	mov	r0, r2
 8003e84:	e7f5      	b.n	8003e72 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8003e86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003e8a:	e7f2      	b.n	8003e72 <SDMMC_CmdOperCond+0x52>
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <SDMMC_CmdAppCommand>:
{
 8003e90:	b530      	push	{r4, r5, lr}
 8003e92:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e94:	2340      	movs	r3, #64	; 0x40
 8003e96:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e98:	2300      	movs	r3, #0
{
 8003e9a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003e9c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003e9e:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ea0:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ea2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003eaa:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eac:	f7ff fe24 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f7ff fe3c 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 8003ebc:	b007      	add	sp, #28
 8003ebe:	bd30      	pop	{r4, r5, pc}

08003ec0 <SDMMC_CmdAppOperCommand>:
{
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003ec4:	2329      	movs	r3, #41	; 0x29
 8003ec6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003ec8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ecc:	2340      	movs	r3, #64	; 0x40
 8003ece:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003ed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ed4:	2300      	movs	r3, #0
{
 8003ed6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003ed8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eda:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003edc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee2:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ee4:	f7ff fe08 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fdc1 	bl	8003a70 <SDMMC_GetCmdResp3>
}
 8003eee:	b006      	add	sp, #24
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <SDMMC_CmdSendCID>:
{
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003ef6:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003ef8:	2202      	movs	r2, #2
{
 8003efa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003efc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003efe:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f00:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f02:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f08:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f0a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f0c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f0e:	f7ff fdf3 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff fd86 	bl	8003a24 <SDMMC_GetCmdResp2>
}
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd10      	pop	{r4, pc}

08003f1c <SDMMC_CmdSendCSD>:
{
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003f20:	2309      	movs	r3, #9
 8003f22:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f24:	23c0      	movs	r3, #192	; 0xc0
 8003f26:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f28:	2300      	movs	r3, #0
{
 8003f2a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003f2c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f2e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f30:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f36:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f38:	f7ff fdde 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff fd71 	bl	8003a24 <SDMMC_GetCmdResp2>
}
 8003f42:	b006      	add	sp, #24
 8003f44:	bd10      	pop	{r4, pc}
	...

08003f48 <SDMMC_CmdSetRelAdd>:
{
 8003f48:	b530      	push	{r4, r5, lr}
 8003f4a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003f4c:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003f4e:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8003f50:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003f52:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f54:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f56:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8003f5c:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f5e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f60:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f62:	9305      	str	r3, [sp, #20]
{
 8003f64:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f66:	f7ff fdc7 	bl	8003af8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <SDMMC_CmdSetRelAdd+0xa4>)
 8003f6c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f7a:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003f7c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003f80:	d32b      	bcc.n	8003fda <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003f82:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f84:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003f88:	d0f8      	beq.n	8003f7c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f8c:	075a      	lsls	r2, r3, #29
 8003f8e:	d503      	bpl.n	8003f98 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f90:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f92:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003f94:	b007      	add	sp, #28
 8003f96:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f9a:	f011 0101 	ands.w	r1, r1, #1
 8003f9e:	d001      	beq.n	8003fa4 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e7f6      	b.n	8003f92 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 8003fa4:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d119      	bne.n	8003fe0 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003fac:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003fb0:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff fdb3 	bl	8003b1e <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003fb8:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8003fbc:	d103      	bne.n	8003fc6 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003fbe:	0c00      	lsrs	r0, r0, #16
 8003fc0:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	e7e6      	b.n	8003f94 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003fc6:	0443      	lsls	r3, r0, #17
 8003fc8:	d40c      	bmi.n	8003fe4 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003fca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003fce:	bf14      	ite	ne
 8003fd0:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003fd4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003fd8:	e7dc      	b.n	8003f94 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8003fda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003fde:	e7d9      	b.n	8003f94 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	e7d7      	b.n	8003f94 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fe4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fe8:	e7d4      	b.n	8003f94 <SDMMC_CmdSetRelAdd+0x4c>
 8003fea:	bf00      	nop
 8003fec:	2000000c 	.word	0x2000000c

08003ff0 <SDMMC_CmdSendStatus>:
{
 8003ff0:	b530      	push	{r4, r5, lr}
 8003ff2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ff4:	2340      	movs	r3, #64	; 0x40
 8003ff6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ff8:	2300      	movs	r3, #0
{
 8003ffa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003ffc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003ffe:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004000:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004002:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004008:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800400a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800400c:	f7ff fd74 	bl	8003af8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4621      	mov	r1, r4
 8004016:	4628      	mov	r0, r5
 8004018:	f7ff fd8c 	bl	8003b34 <SDMMC_GetCmdResp1>
}
 800401c:	b007      	add	sp, #28
 800401e:	bd30      	pop	{r4, r5, pc}

08004020 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <disk_status+0x10>)
 8004022:	181a      	adds	r2, r3, r0
 8004024:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004028:	7a10      	ldrb	r0, [r2, #8]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4718      	bx	r3
 8004030:	20000054 	.word	0x20000054

08004034 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <disk_initialize+0x1c>)
 8004036:	5c1a      	ldrb	r2, [r3, r0]
 8004038:	b942      	cbnz	r2, 800404c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800403a:	2201      	movs	r2, #1
 800403c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800403e:	181a      	adds	r2, r3, r0
 8004040:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004044:	7a10      	ldrb	r0, [r2, #8]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4718      	bx	r3
  }
  return stat;
}
 800404c:	2000      	movs	r0, #0
 800404e:	4770      	bx	lr
 8004050:	20000054 	.word	0x20000054

08004054 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004054:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004056:	4c05      	ldr	r4, [pc, #20]	; (800406c <disk_read+0x18>)
 8004058:	1825      	adds	r5, r4, r0
 800405a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800405e:	6860      	ldr	r0, [r4, #4]
 8004060:	6884      	ldr	r4, [r0, #8]
 8004062:	7a28      	ldrb	r0, [r5, #8]
 8004064:	46a4      	mov	ip, r4
  return res;
}
 8004066:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004068:	4760      	bx	ip
 800406a:	bf00      	nop
 800406c:	20000054 	.word	0x20000054

08004070 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004070:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004072:	4c05      	ldr	r4, [pc, #20]	; (8004088 <disk_write+0x18>)
 8004074:	1825      	adds	r5, r4, r0
 8004076:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800407a:	6860      	ldr	r0, [r4, #4]
 800407c:	68c4      	ldr	r4, [r0, #12]
 800407e:	7a28      	ldrb	r0, [r5, #8]
 8004080:	46a4      	mov	ip, r4
  return res;
}
 8004082:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004084:	4760      	bx	ip
 8004086:	bf00      	nop
 8004088:	20000054 	.word	0x20000054

0800408c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <disk_ioctl+0x18>)
{
 800408e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004090:	181c      	adds	r4, r3, r0
 8004092:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004096:	7a20      	ldrb	r0, [r4, #8]
 8004098:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800409a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4718      	bx	r3
 80040a2:	bf00      	nop
 80040a4:	20000054 	.word	0x20000054

080040a8 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80040a8:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80040aa:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80040ac:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80040ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80040b2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80040b6:	4770      	bx	lr

080040b8 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80040b8:	0a0b      	lsrs	r3, r1, #8
 80040ba:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040bc:	7043      	strb	r3, [r0, #1]
 80040be:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80040c0:	0e09      	lsrs	r1, r1, #24
 80040c2:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80040c4:	70c1      	strb	r1, [r0, #3]
 80040c6:	4770      	bx	lr

080040c8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80040c8:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80040ca:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80040ce:	4290      	cmp	r0, r2
 80040d0:	d1fb      	bne.n	80040ca <mem_set+0x2>
}
 80040d2:	4770      	bx	lr

080040d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <chk_lock+0x58>)
 80040d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80040d8:	2500      	movs	r5, #0
 80040da:	462a      	mov	r2, r5
 80040dc:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80040de:	681e      	ldr	r6, [r3, #0]
 80040e0:	b1a6      	cbz	r6, 800410c <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80040e2:	6807      	ldr	r7, [r0, #0]
 80040e4:	42be      	cmp	r6, r7
 80040e6:	d112      	bne.n	800410e <chk_lock+0x3a>
 80040e8:	685f      	ldr	r7, [r3, #4]
 80040ea:	6886      	ldr	r6, [r0, #8]
 80040ec:	42b7      	cmp	r7, r6
 80040ee:	d10e      	bne.n	800410e <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80040f0:	689f      	ldr	r7, [r3, #8]
 80040f2:	6946      	ldr	r6, [r0, #20]
 80040f4:	42b7      	cmp	r7, r6
 80040f6:	d10a      	bne.n	800410e <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80040f8:	b9b1      	cbnz	r1, 8004128 <chk_lock+0x54>
 80040fa:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80040fe:	8993      	ldrh	r3, [r2, #12]
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	bf14      	ite	ne
 8004106:	2000      	movne	r0, #0
 8004108:	2010      	moveq	r0, #16
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 800410c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800410e:	3201      	adds	r2, #1
 8004110:	2a02      	cmp	r2, #2
 8004112:	f103 0310 	add.w	r3, r3, #16
 8004116:	d1e2      	bne.n	80040de <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004118:	b10d      	cbz	r5, 800411e <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800411a:	2000      	movs	r0, #0
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800411e:	2902      	cmp	r1, #2
 8004120:	bf0c      	ite	eq
 8004122:	2000      	moveq	r0, #0
 8004124:	2012      	movne	r0, #18
 8004126:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004128:	2010      	movs	r0, #16
 800412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412c:	20000030 	.word	0x20000030

08004130 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <inc_lock+0x74>)
 8004132:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004134:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004136:	2300      	movs	r3, #0
 8004138:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800413a:	6814      	ldr	r4, [r2, #0]
 800413c:	42ac      	cmp	r4, r5
 800413e:	d107      	bne.n	8004150 <inc_lock+0x20>
 8004140:	6857      	ldr	r7, [r2, #4]
 8004142:	6884      	ldr	r4, [r0, #8]
 8004144:	42a7      	cmp	r7, r4
 8004146:	d103      	bne.n	8004150 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8004148:	6897      	ldr	r7, [r2, #8]
 800414a:	6944      	ldr	r4, [r0, #20]
 800414c:	42a7      	cmp	r7, r4
 800414e:	d01d      	beq.n	800418c <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004150:	3301      	adds	r3, #1
 8004152:	2b02      	cmp	r3, #2
 8004154:	f102 0210 	add.w	r2, r2, #16
 8004158:	d1ef      	bne.n	800413a <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800415a:	6833      	ldr	r3, [r6, #0]
 800415c:	b113      	cbz	r3, 8004164 <inc_lock+0x34>
 800415e:	6933      	ldr	r3, [r6, #16]
 8004160:	b9eb      	cbnz	r3, 800419e <inc_lock+0x6e>
 8004162:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8004164:	011c      	lsls	r4, r3, #4
 8004166:	1932      	adds	r2, r6, r4
 8004168:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800416a:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 800416c:	6940      	ldr	r0, [r0, #20]
 800416e:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8004170:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8004172:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8004174:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004176:	b979      	cbnz	r1, 8004198 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004178:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 800417c:	8992      	ldrh	r2, [r2, #12]
 800417e:	3201      	adds	r2, #1
 8004180:	b292      	uxth	r2, r2
 8004182:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8004186:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004188:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800418c:	2900      	cmp	r1, #0
 800418e:	d0f3      	beq.n	8004178 <inc_lock+0x48>
 8004190:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8004194:	8992      	ldrh	r2, [r2, #12]
 8004196:	b912      	cbnz	r2, 800419e <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419c:	e7f1      	b.n	8004182 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800419e:	2000      	movs	r0, #0
 80041a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000030 	.word	0x20000030

080041a8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80041a8:	3801      	subs	r0, #1
 80041aa:	2801      	cmp	r0, #1
 80041ac:	d80e      	bhi.n	80041cc <dec_lock+0x24>
		n = Files[i].ctr;
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <dec_lock+0x2c>)
 80041b0:	0103      	lsls	r3, r0, #4
 80041b2:	18d1      	adds	r1, r2, r3
 80041b4:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80041b6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80041ba:	b280      	uxth	r0, r0
 80041bc:	b108      	cbz	r0, 80041c2 <dec_lock+0x1a>
 80041be:	1e48      	subs	r0, r1, #1
 80041c0:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80041c2:	18d1      	adds	r1, r2, r3
 80041c4:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80041c6:	b918      	cbnz	r0, 80041d0 <dec_lock+0x28>
 80041c8:	50d0      	str	r0, [r2, r3]
 80041ca:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80041cc:	2002      	movs	r0, #2
 80041ce:	4770      	bx	lr
		res = FR_OK;
 80041d0:	2000      	movs	r0, #0
	}
	return res;
}
 80041d2:	4770      	bx	lr
 80041d4:	20000030 	.word	0x20000030

080041d8 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041d8:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 80041da:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041dc:	3b02      	subs	r3, #2
 80041de:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80041e0:	bf3d      	ittte	cc
 80041e2:	8943      	ldrhcc	r3, [r0, #10]
 80041e4:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 80041e6:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041ea:	2000      	movcs	r0, #0
}
 80041ec:	4770      	bx	lr

080041ee <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80041f0:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041f2:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80041f4:	0a49      	lsrs	r1, r1, #9
 80041f6:	8952      	ldrh	r2, [r2, #10]
 80041f8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041fc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80041fe:	b130      	cbz	r0, 800420e <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8004200:	4281      	cmp	r1, r0
 8004202:	d302      	bcc.n	800420a <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004204:	1a09      	subs	r1, r1, r0
 8004206:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004208:	e7f8      	b.n	80041fc <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800420a:	6858      	ldr	r0, [r3, #4]
 800420c:	4408      	add	r0, r1
}
 800420e:	4770      	bx	lr

08004210 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004210:	6802      	ldr	r2, [r0, #0]
{
 8004212:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004214:	b152      	cbz	r2, 800422c <get_ldnumber+0x1c>
 8004216:	4611      	mov	r1, r2
 8004218:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800421a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800421e:	2c20      	cmp	r4, #32
 8004220:	d90c      	bls.n	800423c <get_ldnumber+0x2c>
 8004222:	2c3a      	cmp	r4, #58	; 0x3a
 8004224:	d1f8      	bne.n	8004218 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8004226:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004228:	428b      	cmp	r3, r1
 800422a:	d002      	beq.n	8004232 <get_ldnumber+0x22>
	int vol = -1;
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8004230:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004232:	7812      	ldrb	r2, [r2, #0]
 8004234:	2a30      	cmp	r2, #48	; 0x30
 8004236:	d1f9      	bne.n	800422c <get_ldnumber+0x1c>
					*path = ++tt;
 8004238:	3301      	adds	r3, #1
 800423a:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 800423c:	2000      	movs	r0, #0
 800423e:	bd10      	pop	{r4, pc}

08004240 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004240:	3801      	subs	r0, #1
 8004242:	440a      	add	r2, r1
			*d++ = *s++;
 8004244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004248:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800424c:	4291      	cmp	r1, r2
 800424e:	d1f9      	bne.n	8004244 <mem_cpy.part.0+0x4>
}
 8004250:	4770      	bx	lr

08004252 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8004252:	7eca      	ldrb	r2, [r1, #27]
 8004254:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8004256:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004258:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800425c:	bf01      	itttt	eq
 800425e:	7d48      	ldrbeq	r0, [r1, #21]
 8004260:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004262:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8004266:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800426a:	4618      	mov	r0, r3
 800426c:	4770      	bx	lr

0800426e <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800426e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004272:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8004274:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004276:	7803      	ldrb	r3, [r0, #0]
 8004278:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800427a:	bf01      	itttt	eq
 800427c:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800427e:	750a      	strbeq	r2, [r1, #20]
 8004280:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004282:	754a      	strbeq	r2, [r1, #21]
 8004284:	4770      	bx	lr

08004286 <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004288:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800428a:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800428e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004290:	2301      	movs	r3, #1
 8004292:	462a      	mov	r2, r5
 8004294:	4639      	mov	r1, r7
 8004296:	7840      	ldrb	r0, [r0, #1]
 8004298:	f7ff feea 	bl	8004070 <disk_write>
 800429c:	b9a0      	cbnz	r0, 80042c8 <sync_window.part.5+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800429e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a0:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 80042a2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80042a4:	1aeb      	subs	r3, r5, r3
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d301      	bcc.n	80042ae <sync_window.part.5+0x28>
	FRESULT res = FR_OK;
 80042aa:	2000      	movs	r0, #0
 80042ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042ae:	78a6      	ldrb	r6, [r4, #2]
 80042b0:	2e01      	cmp	r6, #1
 80042b2:	d9fa      	bls.n	80042aa <sync_window.part.5+0x24>
					wsect += fs->fsize;
 80042b4:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80042b6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80042b8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80042ba:	462a      	mov	r2, r5
 80042bc:	2301      	movs	r3, #1
 80042be:	4639      	mov	r1, r7
 80042c0:	f7ff fed6 	bl	8004070 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042c4:	3e01      	subs	r6, #1
 80042c6:	e7f3      	b.n	80042b0 <sync_window.part.5+0x2a>
			res = FR_DISK_ERR;
 80042c8:	2001      	movs	r0, #1
}
 80042ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042cc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80042cc:	78c3      	ldrb	r3, [r0, #3]
 80042ce:	b10b      	cbz	r3, 80042d4 <sync_window+0x8>
 80042d0:	f7ff bfd9 	b.w	8004286 <sync_window.part.5>
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	4770      	bx	lr

080042d8 <sync_fs>:
{
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	4604      	mov	r4, r0
	res = sync_window(fs);
 80042dc:	f7ff fff6 	bl	80042cc <sync_window>
 80042e0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d142      	bne.n	800436c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80042e6:	7823      	ldrb	r3, [r4, #0]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d137      	bne.n	800435c <sync_fs+0x84>
 80042ec:	7927      	ldrb	r7, [r4, #4]
 80042ee:	2f01      	cmp	r7, #1
 80042f0:	d134      	bne.n	800435c <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80042f2:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80042f6:	4601      	mov	r1, r0
 80042f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042fc:	4630      	mov	r0, r6
 80042fe:	f7ff fee3 	bl	80040c8 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004302:	2355      	movs	r3, #85	; 0x55
 8004304:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8004308:	23aa      	movs	r3, #170	; 0xaa
 800430a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800430e:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8004310:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004312:	2172      	movs	r1, #114	; 0x72
 8004314:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8004318:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800431c:	2361      	movs	r3, #97	; 0x61
 800431e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8004322:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8004326:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 800432a:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800432e:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8004332:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004336:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800433a:	6961      	ldr	r1, [r4, #20]
 800433c:	f7ff febc 	bl	80040b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004340:	6921      	ldr	r1, [r4, #16]
 8004342:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004346:	f7ff feb7 	bl	80040b8 <st_dword>
			fs->winsect = fs->volbase + 1;
 800434a:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800434c:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800434e:	3201      	adds	r2, #1
 8004350:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004352:	463b      	mov	r3, r7
 8004354:	4631      	mov	r1, r6
 8004356:	f7ff fe8b 	bl	8004070 <disk_write>
			fs->fsi_flag = 0;
 800435a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800435c:	2200      	movs	r2, #0
 800435e:	4611      	mov	r1, r2
 8004360:	7860      	ldrb	r0, [r4, #1]
 8004362:	f7ff fe93 	bl	800408c <disk_ioctl>
 8004366:	3000      	adds	r0, #0
 8004368:	bf18      	it	ne
 800436a:	2001      	movne	r0, #1
}
 800436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800436e <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800436e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004370:	428b      	cmp	r3, r1
{
 8004372:	b570      	push	{r4, r5, r6, lr}
 8004374:	4606      	mov	r6, r0
 8004376:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004378:	d012      	beq.n	80043a0 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800437a:	f7ff ffa7 	bl	80042cc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800437e:	4604      	mov	r4, r0
 8004380:	b960      	cbnz	r0, 800439c <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004382:	462a      	mov	r2, r5
 8004384:	2301      	movs	r3, #1
 8004386:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800438a:	7870      	ldrb	r0, [r6, #1]
 800438c:	f7ff fe62 	bl	8004054 <disk_read>
 8004390:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8004392:	bf1c      	itt	ne
 8004394:	f04f 35ff 	movne.w	r5, #4294967295
 8004398:	2401      	movne	r4, #1
			fs->winsect = sector;
 800439a:	6335      	str	r5, [r6, #48]	; 0x30
}
 800439c:	4620      	mov	r0, r4
 800439e:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80043a0:	2400      	movs	r4, #0
 80043a2:	e7fb      	b.n	800439c <move_window+0x2e>

080043a4 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80043a4:	2300      	movs	r3, #0
{
 80043a6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80043a8:	70c3      	strb	r3, [r0, #3]
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	6303      	str	r3, [r0, #48]	; 0x30
{
 80043b0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80043b2:	f7ff ffdc 	bl	800436e <move_window>
 80043b6:	bb30      	cbnz	r0, 8004406 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80043b8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 80043bc:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 80043c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80043c4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d11e      	bne.n	800440a <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80043cc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80043d0:	2be9      	cmp	r3, #233	; 0xe9
 80043d2:	d005      	beq.n	80043e0 <check_fs+0x3c>
 80043d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <check_fs+0x74>)
 80043d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80043dc:	4293      	cmp	r3, r2
 80043de:	d116      	bne.n	800440e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80043e0:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 80043e4:	f7ff fe60 	bl	80040a8 <ld_dword>
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <check_fs+0x78>)
 80043ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80043ee:	4298      	cmp	r0, r3
 80043f0:	d00f      	beq.n	8004412 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80043f2:	f104 0086 	add.w	r0, r4, #134	; 0x86
 80043f6:	f7ff fe57 	bl	80040a8 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <check_fs+0x7c>)
 80043fc:	4298      	cmp	r0, r3
 80043fe:	bf14      	ite	ne
 8004400:	2002      	movne	r0, #2
 8004402:	2000      	moveq	r0, #0
 8004404:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004406:	2004      	movs	r0, #4
 8004408:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800440a:	2003      	movs	r0, #3
 800440c:	bd10      	pop	{r4, pc}
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800440e:	2002      	movs	r0, #2
 8004410:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004412:	2000      	movs	r0, #0
}
 8004414:	bd10      	pop	{r4, pc}
 8004416:	bf00      	nop
 8004418:	009000eb 	.word	0x009000eb
 800441c:	00544146 	.word	0x00544146
 8004420:	33544146 	.word	0x33544146

08004424 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004428:	2300      	movs	r3, #0
{
 800442a:	b085      	sub	sp, #20
	*rfs = 0;
 800442c:	600b      	str	r3, [r1, #0]
{
 800442e:	460f      	mov	r7, r1
 8004430:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8004432:	f7ff feed 	bl	8004210 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004436:	1e06      	subs	r6, r0, #0
 8004438:	db3c      	blt.n	80044b4 <find_volume+0x90>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800443a:	4ba3      	ldr	r3, [pc, #652]	; (80046c8 <find_volume+0x2a4>)
 800443c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004440:	2c00      	cmp	r4, #0
 8004442:	d039      	beq.n	80044b8 <find_volume+0x94>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004444:	68e0      	ldr	r0, [r4, #12]
 8004446:	f001 f9b2 	bl	80057ae <ff_req_grant>
 800444a:	2800      	cmp	r0, #0
 800444c:	d13a      	bne.n	80044c4 <find_volume+0xa0>

	ENTER_FF(fs);						/* Lock the volume */
 800444e:	200f      	movs	r0, #15
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8004450:	b005      	add	sp, #20
 8004452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		stat = disk_status(fs->drv);
 8004456:	7860      	ldrb	r0, [r4, #1]
 8004458:	f7ff fde2 	bl	8004020 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800445c:	07c1      	lsls	r1, r0, #31
 800445e:	d437      	bmi.n	80044d0 <find_volume+0xac>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004460:	b365      	cbz	r5, 80044bc <find_volume+0x98>
 8004462:	f010 0004 	ands.w	r0, r0, #4
 8004466:	d0f3      	beq.n	8004450 <find_volume+0x2c>
				return FR_WRITE_PROTECTED;
 8004468:	200a      	movs	r0, #10
 800446a:	e7f1      	b.n	8004450 <find_volume+0x2c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800446c:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800446e:	3501      	adds	r5, #1
 8004470:	2d04      	cmp	r5, #4
 8004472:	d14f      	bne.n	8004514 <find_volume+0xf0>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004474:	2804      	cmp	r0, #4
 8004476:	d105      	bne.n	8004484 <find_volume+0x60>
 8004478:	2001      	movs	r0, #1
 800447a:	e7e9      	b.n	8004450 <find_volume+0x2c>
 800447c:	2804      	cmp	r0, #4
 800447e:	d0fb      	beq.n	8004478 <find_volume+0x54>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004480:	2801      	cmp	r0, #1
 8004482:	d901      	bls.n	8004488 <find_volume+0x64>
 8004484:	200d      	movs	r0, #13
 8004486:	e7e3      	b.n	8004450 <find_volume+0x2c>
	bsect = 0;
 8004488:	2600      	movs	r6, #0
 800448a:	e04d      	b.n	8004528 <find_volume+0x104>
		fmt = FS_FAT32;
 800448c:	2703      	movs	r7, #3
 800448e:	e0aa      	b.n	80045e6 <find_volume+0x1c2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004490:	f1b9 0f00 	cmp.w	r9, #0
 8004494:	d0f6      	beq.n	8004484 <find_volume+0x60>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004496:	2f02      	cmp	r7, #2
 8004498:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800449c:	bf18      	it	ne
 800449e:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80044a0:	4443      	add	r3, r8
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80044a2:	bf18      	it	ne
 80044a4:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80044a8:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80044aa:	bf0c      	ite	eq
 80044ac:	4601      	moveq	r1, r0
 80044ae:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 80044b2:	e0b4      	b.n	800461e <find_volume+0x1fa>
	if (vol < 0) return FR_INVALID_DRIVE;
 80044b4:	200b      	movs	r0, #11
 80044b6:	e7cb      	b.n	8004450 <find_volume+0x2c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80044b8:	200c      	movs	r0, #12
 80044ba:	e7c9      	b.n	8004450 <find_volume+0x2c>
			return FR_OK;				/* The file system object is valid */
 80044bc:	4628      	mov	r0, r5
 80044be:	e7c7      	b.n	8004450 <find_volume+0x2c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80044c0:	2003      	movs	r0, #3
 80044c2:	e7c5      	b.n	8004450 <find_volume+0x2c>
	*rfs = fs;							/* Return pointer to the file system object */
 80044c4:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80044c6:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80044c8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1c2      	bne.n	8004456 <find_volume+0x32>
	fs->fs_type = 0;					/* Clear the file system object */
 80044d0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80044d2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80044d4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80044d6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80044d8:	f7ff fdac 	bl	8004034 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80044dc:	07c2      	lsls	r2, r0, #31
 80044de:	d4ef      	bmi.n	80044c0 <find_volume+0x9c>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80044e0:	b10d      	cbz	r5, 80044e6 <find_volume+0xc2>
 80044e2:	0743      	lsls	r3, r0, #29
 80044e4:	d4c0      	bmi.n	8004468 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80044e6:	2100      	movs	r1, #0
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7ff ff5b 	bl	80043a4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80044ee:	2802      	cmp	r0, #2
 80044f0:	d1c4      	bne.n	800447c <find_volume+0x58>
 80044f2:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 80044f6:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80044f8:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80044fc:	b110      	cbz	r0, 8004504 <find_volume+0xe0>
 80044fe:	4628      	mov	r0, r5
 8004500:	f7ff fdd2 	bl	80040a8 <ld_dword>
 8004504:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004508:	3101      	adds	r1, #1
 800450a:	2904      	cmp	r1, #4
 800450c:	f105 0510 	add.w	r5, r5, #16
 8004510:	d1f2      	bne.n	80044f8 <find_volume+0xd4>
 8004512:	2500      	movs	r5, #0
			bsect = br[i];
 8004514:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004518:	2e00      	cmp	r6, #0
 800451a:	d0a7      	beq.n	800446c <find_volume+0x48>
 800451c:	4631      	mov	r1, r6
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff ff40 	bl	80043a4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004524:	2801      	cmp	r0, #1
 8004526:	d8a2      	bhi.n	800446e <find_volume+0x4a>
	rv = rv << 8 | ptr[0];
 8004528:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800452c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004538:	d1a4      	bne.n	8004484 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 800453a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800453e:	f894 504a 	ldrb.w	r5, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004542:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8004546:	d104      	bne.n	8004552 <find_volume+0x12e>
 8004548:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800454c:	f7ff fdac 	bl	80040a8 <ld_dword>
 8004550:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004552:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8004556:	61e5      	str	r5, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004558:	f108 33ff 	add.w	r3, r8, #4294967295
 800455c:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800455e:	f884 8002 	strb.w	r8, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004562:	d88f      	bhi.n	8004484 <find_volume+0x60>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004564:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 8004568:	b2bb      	uxth	r3, r7
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800456a:	fb05 f808 	mul.w	r8, r5, r8
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800456e:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004570:	2b00      	cmp	r3, #0
 8004572:	d087      	beq.n	8004484 <find_volume+0x60>
 8004574:	1e7b      	subs	r3, r7, #1
 8004576:	423b      	tst	r3, r7
 8004578:	d184      	bne.n	8004484 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 800457a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800457e:	f894 9045 	ldrb.w	r9, [r4, #69]	; 0x45
 8004582:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004586:	f019 0f0f 	tst.w	r9, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800458a:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800458e:	f47f af79 	bne.w	8004484 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 8004592:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8004596:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800459a:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800459e:	d103      	bne.n	80045a8 <find_volume+0x184>
 80045a0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80045a4:	f7ff fd80 	bl	80040a8 <ld_dword>
	rv = rv << 8 | ptr[0];
 80045a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045ac:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80045b0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80045b4:	f43f af66 	beq.w	8004484 <find_volume+0x60>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80045b8:	eb03 1219 	add.w	r2, r3, r9, lsr #4
 80045bc:	4442      	add	r2, r8
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80045be:	4290      	cmp	r0, r2
 80045c0:	f4ff af60 	bcc.w	8004484 <find_volume+0x60>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80045c4:	1a81      	subs	r1, r0, r2
 80045c6:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80045ca:	2900      	cmp	r1, #0
 80045cc:	f43f af5a 	beq.w	8004484 <find_volume+0x60>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80045d0:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80045d4:	4281      	cmp	r1, r0
 80045d6:	f63f af59 	bhi.w	800448c <find_volume+0x68>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80045da:	f640 77f5 	movw	r7, #4085	; 0xff5
 80045de:	42b9      	cmp	r1, r7
 80045e0:	bf8c      	ite	hi
 80045e2:	2702      	movhi	r7, #2
 80045e4:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80045e6:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80045e8:	4433      	add	r3, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80045ea:	4432      	add	r2, r6
		if (fmt == FS_FAT32) {
 80045ec:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80045ee:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80045f0:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80045f2:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80045f4:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80045f6:	f47f af4b 	bne.w	8004490 <find_volume+0x6c>
	rv = rv << 8 | ptr[0];
 80045fa:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 80045fe:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004602:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8004606:	f47f af3d 	bne.w	8004484 <find_volume+0x60>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800460a:	f1b9 0f00 	cmp.w	r9, #0
 800460e:	f47f af39 	bne.w	8004484 <find_volume+0x60>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004612:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8004616:	f7ff fd47 	bl	80040a8 <ld_dword>
 800461a:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800461c:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800461e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8004622:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8004626:	f4ff af2d 	bcc.w	8004484 <find_volume+0x60>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	6163      	str	r3, [r4, #20]
 8004630:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004632:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8004634:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004638:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800463a:	d12f      	bne.n	800469c <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 800463c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8004640:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8004644:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d127      	bne.n	800469c <find_volume+0x278>
			&& move_window(fs, bsect + 1) == FR_OK)
 800464c:	1c71      	adds	r1, r6, #1
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff fe8d 	bl	800436e <move_window>
 8004654:	bb10      	cbnz	r0, 800469c <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 8004656:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800465a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800465e:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8004660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004664:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004668:	4293      	cmp	r3, r2
 800466a:	d117      	bne.n	800469c <find_volume+0x278>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800466c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8004670:	f7ff fd1a 	bl	80040a8 <ld_dword>
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <find_volume+0x2a8>)
 8004676:	4298      	cmp	r0, r3
 8004678:	d110      	bne.n	800469c <find_volume+0x278>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800467a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800467e:	f7ff fd13 	bl	80040a8 <ld_dword>
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <find_volume+0x2ac>)
 8004684:	4298      	cmp	r0, r3
 8004686:	d109      	bne.n	800469c <find_volume+0x278>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004688:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800468c:	f7ff fd0c 	bl	80040a8 <ld_dword>
 8004690:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004692:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004696:	f7ff fd07 	bl	80040a8 <ld_dword>
 800469a:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800469c:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <find_volume+0x2b0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800469e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80046a0:	8813      	ldrh	r3, [r2, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	8013      	strh	r3, [r2, #0]
 80046a8:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <find_volume+0x2b4>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4294      	cmp	r4, r2
 80046b0:	bf04      	itt	eq
 80046b2:	2200      	moveq	r2, #0
 80046b4:	601a      	streq	r2, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	4294      	cmp	r4, r2
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f47f aec7 	bne.w	8004450 <find_volume+0x2c>
 80046c2:	6118      	str	r0, [r3, #16]
 80046c4:	e6c4      	b.n	8004450 <find_volume+0x2c>
 80046c6:	bf00      	nop
 80046c8:	2000002c 	.word	0x2000002c
 80046cc:	41615252 	.word	0x41615252
 80046d0:	61417272 	.word	0x61417272
 80046d4:	20000050 	.word	0x20000050
 80046d8:	20000030 	.word	0x20000030

080046dc <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80046dc:	2901      	cmp	r1, #1
{
 80046de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	4605      	mov	r5, r0
 80046e4:	460c      	mov	r4, r1
 80046e6:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80046e8:	d972      	bls.n	80047d0 <put_fat+0xf4>
 80046ea:	6983      	ldr	r3, [r0, #24]
 80046ec:	4299      	cmp	r1, r3
 80046ee:	d26f      	bcs.n	80047d0 <put_fat+0xf4>
		switch (fs->fs_type) {
 80046f0:	7803      	ldrb	r3, [r0, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d03f      	beq.n	8004776 <put_fat+0x9a>
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d050      	beq.n	800479c <put_fat+0xc0>
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d168      	bne.n	80047d0 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 80046fe:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004702:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004704:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004708:	f7ff fe31 	bl	800436e <move_window>
 800470c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800470e:	bb38      	cbnz	r0, 8004760 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8004710:	f105 0934 	add.w	r9, r5, #52	; 0x34
 8004714:	f108 0a01 	add.w	sl, r8, #1
 8004718:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800471c:	f014 0401 	ands.w	r4, r4, #1
 8004720:	bf1f      	itttt	ne
 8004722:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8004726:	f003 020f 	andne.w	r2, r3, #15
 800472a:	013b      	lslne	r3, r7, #4
 800472c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004730:	bf14      	ite	ne
 8004732:	4313      	orrne	r3, r2
 8004734:	b2fb      	uxtbeq	r3, r7
 8004736:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800473a:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800473c:	2301      	movs	r3, #1
 800473e:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004740:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004744:	4628      	mov	r0, r5
 8004746:	f7ff fe12 	bl	800436e <move_window>
			if (res != FR_OK) break;
 800474a:	4606      	mov	r6, r0
 800474c:	b940      	cbnz	r0, 8004760 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 800474e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004752:	b144      	cbz	r4, 8004766 <put_fat+0x8a>
 8004754:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004758:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800475c:	2301      	movs	r3, #1
 800475e:	70eb      	strb	r3, [r5, #3]
}
 8004760:	4630      	mov	r0, r6
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004766:	f819 300a 	ldrb.w	r3, [r9, sl]
 800476a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800476e:	f023 030f 	bic.w	r3, r3, #15
 8004772:	431f      	orrs	r7, r3
 8004774:	e7f0      	b.n	8004758 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004776:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004778:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800477c:	f7ff fdf7 	bl	800436e <move_window>
			if (res != FR_OK) break;
 8004780:	4606      	mov	r6, r0
 8004782:	2800      	cmp	r0, #0
 8004784:	d1ec      	bne.n	8004760 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004786:	0064      	lsls	r4, r4, #1
 8004788:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800478c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004790:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004792:	551f      	strb	r7, [r3, r4]
 8004794:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8004798:	7057      	strb	r7, [r2, #1]
 800479a:	e7df      	b.n	800475c <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800479c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800479e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80047a2:	f7ff fde4 	bl	800436e <move_window>
			if (res != FR_OK) break;
 80047a6:	4606      	mov	r6, r0
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1d9      	bne.n	8004760 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80047ac:	00a4      	lsls	r4, r4, #2
 80047ae:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80047b2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80047b6:	441c      	add	r4, r3
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff fc75 	bl	80040a8 <ld_dword>
 80047be:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80047c2:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80047c6:	4339      	orrs	r1, r7
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7ff fc75 	bl	80040b8 <st_dword>
 80047ce:	e7c5      	b.n	800475c <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 80047d0:	2602      	movs	r6, #2
 80047d2:	e7c5      	b.n	8004760 <put_fat+0x84>

080047d4 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80047d4:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80047d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d8:	4605      	mov	r5, r0
 80047da:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80047dc:	d952      	bls.n	8004884 <get_fat.isra.9+0xb0>
 80047de:	6983      	ldr	r3, [r0, #24]
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d24f      	bcs.n	8004884 <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 80047e4:	7803      	ldrb	r3, [r0, #0]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d029      	beq.n	800483e <get_fat.isra.9+0x6a>
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d038      	beq.n	8004860 <get_fat.isra.9+0x8c>
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d148      	bne.n	8004884 <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 80047f2:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047f6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80047f8:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80047fc:	f7ff fdb7 	bl	800436e <move_window>
 8004800:	b110      	cbz	r0, 8004808 <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
 8004806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004808:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800480a:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800480c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004810:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004812:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004816:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8004818:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800481c:	f7ff fda7 	bl	800436e <move_window>
 8004820:	2800      	cmp	r0, #0
 8004822:	d1ee      	bne.n	8004802 <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004824:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004828:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800482a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800482c:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8004830:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004834:	bf4c      	ite	mi
 8004836:	0900      	lsrmi	r0, r0, #4
 8004838:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800483e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004840:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004844:	f7ff fd93 	bl	800436e <move_window>
 8004848:	2800      	cmp	r0, #0
 800484a:	d1da      	bne.n	8004802 <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800484c:	0064      	lsls	r4, r4, #1
 800484e:	3534      	adds	r5, #52	; 0x34
 8004850:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004854:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8004856:	5d28      	ldrb	r0, [r5, r4]
 8004858:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800485a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004860:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004862:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004866:	f7ff fd82 	bl	800436e <move_window>
 800486a:	2800      	cmp	r0, #0
 800486c:	d1c9      	bne.n	8004802 <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800486e:	00a4      	lsls	r4, r4, #2
 8004870:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8004874:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004878:	4420      	add	r0, r4
 800487a:	f7ff fc15 	bl	80040a8 <ld_dword>
 800487e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8004884:	2001      	movs	r0, #1
}
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004888 <create_chain>:
{
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800488e:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004890:	460f      	mov	r7, r1
 8004892:	b971      	cbnz	r1, 80048b2 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004894:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004896:	b1f6      	cbz	r6, 80048d6 <create_chain+0x4e>
 8004898:	69ab      	ldr	r3, [r5, #24]
 800489a:	429e      	cmp	r6, r3
 800489c:	bf28      	it	cs
 800489e:	2601      	movcs	r6, #1
 80048a0:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80048a2:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 80048a4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80048a6:	429c      	cmp	r4, r3
 80048a8:	d318      	bcc.n	80048dc <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80048aa:	2e01      	cmp	r6, #1
 80048ac:	d815      	bhi.n	80048da <create_chain+0x52>
 80048ae:	2400      	movs	r4, #0
 80048b0:	e009      	b.n	80048c6 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7ff ff8e 	bl	80047d4 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80048b8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80048ba:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80048bc:	d937      	bls.n	800492e <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d104      	bne.n	80048cc <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80048c2:	f04f 34ff 	mov.w	r4, #4294967295
}
 80048c6:	4620      	mov	r0, r4
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80048cc:	69ab      	ldr	r3, [r5, #24]
 80048ce:	4298      	cmp	r0, r3
 80048d0:	d3f9      	bcc.n	80048c6 <create_chain+0x3e>
 80048d2:	463e      	mov	r6, r7
 80048d4:	e7e4      	b.n	80048a0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80048d6:	2601      	movs	r6, #1
 80048d8:	e7e2      	b.n	80048a0 <create_chain+0x18>
				ncl = 2;
 80048da:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80048dc:	4621      	mov	r1, r4
 80048de:	f8d8 0000 	ldr.w	r0, [r8]
 80048e2:	f7ff ff77 	bl	80047d4 <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 80048e6:	b130      	cbz	r0, 80048f6 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80048e8:	2801      	cmp	r0, #1
 80048ea:	d020      	beq.n	800492e <create_chain+0xa6>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d0e8      	beq.n	80048c2 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80048f0:	42b4      	cmp	r4, r6
 80048f2:	d1d6      	bne.n	80048a2 <create_chain+0x1a>
 80048f4:	e7db      	b.n	80048ae <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f7ff feed 	bl	80046dc <put_fat>
		if (res == FR_OK && clst != 0) {
 8004902:	b990      	cbnz	r0, 800492a <create_chain+0xa2>
 8004904:	b957      	cbnz	r7, 800491c <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004906:	69aa      	ldr	r2, [r5, #24]
 8004908:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 800490a:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800490c:	3a02      	subs	r2, #2
 800490e:	4293      	cmp	r3, r2
 8004910:	d90f      	bls.n	8004932 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8004912:	792b      	ldrb	r3, [r5, #4]
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	712b      	strb	r3, [r5, #4]
 800491a:	e7d4      	b.n	80048c6 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800491c:	4622      	mov	r2, r4
 800491e:	4639      	mov	r1, r7
 8004920:	4628      	mov	r0, r5
 8004922:	f7ff fedb 	bl	80046dc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004926:	2800      	cmp	r0, #0
 8004928:	d0ed      	beq.n	8004906 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800492a:	2801      	cmp	r0, #1
 800492c:	d0c9      	beq.n	80048c2 <create_chain+0x3a>
 800492e:	2401      	movs	r4, #1
 8004930:	e7c9      	b.n	80048c6 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004932:	3b01      	subs	r3, #1
 8004934:	616b      	str	r3, [r5, #20]
 8004936:	e7ec      	b.n	8004912 <create_chain+0x8a>

08004938 <remove_chain>:
{
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800493c:	2d01      	cmp	r5, #1
{
 800493e:	4607      	mov	r7, r0
 8004940:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004942:	d801      	bhi.n	8004948 <remove_chain+0x10>
 8004944:	2002      	movs	r0, #2
 8004946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8004948:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800494a:	69a3      	ldr	r3, [r4, #24]
 800494c:	429d      	cmp	r5, r3
 800494e:	d2f9      	bcs.n	8004944 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004950:	b12a      	cbz	r2, 800495e <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff fec0 	bl	80046dc <put_fat>
		if (res != FR_OK) return res;
 800495c:	bb08      	cbnz	r0, 80049a2 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800495e:	4629      	mov	r1, r5
 8004960:	6838      	ldr	r0, [r7, #0]
 8004962:	f7ff ff37 	bl	80047d4 <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 8004966:	4606      	mov	r6, r0
 8004968:	b908      	cbnz	r0, 800496e <remove_chain+0x36>
	return FR_OK;
 800496a:	2000      	movs	r0, #0
 800496c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800496e:	2801      	cmp	r0, #1
 8004970:	d0e8      	beq.n	8004944 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	d014      	beq.n	80049a0 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004976:	2200      	movs	r2, #0
 8004978:	4629      	mov	r1, r5
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff feae 	bl	80046dc <put_fat>
			if (res != FR_OK) return res;
 8004980:	b978      	cbnz	r0, 80049a2 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004982:	69a2      	ldr	r2, [r4, #24]
 8004984:	6963      	ldr	r3, [r4, #20]
 8004986:	1e91      	subs	r1, r2, #2
 8004988:	428b      	cmp	r3, r1
 800498a:	d205      	bcs.n	8004998 <remove_chain+0x60>
			fs->free_clst++;
 800498c:	3301      	adds	r3, #1
 800498e:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8004990:	7923      	ldrb	r3, [r4, #4]
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004998:	4296      	cmp	r6, r2
 800499a:	4635      	mov	r5, r6
 800499c:	d3df      	bcc.n	800495e <remove_chain+0x26>
 800499e:	e7e4      	b.n	800496a <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80049a0:	2001      	movs	r0, #1
}
 80049a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049a4 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80049a4:	b140      	cbz	r0, 80049b8 <unlock_fs+0x14>
 80049a6:	f1a1 030b 	sub.w	r3, r1, #11
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d904      	bls.n	80049b8 <unlock_fs+0x14>
 80049ae:	290f      	cmp	r1, #15
 80049b0:	d002      	beq.n	80049b8 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 80049b2:	68c0      	ldr	r0, [r0, #12]
 80049b4:	f000 bf04 	b.w	80057c0 <ff_rel_grant>
 80049b8:	4770      	bx	lr

080049ba <dir_sdi.constprop.13>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80049ba:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80049bc:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80049be:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80049c0:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80049c2:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80049c4:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80049c6:	b992      	cbnz	r2, 80049ee <dir_sdi.constprop.13+0x34>
 80049c8:	7823      	ldrb	r3, [r4, #0]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <dir_sdi.constprop.13+0x18>
		clst = fs->dirbase;
 80049ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80049d0:	b973      	cbnz	r3, 80049f0 <dir_sdi.constprop.13+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80049d2:	8923      	ldrh	r3, [r4, #8]
 80049d4:	b90b      	cbnz	r3, 80049da <dir_sdi.constprop.13+0x20>
 80049d6:	2002      	movs	r0, #2
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80049da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049dc:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80049de:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80049e0:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f7      	beq.n	80049d6 <dir_sdi.constprop.13+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80049e6:	3434      	adds	r4, #52	; 0x34
 80049e8:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80049ea:	2000      	movs	r0, #0
 80049ec:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80049ee:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80049f0:	8961      	ldrh	r1, [r4, #10]
 80049f2:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80049f4:	b961      	cbnz	r1, 8004a10 <dir_sdi.constprop.13+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80049f6:	4611      	mov	r1, r2
 80049f8:	6828      	ldr	r0, [r5, #0]
 80049fa:	f7ff feeb 	bl	80047d4 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80049fe:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a00:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a02:	d00b      	beq.n	8004a1c <dir_sdi.constprop.13+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a04:	2801      	cmp	r0, #1
 8004a06:	d9e6      	bls.n	80049d6 <dir_sdi.constprop.13+0x1c>
 8004a08:	69a3      	ldr	r3, [r4, #24]
 8004a0a:	4298      	cmp	r0, r3
 8004a0c:	d3f3      	bcc.n	80049f6 <dir_sdi.constprop.13+0x3c>
 8004a0e:	e7e2      	b.n	80049d6 <dir_sdi.constprop.13+0x1c>
		dp->sect = clust2sect(fs, clst);
 8004a10:	4619      	mov	r1, r3
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff fbe0 	bl	80041d8 <clust2sect>
 8004a18:	61e8      	str	r0, [r5, #28]
 8004a1a:	e7e0      	b.n	80049de <dir_sdi.constprop.13+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a1c:	2001      	movs	r0, #1
}
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}

08004a20 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a20:	69c3      	ldr	r3, [r0, #28]
{
 8004a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a26:	4605      	mov	r5, r0
 8004a28:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a2a:	b1ab      	cbz	r3, 8004a58 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004a2c:	6942      	ldr	r2, [r0, #20]
 8004a2e:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a32:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8004a36:	d20f      	bcs.n	8004a58 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a38:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004a3c:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a3e:	f1b9 0f00 	cmp.w	r9, #0
 8004a42:	d14f      	bne.n	8004ae4 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8004a44:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8004a46:	3301      	adds	r3, #1
 8004a48:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004a4a:	b941      	cbnz	r1, 8004a5e <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004a4c:	8923      	ldrh	r3, [r4, #8]
 8004a4e:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004a52:	d847      	bhi.n	8004ae4 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a58:	2004      	movs	r0, #4
 8004a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a5e:	8963      	ldrh	r3, [r4, #10]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8004a66:	d13d      	bne.n	8004ae4 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff feb3 	bl	80047d4 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a6e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a70:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a72:	d802      	bhi.n	8004a7a <dir_next+0x5a>
 8004a74:	2002      	movs	r0, #2
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004a7a:	1c42      	adds	r2, r0, #1
 8004a7c:	d102      	bne.n	8004a84 <dir_next+0x64>
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004a84:	69a3      	ldr	r3, [r4, #24]
 8004a86:	4298      	cmp	r0, r3
 8004a88:	d326      	bcc.n	8004ad8 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8004a8a:	2f00      	cmp	r7, #0
 8004a8c:	d0e2      	beq.n	8004a54 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a8e:	69a9      	ldr	r1, [r5, #24]
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7ff fef9 	bl	8004888 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004a96:	4606      	mov	r6, r0
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d037      	beq.n	8004b0c <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004a9c:	2801      	cmp	r0, #1
 8004a9e:	d0e9      	beq.n	8004a74 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d0ec      	beq.n	8004a7e <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff fc11 	bl	80042cc <sync_window>
 8004aaa:	4607      	mov	r7, r0
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d1e6      	bne.n	8004a7e <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ab6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8004aba:	f7ff fb05 	bl	80040c8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff fb89 	bl	80041d8 <clust2sect>
						fs->wflag = 1;
 8004ac6:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004aca:	6320      	str	r0, [r4, #48]	; 0x30
 8004acc:	8963      	ldrh	r3, [r4, #10]
 8004ace:	429f      	cmp	r7, r3
 8004ad0:	d310      	bcc.n	8004af4 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8004ad2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ad4:	1bdf      	subs	r7, r3, r7
 8004ad6:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ad8:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8004ada:	4631      	mov	r1, r6
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7ff fb7b 	bl	80041d8 <clust2sect>
 8004ae2:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ae4:	3434      	adds	r4, #52	; 0x34
 8004ae6:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8004ae8:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004aec:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004aee:	2000      	movs	r0, #0
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8004af4:	f884 a003 	strb.w	sl, [r4, #3]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f7ff fbc4 	bl	8004286 <sync_window.part.5>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d1bd      	bne.n	8004a7e <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b04:	3301      	adds	r3, #1
 8004b06:	3701      	adds	r7, #1
 8004b08:	6323      	str	r3, [r4, #48]	; 0x30
 8004b0a:	e7df      	b.n	8004acc <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b0c:	2007      	movs	r0, #7
}
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004b14 <follow_path>:
{
 8004b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8004b18:	6807      	ldr	r7, [r0, #0]
{
 8004b1a:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004b1c:	780b      	ldrb	r3, [r1, #0]
 8004b1e:	2b2f      	cmp	r3, #47	; 0x2f
 8004b20:	460d      	mov	r5, r1
 8004b22:	f101 0101 	add.w	r1, r1, #1
 8004b26:	d0f9      	beq.n	8004b1c <follow_path+0x8>
 8004b28:	2b5c      	cmp	r3, #92	; 0x5c
 8004b2a:	d0f7      	beq.n	8004b1c <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004b30:	782b      	ldrb	r3, [r5, #0]
 8004b32:	2b1f      	cmp	r3, #31
 8004b34:	d959      	bls.n	8004bea <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004b36:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8004c94 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8004b3a:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8004b3e:	220b      	movs	r2, #11
 8004b40:	2120      	movs	r1, #32
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff fac0 	bl	80040c8 <mem_set>
	si = i = 0; ni = 8;
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f105 3eff 	add.w	lr, r5, #4294967295
 8004b4e:	4611      	mov	r1, r2
 8004b50:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8004b52:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b56:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8004b58:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b5c:	d90b      	bls.n	8004b76 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004b5e:	2b2f      	cmp	r3, #47	; 0x2f
 8004b60:	d14b      	bne.n	8004bfa <follow_path+0xe6>
 8004b62:	1868      	adds	r0, r5, r1
 8004b64:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b66:	f810 eb01 	ldrb.w	lr, [r0], #1
 8004b6a:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8004b6e:	d0f9      	beq.n	8004b64 <follow_path+0x50>
 8004b70:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8004b74:	d0f6      	beq.n	8004b64 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8004b76:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	d054      	beq.n	8004c26 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004b7c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8004b80:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004b84:	2ae5      	cmp	r2, #229	; 0xe5
 8004b86:	bf04      	itt	eq
 8004b88:	2205      	moveq	r2, #5
 8004b8a:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b8e:	2b21      	cmp	r3, #33	; 0x21
 8004b90:	bf34      	ite	cc
 8004b92:	2304      	movcc	r3, #4
 8004b94:	2300      	movcs	r3, #0
 8004b96:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff ff0d 	bl	80049ba <dir_sdi.constprop.13>
	if (res != FR_OK) return res;
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d145      	bne.n	8004c30 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8004ba4:	69e1      	ldr	r1, [r4, #28]
 8004ba6:	4648      	mov	r0, r9
 8004ba8:	f7ff fbe1 	bl	800436e <move_window>
		if (res != FR_OK) break;
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d13f      	bne.n	8004c30 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8004bb0:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	2a00      	cmp	r2, #0
 8004bb6:	d046      	beq.n	8004c46 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004bb8:	7ada      	ldrb	r2, [r3, #11]
 8004bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004bbe:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004bc0:	7ada      	ldrb	r2, [r3, #11]
 8004bc2:	0711      	lsls	r1, r2, #28
 8004bc4:	d40c      	bmi.n	8004be0 <follow_path+0xcc>
 8004bc6:	f103 0e0b 	add.w	lr, r3, #11
 8004bca:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8004bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd0:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8004bd4:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8004bd6:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8004bda:	d027      	beq.n	8004c2c <follow_path+0x118>
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	d0f5      	beq.n	8004bcc <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8004be0:	2100      	movs	r1, #0
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff ff1c 	bl	8004a20 <dir_next>
 8004be8:	e7da      	b.n	8004ba0 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004bf0:	4620      	mov	r0, r4
}
 8004bf2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8004bf6:	f7ff bee0 	b.w	80049ba <dir_sdi.constprop.13>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004bfa:	2b5c      	cmp	r3, #92	; 0x5c
 8004bfc:	d0b1      	beq.n	8004b62 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8004c00:	d036      	beq.n	8004c70 <follow_path+0x15c>
 8004c02:	4290      	cmp	r0, r2
 8004c04:	d90f      	bls.n	8004c26 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8004c06:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c0a:	bf18      	it	ne
 8004c0c:	3b80      	subne	r3, #128	; 0x80
 8004c0e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004c98 <follow_path+0x184>
 8004c12:	bf18      	it	ne
 8004c14:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8004c18:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8004c1c:	f1bc 0f00 	cmp.w	ip, #0
 8004c20:	d02b      	beq.n	8004c7a <follow_path+0x166>
 8004c22:	4563      	cmp	r3, ip
 8004c24:	d1f8      	bne.n	8004c18 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c26:	2006      	movs	r0, #6
	return res;
 8004c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d1d7      	bne.n	8004be0 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8004c30:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8004c34:	b148      	cbz	r0, 8004c4a <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004c36:	2804      	cmp	r0, #4
 8004c38:	d129      	bne.n	8004c8e <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c3a:	f013 0f04 	tst.w	r3, #4
 8004c3e:	bf08      	it	eq
 8004c40:	2005      	moveq	r0, #5
 8004c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c46:	2004      	movs	r0, #4
 8004c48:	e7f2      	b.n	8004c30 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c4a:	075a      	lsls	r2, r3, #29
 8004c4c:	d41f      	bmi.n	8004c8e <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c4e:	79a3      	ldrb	r3, [r4, #6]
 8004c50:	06db      	lsls	r3, r3, #27
 8004c52:	d50a      	bpl.n	8004c6a <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c54:	6963      	ldr	r3, [r4, #20]
 8004c56:	7838      	ldrb	r0, [r7, #0]
 8004c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004c60:	4419      	add	r1, r3
 8004c62:	f7ff faf6 	bl	8004252 <ld_clust.isra.1>
 8004c66:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c68:	e767      	b.n	8004b3a <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c6a:	2005      	movs	r0, #5
 8004c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c70:	280b      	cmp	r0, #11
 8004c72:	d0d8      	beq.n	8004c26 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8004c74:	2208      	movs	r2, #8
 8004c76:	200b      	movs	r0, #11
 8004c78:	e76b      	b.n	8004b52 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004c7a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8004c7e:	f1bc 0f19 	cmp.w	ip, #25
 8004c82:	d801      	bhi.n	8004c88 <follow_path+0x174>
 8004c84:	3b20      	subs	r3, #32
 8004c86:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8004c88:	54b3      	strb	r3, [r6, r2]
 8004c8a:	3201      	adds	r2, #1
 8004c8c:	e761      	b.n	8004b52 <follow_path+0x3e>
}
 8004c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c92:	bf00      	nop
 8004c94:	08007fb0 	.word	0x08007fb0
 8004c98:	0800802f 	.word	0x0800802f

08004c9c <dir_register>:
{
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8004ca0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8004ca2:	f7ff fe8a 	bl	80049ba <dir_sdi.constprop.13>
	if (res == FR_OK) {
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	bb28      	cbnz	r0, 8004cf6 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8004caa:	69e9      	ldr	r1, [r5, #28]
 8004cac:	4630      	mov	r0, r6
 8004cae:	f7ff fb5e 	bl	800436e <move_window>
			if (res != FR_OK) break;
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	b9f8      	cbnz	r0, 8004cf6 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004cb6:	6a2b      	ldr	r3, [r5, #32]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2be5      	cmp	r3, #229	; 0xe5
 8004cbc:	d114      	bne.n	8004ce8 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8004cbe:	69e9      	ldr	r1, [r5, #28]
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f7ff fb54 	bl	800436e <move_window>
		if (res == FR_OK) {
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	b960      	cbnz	r0, 8004ce4 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004cca:	4601      	mov	r1, r0
 8004ccc:	2220      	movs	r2, #32
 8004cce:	6a28      	ldr	r0, [r5, #32]
 8004cd0:	f7ff f9fa 	bl	80040c8 <mem_set>
 8004cd4:	220b      	movs	r2, #11
 8004cd6:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004cda:	6a28      	ldr	r0, [r5, #32]
 8004cdc:	f7ff fab0 	bl	8004240 <mem_cpy.part.0>
			fs->wflag = 1;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	70f3      	strb	r3, [r6, #3]
}
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0e8      	beq.n	8004cbe <dir_register+0x22>
			res = dir_next(dp, 1);
 8004cec:	2101      	movs	r1, #1
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f7ff fe96 	bl	8004a20 <dir_next>
 8004cf4:	e7d7      	b.n	8004ca6 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004cf6:	2c04      	cmp	r4, #4
 8004cf8:	bf08      	it	eq
 8004cfa:	2407      	moveq	r4, #7
 8004cfc:	e7f2      	b.n	8004ce4 <dir_register+0x48>

08004cfe <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004cfe:	b570      	push	{r4, r5, r6, lr}
 8004d00:	460e      	mov	r6, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8004d02:	4605      	mov	r5, r0
 8004d04:	b918      	cbnz	r0, 8004d0e <validate+0x10>
		*fs = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	6033      	str	r3, [r6, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8004d0a:	2009      	movs	r0, #9
 8004d0c:	bd70      	pop	{r4, r5, r6, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8004d0e:	6803      	ldr	r3, [r0, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f8      	beq.n	8004d06 <validate+0x8>
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	d0f5      	beq.n	8004d06 <validate+0x8>
 8004d1a:	88d9      	ldrh	r1, [r3, #6]
 8004d1c:	8882      	ldrh	r2, [r0, #4]
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	d1f1      	bne.n	8004d06 <validate+0x8>
 8004d22:	7858      	ldrb	r0, [r3, #1]
 8004d24:	f7ff f97c 	bl	8004020 <disk_status>
 8004d28:	f010 0401 	ands.w	r4, r0, #1
 8004d2c:	d1eb      	bne.n	8004d06 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	6033      	str	r3, [r6, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
 8004d32:	682b      	ldr	r3, [r5, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004d34:	b12b      	cbz	r3, 8004d42 <validate+0x44>
 8004d36:	68d8      	ldr	r0, [r3, #12]
 8004d38:	f000 fd39 	bl	80057ae <ff_req_grant>
 8004d3c:	b108      	cbz	r0, 8004d42 <validate+0x44>
		res = FR_OK;			/* Valid object */
 8004d3e:	4620      	mov	r0, r4
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
		ENTER_FF(obj->fs);		/* Lock file system */
 8004d42:	200f      	movs	r0, #15
	}
	return res;
}
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004d50:	a804      	add	r0, sp, #16
{
 8004d52:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004d54:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004d58:	f7ff fa5a 	bl	8004210 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d5c:	1e07      	subs	r7, r0, #0
 8004d5e:	db35      	blt.n	8004dcc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004d60:	4d1c      	ldr	r5, [pc, #112]	; (8004dd4 <f_mount+0x8c>)
 8004d62:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 8004d66:	b1a4      	cbz	r4, 8004d92 <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8004d6a:	68e0      	ldr	r0, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4294      	cmp	r4, r2
 8004d70:	bf04      	itt	eq
 8004d72:	2200      	moveq	r2, #0
 8004d74:	601a      	streq	r2, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	4294      	cmp	r4, r2
 8004d7a:	bf04      	itt	eq
 8004d7c:	2200      	moveq	r2, #0
 8004d7e:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8004d80:	f000 fd10 	bl	80057a4 <ff_del_syncobj>
 8004d84:	b918      	cbnz	r0, 8004d8e <f_mount+0x46>
 8004d86:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8004d88:	4620      	mov	r0, r4
 8004d8a:	b005      	add	sp, #20
 8004d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 8004d8e:	2300      	movs	r3, #0
 8004d90:	7023      	strb	r3, [r4, #0]
	if (fs) {
 8004d92:	9901      	ldr	r1, [sp, #4]
 8004d94:	b989      	cbnz	r1, 8004dba <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 8004d96:	9c01      	ldr	r4, [sp, #4]
 8004d98:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d9c:	2c00      	cmp	r4, #0
 8004d9e:	d0f3      	beq.n	8004d88 <f_mount+0x40>
 8004da0:	2e01      	cmp	r6, #1
 8004da2:	d115      	bne.n	8004dd0 <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004da4:	a901      	add	r1, sp, #4
 8004da6:	2200      	movs	r2, #0
 8004da8:	4668      	mov	r0, sp
 8004daa:	f7ff fb3b 	bl	8004424 <find_volume>
 8004dae:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8004db0:	4601      	mov	r1, r0
 8004db2:	9801      	ldr	r0, [sp, #4]
 8004db4:	f7ff fdf6 	bl	80049a4 <unlock_fs>
 8004db8:	e7e6      	b.n	8004d88 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8004dc0:	b2f8      	uxtb	r0, r7
 8004dc2:	f000 fce0 	bl	8005786 <ff_cre_syncobj>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d0dd      	beq.n	8004d86 <f_mount+0x3e>
 8004dca:	e7e4      	b.n	8004d96 <f_mount+0x4e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004dcc:	240b      	movs	r4, #11
 8004dce:	e7db      	b.n	8004d88 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004dd0:	2400      	movs	r4, #0
 8004dd2:	e7d9      	b.n	8004d88 <f_mount+0x40>
 8004dd4:	2000002c 	.word	0x2000002c
 8004dd8:	20000030 	.word	0x20000030

08004ddc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de0:	b090      	sub	sp, #64	; 0x40
 8004de2:	4690      	mov	r8, r2
 8004de4:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004de6:	4604      	mov	r4, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	f000 80d2 	beq.w	8004f92 <f_open+0x1b6>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004dee:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8004df2:	462a      	mov	r2, r5
 8004df4:	a903      	add	r1, sp, #12
 8004df6:	a801      	add	r0, sp, #4
 8004df8:	f7ff fb14 	bl	8004424 <find_volume>
	if (res == FR_OK) {
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	bb38      	cbnz	r0, 8004e50 <f_open+0x74>
		dj.obj.fs = fs;
 8004e00:	ae10      	add	r6, sp, #64	; 0x40
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004e08:	9901      	ldr	r1, [sp, #4]
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f7ff fe82 	bl	8004b14 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004e10:	b958      	cbnz	r0, 8004e2a <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004e12:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db1e      	blt.n	8004e58 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004e1a:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8004e1e:	bf14      	ite	ne
 8004e20:	2101      	movne	r1, #1
 8004e22:	2100      	moveq	r1, #0
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7ff f955 	bl	80040d4 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004e2a:	f018 0f1c 	tst.w	r8, #28
 8004e2e:	d073      	beq.n	8004f18 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8004e30:	b1a0      	cbz	r0, 8004e5c <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004e32:	2804      	cmp	r0, #4
 8004e34:	d109      	bne.n	8004e4a <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e36:	4b73      	ldr	r3, [pc, #460]	; (8005004 <f_open+0x228>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	f000 80de 	beq.w	8004ffc <f_open+0x220>
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80da 	beq.w	8004ffc <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004e48:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e4a:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e4e:	b170      	cbz	r0, 8004e6e <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004e50:	2300      	movs	r3, #0
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	4607      	mov	r7, r0
 8004e56:	e092      	b.n	8004f7e <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8004e58:	2006      	movs	r0, #6
 8004e5a:	e7e6      	b.n	8004e2a <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e5c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004e60:	f013 0f11 	tst.w	r3, #17
 8004e64:	d163      	bne.n	8004f2e <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004e66:	f018 0f04 	tst.w	r8, #4
 8004e6a:	f040 80c1 	bne.w	8004ff0 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e6e:	0728      	lsls	r0, r5, #28
 8004e70:	d53c      	bpl.n	8004eec <f_open+0x110>
				dw = GET_FATTIME();
 8004e72:	f002 fc2d 	bl	80076d0 <get_fattime>
 8004e76:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004e78:	4601      	mov	r1, r0
 8004e7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e7c:	300e      	adds	r0, #14
 8004e7e:	f7ff f91b 	bl	80040b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004e82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e84:	4611      	mov	r1, r2
 8004e86:	3016      	adds	r0, #22
 8004e88:	f7ff f916 	bl	80040b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e8e:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004e92:	2220      	movs	r2, #32
 8004e94:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e96:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e9a:	f899 0000 	ldrb.w	r0, [r9]
 8004e9e:	4651      	mov	r1, sl
 8004ea0:	f7ff f9d7 	bl	8004252 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004ea8:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004eaa:	4648      	mov	r0, r9
 8004eac:	f7ff f9df 	bl	800426e <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eb6:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eb8:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8004eba:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8004ec2:	f1b8 0f00 	cmp.w	r8, #0
 8004ec6:	d011      	beq.n	8004eec <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8004ec8:	4641      	mov	r1, r8
 8004eca:	4630      	mov	r0, r6
						dw = fs->winsect;
 8004ecc:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8004ed0:	f7ff fd32 	bl	8004938 <remove_chain>
						if (res == FR_OK) {
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d1bb      	bne.n	8004e50 <f_open+0x74>
							res = move_window(fs, dw);
 8004ed8:	4649      	mov	r1, r9
 8004eda:	9803      	ldr	r0, [sp, #12]
 8004edc:	f7ff fa47 	bl	800436e <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004ee0:	9a03      	ldr	r2, [sp, #12]
 8004ee2:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ee6:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d1b1      	bne.n	8004e50 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004eec:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004eee:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8004ef4:	bf48      	it	mi
 8004ef6:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004efa:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8004efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f00:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f02:	bf14      	ite	ne
 8004f04:	2101      	movne	r1, #1
 8004f06:	2100      	moveq	r1, #0
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff f911 	bl	8004130 <inc_lock>
 8004f0e:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d140      	bne.n	8004f96 <f_open+0x1ba>
 8004f14:	2002      	movs	r0, #2
 8004f16:	e79b      	b.n	8004e50 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d199      	bne.n	8004e50 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004f1c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004f20:	06da      	lsls	r2, r3, #27
 8004f22:	d467      	bmi.n	8004ff4 <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004f24:	f018 0f02 	tst.w	r8, #2
 8004f28:	d0e0      	beq.n	8004eec <f_open+0x110>
 8004f2a:	07db      	lsls	r3, r3, #31
 8004f2c:	d5de      	bpl.n	8004eec <f_open+0x110>
					res = FR_DENIED;
 8004f2e:	2007      	movs	r0, #7
 8004f30:	e78e      	b.n	8004e50 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	f7ff fc4e 	bl	80047d4 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 8004f38:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004f3a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004f3c:	d927      	bls.n	8004f8e <f_open+0x1b2>
 8004f3e:	1c42      	adds	r2, r0, #1
 8004f40:	4250      	negs	r0, r2
 8004f42:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f44:	eba5 0508 	sub.w	r5, r5, r8
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d04d      	beq.n	8004fe8 <f_open+0x20c>
				fp->clust = clst;
 8004f4c:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f47f af7e 	bne.w	8004e50 <f_open+0x74>
 8004f54:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004f58:	b18b      	cbz	r3, 8004f7e <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004f5a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f7ff f93a 	bl	80041d8 <clust2sect>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d0d5      	beq.n	8004f14 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004f68:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004f6c:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4631      	mov	r1, r6
 8004f72:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004f76:	f7ff f86d 	bl	8004054 <disk_read>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d13c      	bne.n	8004ff8 <f_open+0x21c>

	LEAVE_FF(fs, res);
 8004f7e:	4639      	mov	r1, r7
 8004f80:	9803      	ldr	r0, [sp, #12]
 8004f82:	f7ff fd0f 	bl	80049a4 <unlock_fs>
}
 8004f86:	4638      	mov	r0, r7
 8004f88:	b010      	add	sp, #64	; 0x40
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8004f8e:	2002      	movs	r0, #2
 8004f90:	e7d8      	b.n	8004f44 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8004f92:	2709      	movs	r7, #9
 8004f94:	e7f7      	b.n	8004f86 <f_open+0x1aa>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004f96:	9e03      	ldr	r6, [sp, #12]
 8004f98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004f9c:	7830      	ldrb	r0, [r6, #0]
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	f7ff f957 	bl	8004252 <ld_clust.isra.1>
 8004fa4:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004fa6:	f108 001c 	add.w	r0, r8, #28
 8004faa:	f7ff f87d 	bl	80040a8 <ld_dword>
			fp->obj.id = fs->id;
 8004fae:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004fb0:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004fb2:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004fb4:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004fb8:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8004fba:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004fbc:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8004fbe:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8004fc0:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004fc2:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004fc4:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff f87c 	bl	80040c8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004fd0:	06ab      	lsls	r3, r5, #26
 8004fd2:	d5d4      	bpl.n	8004f7e <f_open+0x1a2>
 8004fd4:	68e5      	ldr	r5, [r4, #12]
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	d0d1      	beq.n	8004f7e <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004fda:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004fdc:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004fde:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004fe2:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004fe4:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004fe8:	45a8      	cmp	r8, r5
 8004fea:	d3a2      	bcc.n	8004f32 <f_open+0x156>
 8004fec:	2000      	movs	r0, #0
 8004fee:	e7ad      	b.n	8004f4c <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004ff0:	2008      	movs	r0, #8
 8004ff2:	e72d      	b.n	8004e50 <f_open+0x74>
					res = FR_NO_FILE;
 8004ff4:	2004      	movs	r0, #4
 8004ff6:	e72b      	b.n	8004e50 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	e729      	b.n	8004e50 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7ff fe4d 	bl	8004c9c <dir_register>
 8005002:	e722      	b.n	8004e4a <f_open+0x6e>
 8005004:	20000030 	.word	0x20000030

08005008 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	469b      	mov	fp, r3
 800500e:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8005010:	2300      	movs	r3, #0
{
 8005012:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8005014:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005018:	a903      	add	r1, sp, #12
{
 800501a:	4604      	mov	r4, r0
 800501c:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800501e:	f7ff fe6e 	bl	8004cfe <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005022:	4605      	mov	r5, r0
 8005024:	b908      	cbnz	r0, 800502a <f_write+0x22>
 8005026:	7d65      	ldrb	r5, [r4, #21]
 8005028:	b10d      	cbz	r5, 800502e <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800502a:	4629      	mov	r1, r5
 800502c:	e033      	b.n	8005096 <f_write+0x8e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800502e:	7d23      	ldrb	r3, [r4, #20]
 8005030:	079a      	lsls	r2, r3, #30
 8005032:	d408      	bmi.n	8005046 <f_write+0x3e>
 8005034:	2107      	movs	r1, #7
 8005036:	9803      	ldr	r0, [sp, #12]
 8005038:	f7ff fcb4 	bl	80049a4 <unlock_fs>
 800503c:	2507      	movs	r5, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800503e:	4628      	mov	r0, r5
 8005040:	b005      	add	sp, #20
 8005042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005046:	69a3      	ldr	r3, [r4, #24]
 8005048:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800504a:	bf28      	it	cs
 800504c:	43df      	mvncs	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800504e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005052:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8005054:	b1d7      	cbz	r7, 800508c <f_write+0x84>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005056:	69a1      	ldr	r1, [r4, #24]
 8005058:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 8093 	bne.w	8005188 <f_write+0x180>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	895b      	ldrh	r3, [r3, #10]
 8005066:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8005068:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	d125      	bne.n	80050bc <f_write+0xb4>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005070:	b931      	cbnz	r1, 8005080 <f_write+0x78>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005072:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8005074:	b9a8      	cbnz	r0, 80050a2 <f_write+0x9a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005076:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff fc05 	bl	8004888 <create_chain>
 800507e:	e004      	b.n	800508a <f_write+0x82>
					if (fp->cltbl) {
 8005080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005082:	b163      	cbz	r3, 800509e <f_write+0x96>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff f8b2 	bl	80041ee <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800508a:	b950      	cbnz	r0, 80050a2 <f_write+0x9a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800508c:	7d23      	ldrb	r3, [r4, #20]
 800508e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005092:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8005094:	2100      	movs	r1, #0
 8005096:	9803      	ldr	r0, [sp, #12]
 8005098:	f7ff fc84 	bl	80049a4 <unlock_fs>
 800509c:	e7cf      	b.n	800503e <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800509e:	69e1      	ldr	r1, [r4, #28]
 80050a0:	e7ea      	b.n	8005078 <f_write+0x70>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80050a2:	2801      	cmp	r0, #1
 80050a4:	d102      	bne.n	80050ac <f_write+0xa4>
 80050a6:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 80050a8:	7565      	strb	r5, [r4, #21]
 80050aa:	e7be      	b.n	800502a <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d101      	bne.n	80050b4 <f_write+0xac>
					ABORT(fs, FR_DISK_ERR);
 80050b0:	2501      	movs	r5, #1
 80050b2:	e7f9      	b.n	80050a8 <f_write+0xa0>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80050b4:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80050b6:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80050b8:	b903      	cbnz	r3, 80050bc <f_write+0xb4>
 80050ba:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80050bc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da0c      	bge.n	80050de <f_write+0xd6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050c4:	9803      	ldr	r0, [sp, #12]
 80050c6:	6a22      	ldr	r2, [r4, #32]
 80050c8:	9900      	ldr	r1, [sp, #0]
 80050ca:	7840      	ldrb	r0, [r0, #1]
 80050cc:	2301      	movs	r3, #1
 80050ce:	f7fe ffcf 	bl	8004070 <disk_write>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d1ec      	bne.n	80050b0 <f_write+0xa8>
				fp->flag &= (BYTE)~FA_DIRTY;
 80050d6:	7d23      	ldrb	r3, [r4, #20]
 80050d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050dc:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80050de:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80050e2:	69e1      	ldr	r1, [r4, #28]
 80050e4:	4650      	mov	r0, sl
 80050e6:	f7ff f877 	bl	80041d8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80050ea:	b920      	cbnz	r0, 80050f6 <f_write+0xee>
 80050ec:	2502      	movs	r5, #2
 80050ee:	7565      	strb	r5, [r4, #21]
 80050f0:	4629      	mov	r1, r5
 80050f2:	4650      	mov	r0, sl
 80050f4:	e7d0      	b.n	8005098 <f_write+0x90>
			sect += csect;
 80050f6:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050f8:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 80050fa:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050fe:	d031      	beq.n	8005164 <f_write+0x15c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005100:	9a01      	ldr	r2, [sp, #4]
 8005102:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005106:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800510a:	4432      	add	r2, r6
 800510c:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800510e:	bf84      	itt	hi
 8005110:	9a01      	ldrhi	r2, [sp, #4]
 8005112:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005114:	4633      	mov	r3, r6
 8005116:	4642      	mov	r2, r8
 8005118:	4649      	mov	r1, r9
 800511a:	f7fe ffa9 	bl	8004070 <disk_write>
 800511e:	2800      	cmp	r0, #0
 8005120:	d1c6      	bne.n	80050b0 <f_write+0xa8>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005122:	6a21      	ldr	r1, [r4, #32]
 8005124:	eba1 0108 	sub.w	r1, r1, r8
 8005128:	428e      	cmp	r6, r1
 800512a:	d90a      	bls.n	8005142 <f_write+0x13a>
 800512c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005130:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8005134:	9800      	ldr	r0, [sp, #0]
 8005136:	f7ff f883 	bl	8004240 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800513a:	7d23      	ldrb	r3, [r4, #20]
 800513c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005140:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005142:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005144:	69a3      	ldr	r3, [r4, #24]
 8005146:	68e2      	ldr	r2, [r4, #12]
 8005148:	4433      	add	r3, r6
 800514a:	61a3      	str	r3, [r4, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	bf2c      	ite	cs
 8005150:	60e2      	strcs	r2, [r4, #12]
 8005152:	60e3      	strcc	r3, [r4, #12]
 8005154:	f8db 3000 	ldr.w	r3, [fp]
 8005158:	4433      	add	r3, r6
 800515a:	44b1      	add	r9, r6
 800515c:	f8cb 3000 	str.w	r3, [fp]
 8005160:	1bbf      	subs	r7, r7, r6
 8005162:	e777      	b.n	8005054 <f_write+0x4c>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005164:	6a23      	ldr	r3, [r4, #32]
 8005166:	4598      	cmp	r8, r3
 8005168:	d00c      	beq.n	8005184 <f_write+0x17c>
 800516a:	69a2      	ldr	r2, [r4, #24]
 800516c:	68e3      	ldr	r3, [r4, #12]
 800516e:	429a      	cmp	r2, r3
 8005170:	d208      	bcs.n	8005184 <f_write+0x17c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005172:	2301      	movs	r3, #1
 8005174:	4642      	mov	r2, r8
 8005176:	9900      	ldr	r1, [sp, #0]
 8005178:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800517c:	f7fe ff6a 	bl	8004054 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8005180:	2800      	cmp	r0, #0
 8005182:	d195      	bne.n	80050b0 <f_write+0xa8>
			fp->sect = sect;
 8005184:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005188:	69a0      	ldr	r0, [r4, #24]
 800518a:	9b00      	ldr	r3, [sp, #0]
 800518c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005190:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 8005194:	42be      	cmp	r6, r7
 8005196:	bf28      	it	cs
 8005198:	463e      	movcs	r6, r7
 800519a:	4418      	add	r0, r3
 800519c:	4632      	mov	r2, r6
 800519e:	4649      	mov	r1, r9
 80051a0:	f7ff f84e 	bl	8004240 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80051a4:	7d23      	ldrb	r3, [r4, #20]
 80051a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051aa:	7523      	strb	r3, [r4, #20]
 80051ac:	e7ca      	b.n	8005144 <f_write+0x13c>

080051ae <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80051ae:	290a      	cmp	r1, #10
{
 80051b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051b2:	4604      	mov	r4, r0
 80051b4:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80051b6:	d102      	bne.n	80051be <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 80051b8:	210d      	movs	r1, #13
 80051ba:	f7ff fff8 	bl	80051ae <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80051be:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db14      	blt.n	80051ee <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80051c4:	1c5d      	adds	r5, r3, #1
 80051c6:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80051c8:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80051ca:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80051cc:	dd0b      	ble.n	80051e6 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80051ce:	ab01      	add	r3, sp, #4
 80051d0:	462a      	mov	r2, r5
 80051d2:	f104 010c 	add.w	r1, r4, #12
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	f7ff ff16 	bl	8005008 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80051dc:	9b01      	ldr	r3, [sp, #4]
 80051de:	1b5d      	subs	r5, r3, r5
 80051e0:	bf18      	it	ne
 80051e2:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 80051e6:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 80051e8:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 80051ea:	3301      	adds	r3, #1
 80051ec:	60a3      	str	r3, [r4, #8]
}
 80051ee:	b002      	add	sp, #8
 80051f0:	bd70      	pop	{r4, r5, r6, pc}

080051f2 <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80051f2:	6842      	ldr	r2, [r0, #4]
 80051f4:	2a00      	cmp	r2, #0
{
 80051f6:	b513      	push	{r0, r1, r4, lr}
 80051f8:	4604      	mov	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80051fa:	da03      	bge.n	8005204 <putc_flush+0x12>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005200:	b002      	add	sp, #8
 8005202:	bd10      	pop	{r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005204:	f100 010c 	add.w	r1, r0, #12
 8005208:	ab01      	add	r3, sp, #4
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	f7ff fefc 	bl	8005008 <f_write>
 8005210:	2800      	cmp	r0, #0
 8005212:	d1f3      	bne.n	80051fc <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d1ef      	bne.n	80051fc <putc_flush+0xa>
 800521c:	68a0      	ldr	r0, [r4, #8]
 800521e:	e7ef      	b.n	8005200 <putc_flush+0xe>

08005220 <f_sync>:
{
 8005220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005222:	a901      	add	r1, sp, #4
{
 8005224:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005226:	f7ff fd6a 	bl	8004cfe <validate>
	if (res == FR_OK) {
 800522a:	4605      	mov	r5, r0
 800522c:	2800      	cmp	r0, #0
 800522e:	d142      	bne.n	80052b6 <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005230:	7d23      	ldrb	r3, [r4, #20]
 8005232:	065a      	lsls	r2, r3, #25
 8005234:	d53f      	bpl.n	80052b6 <f_sync+0x96>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	d514      	bpl.n	8005264 <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800523a:	9801      	ldr	r0, [sp, #4]
 800523c:	6a22      	ldr	r2, [r4, #32]
 800523e:	7840      	ldrb	r0, [r0, #1]
 8005240:	2301      	movs	r3, #1
 8005242:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005246:	f7fe ff13 	bl	8004070 <disk_write>
 800524a:	b138      	cbz	r0, 800525c <f_sync+0x3c>
 800524c:	2101      	movs	r1, #1
 800524e:	9801      	ldr	r0, [sp, #4]
 8005250:	f7ff fba8 	bl	80049a4 <unlock_fs>
 8005254:	2501      	movs	r5, #1
}
 8005256:	4628      	mov	r0, r5
 8005258:	b003      	add	sp, #12
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800525c:	7d23      	ldrb	r3, [r4, #20]
 800525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005262:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 8005264:	f002 fa34 	bl	80076d0 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8005268:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800526a:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800526c:	9801      	ldr	r0, [sp, #4]
 800526e:	f7ff f87e 	bl	800436e <move_window>
				if (res == FR_OK) {
 8005272:	4605      	mov	r5, r0
 8005274:	b9f8      	cbnz	r0, 80052b6 <f_sync+0x96>
					dir = fp->dir_ptr;
 8005276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005278:	7af3      	ldrb	r3, [r6, #11]
 800527a:	f043 0320 	orr.w	r3, r3, #32
 800527e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005280:	68a2      	ldr	r2, [r4, #8]
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	4631      	mov	r1, r6
 8005286:	f7fe fff2 	bl	800426e <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800528a:	68e1      	ldr	r1, [r4, #12]
 800528c:	f106 001c 	add.w	r0, r6, #28
 8005290:	f7fe ff12 	bl	80040b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005294:	4639      	mov	r1, r7
 8005296:	f106 0016 	add.w	r0, r6, #22
 800529a:	f7fe ff0d 	bl	80040b8 <st_dword>
					fs->wflag = 1;
 800529e:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80052a0:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 80052a2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80052a4:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80052a6:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80052a8:	f7ff f816 	bl	80042d8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80052ac:	7d23      	ldrb	r3, [r4, #20]
 80052ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80052b2:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80052b4:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 80052b6:	4629      	mov	r1, r5
 80052b8:	9801      	ldr	r0, [sp, #4]
 80052ba:	f7ff fb73 	bl	80049a4 <unlock_fs>
 80052be:	e7ca      	b.n	8005256 <f_sync+0x36>

080052c0 <f_close>:
{
 80052c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052c2:	4605      	mov	r5, r0
	res = f_sync(fp);					/* Flush cached data */
 80052c4:	f7ff ffac 	bl	8005220 <f_sync>
	if (res == FR_OK)
 80052c8:	4604      	mov	r4, r0
 80052ca:	b978      	cbnz	r0, 80052ec <f_close+0x2c>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80052cc:	a901      	add	r1, sp, #4
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7ff fd15 	bl	8004cfe <validate>
		if (res == FR_OK) {
 80052d4:	4604      	mov	r4, r0
 80052d6:	b948      	cbnz	r0, 80052ec <f_close+0x2c>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80052d8:	6928      	ldr	r0, [r5, #16]
 80052da:	f7fe ff65 	bl	80041a8 <dec_lock>
			if (res == FR_OK)
 80052de:	4604      	mov	r4, r0
 80052e0:	b900      	cbnz	r0, 80052e4 <f_close+0x24>
				fp->obj.fs = 0;			/* Invalidate file object */
 80052e2:	6028      	str	r0, [r5, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80052e4:	2100      	movs	r1, #0
 80052e6:	9801      	ldr	r0, [sp, #4]
 80052e8:	f7ff fb5c 	bl	80049a4 <unlock_fs>
}
 80052ec:	4620      	mov	r0, r4
 80052ee:	b003      	add	sp, #12
 80052f0:	bd30      	pop	{r4, r5, pc}

080052f2 <f_lseek>:
{
 80052f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f6:	460e      	mov	r6, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80052f8:	a901      	add	r1, sp, #4
{
 80052fa:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80052fc:	f7ff fcff 	bl	8004cfe <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005300:	4604      	mov	r4, r0
 8005302:	b908      	cbnz	r0, 8005308 <f_lseek+0x16>
 8005304:	7d6c      	ldrb	r4, [r5, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005306:	b114      	cbz	r4, 800530e <f_lseek+0x1c>
	LEAVE_FF(fs, res);
 8005308:	4621      	mov	r1, r4
 800530a:	9801      	ldr	r0, [sp, #4]
 800530c:	e053      	b.n	80053b6 <f_lseek+0xc4>
	if (fp->cltbl) {	/* Fast seek */
 800530e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d07e      	beq.n	8005412 <f_lseek+0x120>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005314:	1c72      	adds	r2, r6, #1
 8005316:	d136      	bne.n	8005386 <f_lseek+0x94>
			cl = fp->obj.sclust;		/* Origin of the chain */
 8005318:	f8d5 8008 	ldr.w	r8, [r5, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800531c:	f8d3 b000 	ldr.w	fp, [r3]
 8005320:	1d1f      	adds	r7, r3, #4
 8005322:	2602      	movs	r6, #2
			if (cl) {
 8005324:	f1b8 0f00 	cmp.w	r8, #0
 8005328:	d025      	beq.n	8005376 <f_lseek+0x84>
 800532a:	46c1      	mov	r9, r8
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800532c:	f04f 0a00 	mov.w	sl, #0
						cl = get_fat(&fp->obj, cl);
 8005330:	4649      	mov	r1, r9
 8005332:	6828      	ldr	r0, [r5, #0]
 8005334:	f7ff fa4e 	bl	80047d4 <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8005338:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800533a:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800533e:	d804      	bhi.n	800534a <f_lseek+0x58>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005340:	2402      	movs	r4, #2
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005342:	756c      	strb	r4, [r5, #21]
 8005344:	e7e0      	b.n	8005308 <f_lseek+0x16>
 8005346:	4680      	mov	r8, r0
 8005348:	e7ef      	b.n	800532a <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	d101      	bne.n	8005352 <f_lseek+0x60>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800534e:	2401      	movs	r4, #1
 8005350:	e7f7      	b.n	8005342 <f_lseek+0x50>
					} while (cl == pcl + 1);
 8005352:	f109 0301 	add.w	r3, r9, #1
 8005356:	4298      	cmp	r0, r3
 8005358:	4681      	mov	r9, r0
 800535a:	d0e9      	beq.n	8005330 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800535c:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800535e:	45b3      	cmp	fp, r6
						*tbl++ = ncl; *tbl++ = tcl;
 8005360:	bf21      	itttt	cs
 8005362:	463b      	movcs	r3, r7
 8005364:	f843 ab08 	strcs.w	sl, [r3], #8
 8005368:	f8c7 8004 	strcs.w	r8, [r7, #4]
 800536c:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	4298      	cmp	r0, r3
 8005374:	d3e7      	bcc.n	8005346 <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 8005376:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (ulen <= tlen) {
 8005378:	455e      	cmp	r6, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800537a:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen) {
 800537c:	f200 80e3 	bhi.w	8005546 <f_lseek+0x254>
				*tbl = 0;		/* Terminate table */
 8005380:	2300      	movs	r3, #0
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	e7c0      	b.n	8005308 <f_lseek+0x16>
 8005386:	68e8      	ldr	r0, [r5, #12]
 8005388:	4286      	cmp	r6, r0
 800538a:	bf28      	it	cs
 800538c:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 800538e:	61ae      	str	r6, [r5, #24]
			if (ofs) {
 8005390:	2e00      	cmp	r6, #0
 8005392:	d0b9      	beq.n	8005308 <f_lseek+0x16>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005394:	f106 38ff 	add.w	r8, r6, #4294967295
 8005398:	4641      	mov	r1, r8
 800539a:	4628      	mov	r0, r5
 800539c:	f7fe ff27 	bl	80041ee <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 80053a0:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 80053a2:	61e8      	str	r0, [r5, #28]
 80053a4:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 80053a6:	4638      	mov	r0, r7
 80053a8:	f7fe ff16 	bl	80041d8 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80053ac:	b948      	cbnz	r0, 80053c2 <f_lseek+0xd0>
 80053ae:	2402      	movs	r4, #2
 80053b0:	756c      	strb	r4, [r5, #21]
 80053b2:	4621      	mov	r1, r4
 80053b4:	4638      	mov	r0, r7
	LEAVE_FF(fs, res);
 80053b6:	f7ff faf5 	bl	80049a4 <unlock_fs>
}
 80053ba:	4620      	mov	r0, r4
 80053bc:	b003      	add	sp, #12
 80053be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80053c2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	d09e      	beq.n	8005308 <f_lseek+0x16>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80053ca:	897e      	ldrh	r6, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80053cc:	6a2a      	ldr	r2, [r5, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80053ce:	3e01      	subs	r6, #1
 80053d0:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 80053d4:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80053d6:	4296      	cmp	r6, r2
 80053d8:	d096      	beq.n	8005308 <f_lseek+0x16>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80053da:	f995 3014 	ldrsb.w	r3, [r5, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f105 0830 	add.w	r8, r5, #48	; 0x30
 80053e4:	da0a      	bge.n	80053fc <f_lseek+0x10a>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80053e6:	2301      	movs	r3, #1
 80053e8:	4641      	mov	r1, r8
 80053ea:	7878      	ldrb	r0, [r7, #1]
 80053ec:	f7fe fe40 	bl	8004070 <disk_write>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1ac      	bne.n	800534e <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 80053f4:	7d2b      	ldrb	r3, [r5, #20]
 80053f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053fa:	752b      	strb	r3, [r5, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80053fc:	9801      	ldr	r0, [sp, #4]
 80053fe:	2301      	movs	r3, #1
 8005400:	4632      	mov	r2, r6
 8005402:	4641      	mov	r1, r8
 8005404:	7840      	ldrb	r0, [r0, #1]
 8005406:	f7fe fe25 	bl	8004054 <disk_read>
 800540a:	2800      	cmp	r0, #0
 800540c:	d19f      	bne.n	800534e <f_lseek+0x5c>
					fp->sect = dsc;
 800540e:	622e      	str	r6, [r5, #32]
 8005410:	e77a      	b.n	8005308 <f_lseek+0x16>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005412:	68eb      	ldr	r3, [r5, #12]
 8005414:	429e      	cmp	r6, r3
 8005416:	d904      	bls.n	8005422 <f_lseek+0x130>
 8005418:	7d2a      	ldrb	r2, [r5, #20]
 800541a:	f012 0f02 	tst.w	r2, #2
 800541e:	bf08      	it	eq
 8005420:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 8005422:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8005424:	69ab      	ldr	r3, [r5, #24]
		fp->fptr = nsect = 0;
 8005426:	61aa      	str	r2, [r5, #24]
		if (ofs) {
 8005428:	2e00      	cmp	r6, #0
 800542a:	d133      	bne.n	8005494 <f_lseek+0x1a2>
		fp->fptr = nsect = 0;
 800542c:	4637      	mov	r7, r6
 800542e:	e009      	b.n	8005444 <f_lseek+0x152>
 8005430:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005432:	68eb      	ldr	r3, [r5, #12]
 8005434:	69ae      	ldr	r6, [r5, #24]
 8005436:	429e      	cmp	r6, r3
			fp->flag |= FA_MODIFIED;
 8005438:	bf81      	itttt	hi
 800543a:	7d2b      	ldrbhi	r3, [r5, #20]
			fp->obj.objsize = fp->fptr;
 800543c:	60ee      	strhi	r6, [r5, #12]
			fp->flag |= FA_MODIFIED;
 800543e:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8005442:	752b      	strbhi	r3, [r5, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005444:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005448:	2e00      	cmp	r6, #0
 800544a:	f43f af5d 	beq.w	8005308 <f_lseek+0x16>
 800544e:	6a2a      	ldr	r2, [r5, #32]
 8005450:	42ba      	cmp	r2, r7
 8005452:	f43f af59 	beq.w	8005308 <f_lseek+0x16>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005456:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8005460:	da0c      	bge.n	800547c <f_lseek+0x18a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005462:	9801      	ldr	r0, [sp, #4]
 8005464:	2301      	movs	r3, #1
 8005466:	4631      	mov	r1, r6
 8005468:	7840      	ldrb	r0, [r0, #1]
 800546a:	f7fe fe01 	bl	8004070 <disk_write>
 800546e:	2800      	cmp	r0, #0
 8005470:	f47f af6d 	bne.w	800534e <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005474:	7d2b      	ldrb	r3, [r5, #20]
 8005476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547a:	752b      	strb	r3, [r5, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800547c:	9801      	ldr	r0, [sp, #4]
 800547e:	2301      	movs	r3, #1
 8005480:	463a      	mov	r2, r7
 8005482:	4631      	mov	r1, r6
 8005484:	7840      	ldrb	r0, [r0, #1]
 8005486:	f7fe fde5 	bl	8004054 <disk_read>
 800548a:	2800      	cmp	r0, #0
 800548c:	f47f af5f 	bne.w	800534e <f_lseek+0x5c>
			fp->sect = nsect;
 8005490:	622f      	str	r7, [r5, #32]
 8005492:	e739      	b.n	8005308 <f_lseek+0x16>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005494:	9a01      	ldr	r2, [sp, #4]
 8005496:	8957      	ldrh	r7, [r2, #10]
 8005498:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800549a:	b313      	cbz	r3, 80054e2 <f_lseek+0x1f0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800549c:	3b01      	subs	r3, #1
 800549e:	1e72      	subs	r2, r6, #1
 80054a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80054a4:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80054a8:	428a      	cmp	r2, r1
 80054aa:	d31a      	bcc.n	80054e2 <f_lseek+0x1f0>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80054ac:	427a      	negs	r2, r7
 80054ae:	4013      	ands	r3, r2
				clst = fp->clust;
 80054b0:	69e9      	ldr	r1, [r5, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80054b2:	61ab      	str	r3, [r5, #24]
				ofs -= fp->fptr;
 80054b4:	1af6      	subs	r6, r6, r3
			if (clst != 0) {
 80054b6:	2900      	cmp	r1, #0
 80054b8:	d0ba      	beq.n	8005430 <f_lseek+0x13e>
				while (ofs > bcs) {						/* Cluster following loop */
 80054ba:	42be      	cmp	r6, r7
 80054bc:	d820      	bhi.n	8005500 <f_lseek+0x20e>
				fp->fptr += ofs;
 80054be:	69ab      	ldr	r3, [r5, #24]
 80054c0:	4433      	add	r3, r6
 80054c2:	61ab      	str	r3, [r5, #24]
				if (ofs % SS(fs)) {
 80054c4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0b1      	beq.n	8005430 <f_lseek+0x13e>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80054cc:	9a01      	ldr	r2, [sp, #4]
 80054ce:	4610      	mov	r0, r2
 80054d0:	f7fe fe82 	bl	80041d8 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d133      	bne.n	8005540 <f_lseek+0x24e>
 80054d8:	2402      	movs	r4, #2
 80054da:	756c      	strb	r4, [r5, #21]
 80054dc:	4621      	mov	r1, r4
 80054de:	4610      	mov	r0, r2
 80054e0:	e769      	b.n	80053b6 <f_lseek+0xc4>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80054e2:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80054e4:	b951      	cbnz	r1, 80054fc <f_lseek+0x20a>
					clst = create_chain(&fp->obj, 0);
 80054e6:	4628      	mov	r0, r5
 80054e8:	f7ff f9ce 	bl	8004888 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80054ec:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80054ee:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80054f0:	f43f af26 	beq.w	8005340 <f_lseek+0x4e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f af2a 	beq.w	800534e <f_lseek+0x5c>
					fp->obj.sclust = clst;
 80054fa:	60a9      	str	r1, [r5, #8]
				fp->clust = clst;
 80054fc:	61e9      	str	r1, [r5, #28]
 80054fe:	e7da      	b.n	80054b6 <f_lseek+0x1c4>
					ofs -= bcs; fp->fptr += bcs;
 8005500:	69ab      	ldr	r3, [r5, #24]
 8005502:	443b      	add	r3, r7
 8005504:	61ab      	str	r3, [r5, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005506:	7d2b      	ldrb	r3, [r5, #20]
 8005508:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 800550a:	eba6 0607 	sub.w	r6, r6, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800550e:	d506      	bpl.n	800551e <f_lseek+0x22c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005510:	4628      	mov	r0, r5
 8005512:	f7ff f9b9 	bl	8004888 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005516:	4601      	mov	r1, r0
 8005518:	b928      	cbnz	r0, 8005526 <f_lseek+0x234>
							ofs = 0; break;
 800551a:	4606      	mov	r6, r0
 800551c:	e7cf      	b.n	80054be <f_lseek+0x1cc>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800551e:	6828      	ldr	r0, [r5, #0]
 8005520:	f7ff f958 	bl	80047d4 <get_fat.isra.9>
 8005524:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005526:	1c4b      	adds	r3, r1, #1
 8005528:	f43f af11 	beq.w	800534e <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800552c:	2901      	cmp	r1, #1
 800552e:	f67f af07 	bls.w	8005340 <f_lseek+0x4e>
 8005532:	9b01      	ldr	r3, [sp, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	4299      	cmp	r1, r3
 8005538:	f4bf af02 	bcs.w	8005340 <f_lseek+0x4e>
					fp->clust = clst;
 800553c:	61e9      	str	r1, [r5, #28]
 800553e:	e7bc      	b.n	80054ba <f_lseek+0x1c8>
					nsect += (DWORD)(ofs / SS(fs));
 8005540:	eb00 2756 	add.w	r7, r0, r6, lsr #9
 8005544:	e775      	b.n	8005432 <f_lseek+0x140>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005546:	2411      	movs	r4, #17
 8005548:	e6de      	b.n	8005308 <f_lseek+0x16>

0800554a <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800554a:	b40e      	push	{r1, r2, r3}
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	b09d      	sub	sp, #116	; 0x74
 8005552:	aa25      	add	r2, sp, #148	; 0x94
	pb->nchr = pb->idx = 0;
 8005554:	2100      	movs	r1, #0
{
 8005556:	f852 3b04 	ldr.w	r3, [r2], #4
	pb->fp = fp;
 800555a:	9009      	str	r0, [sp, #36]	; 0x24
	pb->nchr = pb->idx = 0;
 800555c:	910a      	str	r1, [sp, #40]	; 0x28
 800555e:	910b      	str	r1, [sp, #44]	; 0x2c
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
 8005560:	9200      	str	r2, [sp, #0]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
 8005562:	ae01      	add	r6, sp, #4
		c = *fmt++;
 8005564:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 8005566:	2900      	cmp	r1, #0
 8005568:	f000 80e0 	beq.w	800572c <f_printf+0x1e2>
		if (c != '%') {				/* Non escape character */
 800556c:	2925      	cmp	r1, #37	; 0x25
 800556e:	d004      	beq.n	800557a <f_printf+0x30>
		c = *fmt++;
 8005570:	1c5d      	adds	r5, r3, #1
			putc_bfd(&pb, c); continue;
 8005572:	a809      	add	r0, sp, #36	; 0x24
 8005574:	f7ff fe1b 	bl	80051ae <putc_bfd>
 8005578:	e05d      	b.n	8005636 <f_printf+0xec>
		c = *fmt++;
 800557a:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 800557c:	2930      	cmp	r1, #48	; 0x30
 800557e:	d129      	bne.n	80055d4 <f_printf+0x8a>
			f = 1; c = *fmt++;
 8005580:	7899      	ldrb	r1, [r3, #2]
 8005582:	1cdd      	adds	r5, r3, #3
 8005584:	2201      	movs	r2, #1
 8005586:	2700      	movs	r7, #0
			w = w * 10 + c - '0';
 8005588:	200a      	movs	r0, #10
		while (IsDigit(c)) {		/* Precision */
 800558a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800558e:	2b09      	cmp	r3, #9
 8005590:	d929      	bls.n	80055e6 <f_printf+0x9c>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005592:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8005596:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 8005598:	bf02      	ittt	eq
 800559a:	7829      	ldrbeq	r1, [r5, #0]
 800559c:	f042 0204 	orreq.w	r2, r2, #4
 80055a0:	3501      	addeq	r5, #1
		if (!c) break;
 80055a2:	2900      	cmp	r1, #0
 80055a4:	f000 80c2 	beq.w	800572c <f_printf+0x1e2>
		if (IsLower(d)) d -= 0x20;
 80055a8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80055ac:	2b19      	cmp	r3, #25
 80055ae:	bf9a      	itte	ls
 80055b0:	f1a1 0320 	subls.w	r3, r1, #32
 80055b4:	b2db      	uxtbls	r3, r3
 80055b6:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 80055b8:	2b4f      	cmp	r3, #79	; 0x4f
 80055ba:	d03e      	beq.n	800563a <f_printf+0xf0>
 80055bc:	d819      	bhi.n	80055f2 <f_printf+0xa8>
 80055be:	2b43      	cmp	r3, #67	; 0x43
 80055c0:	f000 8096 	beq.w	80056f0 <f_printf+0x1a6>
 80055c4:	2b44      	cmp	r3, #68	; 0x44
 80055c6:	f000 809b 	beq.w	8005700 <f_printf+0x1b6>
 80055ca:	2b42      	cmp	r3, #66	; 0x42
 80055cc:	d1d1      	bne.n	8005572 <f_printf+0x28>
			r = 2; break;
 80055ce:	f04f 0e02 	mov.w	lr, #2
 80055d2:	e034      	b.n	800563e <f_printf+0xf4>
			if (c == '-') {			/* Flag: left justified */
 80055d4:	292d      	cmp	r1, #45	; 0x2d
		c = *fmt++;
 80055d6:	bf19      	ittee	ne
 80055d8:	1c9d      	addne	r5, r3, #2
		w = f = 0;
 80055da:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 80055dc:	1cdd      	addeq	r5, r3, #3
 80055de:	7899      	ldrbeq	r1, [r3, #2]
 80055e0:	bf08      	it	eq
 80055e2:	2202      	moveq	r2, #2
 80055e4:	e7cf      	b.n	8005586 <f_printf+0x3c>
			w = w * 10 + c - '0';
 80055e6:	fb00 1707 	mla	r7, r0, r7, r1
 80055ea:	3f30      	subs	r7, #48	; 0x30
			c = *fmt++;
 80055ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80055f0:	e7cb      	b.n	800558a <f_printf+0x40>
		switch (d) {				/* Type is... */
 80055f2:	2b55      	cmp	r3, #85	; 0x55
 80055f4:	f000 8084 	beq.w	8005700 <f_printf+0x1b6>
 80055f8:	2b58      	cmp	r3, #88	; 0x58
 80055fa:	d07e      	beq.n	80056fa <f_printf+0x1b0>
 80055fc:	2b53      	cmp	r3, #83	; 0x53
 80055fe:	d1b8      	bne.n	8005572 <f_printf+0x28>
			p = va_arg(arp, TCHAR*);
 8005600:	9b00      	ldr	r3, [sp, #0]
 8005602:	f8d3 8000 	ldr.w	r8, [r3]
 8005606:	1d19      	adds	r1, r3, #4
 8005608:	9100      	str	r1, [sp, #0]
			for (j = 0; p[j]; j++) ;
 800560a:	4643      	mov	r3, r8
 800560c:	eba3 0408 	sub.w	r4, r3, r8
 8005610:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005614:	2900      	cmp	r1, #0
 8005616:	d1f9      	bne.n	800560c <f_printf+0xc2>
			if (!(f & 2)) {
 8005618:	0793      	lsls	r3, r2, #30
 800561a:	d404      	bmi.n	8005626 <f_printf+0xdc>
				while (j++ < w) putc_bfd(&pb, ' ');
 800561c:	4623      	mov	r3, r4
 800561e:	42bb      	cmp	r3, r7
 8005620:	f104 0401 	add.w	r4, r4, #1
 8005624:	d355      	bcc.n	80056d2 <f_printf+0x188>
 8005626:	f108 38ff 	add.w	r8, r8, #4294967295
			while (*p) putc_bfd(&pb, *p++);
 800562a:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800562e:	2900      	cmp	r1, #0
 8005630:	d154      	bne.n	80056dc <f_printf+0x192>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005632:	42a7      	cmp	r7, r4
 8005634:	d856      	bhi.n	80056e4 <f_printf+0x19a>
{
 8005636:	462b      	mov	r3, r5
 8005638:	e794      	b.n	8005564 <f_printf+0x1a>
			r = 8; break;
 800563a:	f04f 0e08 	mov.w	lr, #8
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800563e:	f012 0f04 	tst.w	r2, #4
 8005642:	9800      	ldr	r0, [sp, #0]
 8005644:	d05f      	beq.n	8005706 <f_printf+0x1bc>
 8005646:	1d04      	adds	r4, r0, #4
 8005648:	6800      	ldr	r0, [r0, #0]
 800564a:	9400      	str	r4, [sp, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800564c:	2b44      	cmp	r3, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800564e:	d104      	bne.n	800565a <f_printf+0x110>
		if (d == 'D' && (v & 0x80000000)) {
 8005650:	2800      	cmp	r0, #0
			v = 0 - v;
 8005652:	bfbc      	itt	lt
 8005654:	4240      	neglt	r0, r0
			f |= 8;
 8005656:	f042 0208 	orrlt.w	r2, r2, #8
 800565a:	2978      	cmp	r1, #120	; 0x78
 800565c:	bf0c      	ite	eq
 800565e:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8005662:	f04f 0807 	movne.w	r8, #7
		i = 0;
 8005666:	2100      	movs	r1, #0
			d = (TCHAR)(v % r); v /= r;
 8005668:	fbb0 fcfe 	udiv	ip, r0, lr
 800566c:	fb0e 041c 	mls	r4, lr, ip, r0
 8005670:	b2e3      	uxtb	r3, r4
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005672:	2c09      	cmp	r4, #9
 8005674:	bf84      	itt	hi
 8005676:	4443      	addhi	r3, r8
 8005678:	b2db      	uxtbhi	r3, r3
			str[i++] = d + '0';
 800567a:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 800567c:	4660      	mov	r0, ip
			str[i++] = d + '0';
 800567e:	1c4c      	adds	r4, r1, #1
 8005680:	5473      	strb	r3, [r6, r1]
		} while (v && i < sizeof str / sizeof str[0]);
 8005682:	f1bc 0f00 	cmp.w	ip, #0
 8005686:	d002      	beq.n	800568e <f_printf+0x144>
 8005688:	2c20      	cmp	r4, #32
 800568a:	d142      	bne.n	8005712 <f_printf+0x1c8>
 800568c:	211f      	movs	r1, #31
		if (f & 8) str[i++] = '-';
 800568e:	0710      	lsls	r0, r2, #28
 8005690:	d505      	bpl.n	800569e <f_printf+0x154>
 8005692:	ab1c      	add	r3, sp, #112	; 0x70
 8005694:	441c      	add	r4, r3
 8005696:	232d      	movs	r3, #45	; 0x2d
 8005698:	f804 3c6c 	strb.w	r3, [r4, #-108]
 800569c:	1c8c      	adds	r4, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800569e:	f012 0f01 	tst.w	r2, #1
 80056a2:	bf14      	ite	ne
 80056a4:	f04f 0930 	movne.w	r9, #48	; 0x30
 80056a8:	f04f 0920 	moveq.w	r9, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80056ac:	0793      	lsls	r3, r2, #30
		j = i; d = (f & 1) ? '0' : ' ';
 80056ae:	46a0      	mov	r8, r4
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80056b0:	d536      	bpl.n	8005720 <f_printf+0x1d6>
		do {
			putc_bfd(&pb, str[--i]);
 80056b2:	3c01      	subs	r4, #1
 80056b4:	a809      	add	r0, sp, #36	; 0x24
 80056b6:	5d31      	ldrb	r1, [r6, r4]
 80056b8:	f7ff fd79 	bl	80051ae <putc_bfd>
		} while (i);
 80056bc:	2c00      	cmp	r4, #0
 80056be:	d1f8      	bne.n	80056b2 <f_printf+0x168>
		while (j++ < w) putc_bfd(&pb, d);
 80056c0:	4547      	cmp	r7, r8
 80056c2:	d9b8      	bls.n	8005636 <f_printf+0xec>
 80056c4:	4649      	mov	r1, r9
 80056c6:	a809      	add	r0, sp, #36	; 0x24
 80056c8:	f7ff fd71 	bl	80051ae <putc_bfd>
 80056cc:	f108 0801 	add.w	r8, r8, #1
 80056d0:	e7f6      	b.n	80056c0 <f_printf+0x176>
				while (j++ < w) putc_bfd(&pb, ' ');
 80056d2:	2120      	movs	r1, #32
 80056d4:	a809      	add	r0, sp, #36	; 0x24
 80056d6:	f7ff fd6a 	bl	80051ae <putc_bfd>
 80056da:	e79f      	b.n	800561c <f_printf+0xd2>
			while (*p) putc_bfd(&pb, *p++);
 80056dc:	a809      	add	r0, sp, #36	; 0x24
 80056de:	f7ff fd66 	bl	80051ae <putc_bfd>
 80056e2:	e7a2      	b.n	800562a <f_printf+0xe0>
			while (j++ < w) putc_bfd(&pb, ' ');
 80056e4:	2120      	movs	r1, #32
 80056e6:	a809      	add	r0, sp, #36	; 0x24
 80056e8:	f7ff fd61 	bl	80051ae <putc_bfd>
 80056ec:	3401      	adds	r4, #1
 80056ee:	e7a0      	b.n	8005632 <f_printf+0xe8>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80056f0:	9b00      	ldr	r3, [sp, #0]
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	9200      	str	r2, [sp, #0]
 80056f6:	7819      	ldrb	r1, [r3, #0]
 80056f8:	e73b      	b.n	8005572 <f_printf+0x28>
			r = 16; break;
 80056fa:	f04f 0e10 	mov.w	lr, #16
 80056fe:	e79e      	b.n	800563e <f_printf+0xf4>
			r = 10; break;
 8005700:	f04f 0e0a 	mov.w	lr, #10
 8005704:	e79b      	b.n	800563e <f_printf+0xf4>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005706:	2b44      	cmp	r3, #68	; 0x44
 8005708:	f100 0304 	add.w	r3, r0, #4
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	6800      	ldr	r0, [r0, #0]
 8005710:	e79d      	b.n	800564e <f_printf+0x104>
 8005712:	4621      	mov	r1, r4
 8005714:	e7a8      	b.n	8005668 <f_printf+0x11e>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005716:	4649      	mov	r1, r9
 8005718:	a809      	add	r0, sp, #36	; 0x24
 800571a:	f7ff fd48 	bl	80051ae <putc_bfd>
 800571e:	46d0      	mov	r8, sl
 8005720:	45b8      	cmp	r8, r7
 8005722:	f108 0a01 	add.w	sl, r8, #1
 8005726:	d3f6      	bcc.n	8005716 <f_printf+0x1cc>
 8005728:	46d0      	mov	r8, sl
 800572a:	e7c2      	b.n	80056b2 <f_printf+0x168>
	}

	va_end(arp);

	return putc_flush(&pb);
 800572c:	a809      	add	r0, sp, #36	; 0x24
 800572e:	f7ff fd60 	bl	80051f2 <putc_flush>
}
 8005732:	b01d      	add	sp, #116	; 0x74
 8005734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	b003      	add	sp, #12
 800573a:	4770      	bx	lr

0800573c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800573c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <FATFS_LinkDriverEx+0x40>)
 8005740:	7a5d      	ldrb	r5, [r3, #9]
 8005742:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8005746:	b9b5      	cbnz	r5, 8005776 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005748:	7a5d      	ldrb	r5, [r3, #9]
 800574a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800574c:	7a5d      	ldrb	r5, [r3, #9]
 800574e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005752:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8005754:	7a58      	ldrb	r0, [r3, #9]
 8005756:	4418      	add	r0, r3
 8005758:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800575a:	7a5a      	ldrb	r2, [r3, #9]
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	1c50      	adds	r0, r2, #1
 8005760:	b2c0      	uxtb	r0, r0
 8005762:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8005764:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8005766:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8005768:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800576a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800576c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800576e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8005770:	70cc      	strb	r4, [r1, #3]
 8005772:	4620      	mov	r0, r4
 8005774:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8005776:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8005778:	bd30      	pop	{r4, r5, pc}
 800577a:	bf00      	nop
 800577c:	20000054 	.word	0x20000054

08005780 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	f7ff bfdb 	b.w	800573c <FATFS_LinkDriverEx>

08005786 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8005786:	b513      	push	{r0, r1, r4, lr}

    int ret;

    osSemaphoreDef(SEM);
 8005788:	a802      	add	r0, sp, #8
 800578a:	2300      	movs	r3, #0
{
 800578c:	460c      	mov	r4, r1
    osSemaphoreDef(SEM);
 800578e:	f840 3d04 	str.w	r3, [r0, #-4]!
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005792:	2101      	movs	r1, #1
 8005794:	f000 f84a 	bl	800582c <osSemaphoreCreate>
 8005798:	6020      	str	r0, [r4, #0]
    ret = (*sobj != NULL);

    return ret;
}
 800579a:	3000      	adds	r0, #0
 800579c:	bf18      	it	ne
 800579e:	2001      	movne	r0, #1
 80057a0:	b002      	add	sp, #8
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80057a4:	b508      	push	{r3, lr}
    osSemaphoreDelete (sobj);
 80057a6:	f000 f911 	bl	80059cc <osSemaphoreDelete>
    return 1;
}
 80057aa:	2001      	movs	r0, #1
 80057ac:	bd08      	pop	{r3, pc}

080057ae <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80057ae:	b508      	push	{r3, lr}
  int ret = 0;

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80057b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057b4:	f000 f84e 	bl	8005854 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 80057b8:	fab0 f080 	clz	r0, r0
 80057bc:	0940      	lsrs	r0, r0, #5
 80057be:	bd08      	pop	{r3, pc}

080057c0 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 80057c0:	f000 b870 	b.w	80058a4 <osSemaphoreRelease>

080057c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057c4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80057c6:	f001 f893 	bl	80068f0 <vTaskStartScheduler>
  
  return osOK;
}
 80057ca:	2000      	movs	r0, #0
 80057cc:	bd08      	pop	{r3, pc}

080057ce <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80057ce:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80057d0:	f001 fb2e 	bl	8006e30 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 80057d4:	f110 30ff 	adds.w	r0, r0, #4294967295
 80057d8:	bf18      	it	ne
 80057da:	2001      	movne	r0, #1
 80057dc:	bd08      	pop	{r3, pc}

080057de <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057de:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80057e2:	b10b      	cbz	r3, 80057e8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80057e4:	f001 b8ce 	b.w	8006984 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80057e8:	f001 b8c6 	b.w	8006978 <xTaskGetTickCount>

080057ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057ec:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ee:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80057f2:	8a02      	ldrh	r2, [r0, #16]
{
 80057f4:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057f6:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80057fa:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80057fc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80057fe:	bf14      	ite	ne
 8005800:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005802:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005804:	a803      	add	r0, sp, #12
 8005806:	9001      	str	r0, [sp, #4]
 8005808:	9400      	str	r4, [sp, #0]
 800580a:	4628      	mov	r0, r5
 800580c:	f000 ffa0 	bl	8006750 <xTaskCreate>
 8005810:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005812:	bf0c      	ite	eq
 8005814:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005816:	2000      	movne	r0, #0
}
 8005818:	b005      	add	sp, #20
 800581a:	bd30      	pop	{r4, r5, pc}

0800581c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800581c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800581e:	2800      	cmp	r0, #0
 8005820:	bf08      	it	eq
 8005822:	2001      	moveq	r0, #1
 8005824:	f001 f9c0 	bl	8006ba8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005828:	2000      	movs	r0, #0
 800582a:	bd08      	pop	{r3, pc}

0800582c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800582c:	2901      	cmp	r1, #1
{ 
 800582e:	b510      	push	{r4, lr}
 8005830:	4608      	mov	r0, r1
  if (count == 1) {
 8005832:	d10c      	bne.n	800584e <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8005834:	2203      	movs	r2, #3
 8005836:	2100      	movs	r1, #0
 8005838:	f000 fc4c 	bl	80060d4 <xQueueGenericCreate>
 800583c:	4604      	mov	r4, r0
 800583e:	b120      	cbz	r0, 800584a <osSemaphoreCreate+0x1e>
 8005840:	2300      	movs	r3, #0
 8005842:	461a      	mov	r2, r3
 8005844:	4619      	mov	r1, r3
 8005846:	f000 fc67 	bl	8006118 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800584a:	4620      	mov	r0, r4
 800584c:	bd10      	pop	{r4, pc}
    return NULL;
 800584e:	2400      	movs	r4, #0
 8005850:	e7fb      	b.n	800584a <osSemaphoreCreate+0x1e>
	...

08005854 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005854:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005856:	2400      	movs	r4, #0
{
 8005858:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800585a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800585c:	b1e8      	cbz	r0, 800589a <osSemaphoreWait+0x46>
 800585e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005862:	b1a3      	cbz	r3, 800588e <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005864:	aa01      	add	r2, sp, #4
 8005866:	4621      	mov	r1, r4
 8005868:	f000 fe98 	bl	800659c <xQueueReceiveFromISR>
 800586c:	2801      	cmp	r0, #1
 800586e:	d002      	beq.n	8005876 <osSemaphoreWait+0x22>
      return osErrorOS;
 8005870:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8005872:	b002      	add	sp, #8
 8005874:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	b13b      	cbz	r3, 800588a <osSemaphoreWait+0x36>
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <osSemaphoreWait+0x4c>)
 800587c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	f3bf 8f6f 	isb	sy
  return osOK;
 800588a:	2000      	movs	r0, #0
 800588c:	e7f1      	b.n	8005872 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800588e:	4619      	mov	r1, r3
 8005890:	f000 fdc0 	bl	8006414 <xQueueGenericReceive>
 8005894:	2801      	cmp	r0, #1
 8005896:	d1eb      	bne.n	8005870 <osSemaphoreWait+0x1c>
 8005898:	e7f7      	b.n	800588a <osSemaphoreWait+0x36>
    return osErrorParameter;
 800589a:	2080      	movs	r0, #128	; 0x80
 800589c:	e7e9      	b.n	8005872 <osSemaphoreWait+0x1e>
 800589e:	bf00      	nop
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80058a4:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80058a6:	2400      	movs	r4, #0
 80058a8:	9401      	str	r4, [sp, #4]
 80058aa:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 80058ae:	b193      	cbz	r3, 80058d6 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80058b0:	a901      	add	r1, sp, #4
 80058b2:	f000 fd5b 	bl	800636c <xQueueGiveFromISR>
 80058b6:	2801      	cmp	r0, #1
 80058b8:	d113      	bne.n	80058e2 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058ba:	9b01      	ldr	r3, [sp, #4]
 80058bc:	b913      	cbnz	r3, 80058c4 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 80058be:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 80058c0:	b002      	add	sp, #8
 80058c2:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80058c4:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <osSemaphoreRelease+0x44>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	e7f3      	b.n	80058be <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80058d6:	461a      	mov	r2, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	f000 fc1d 	bl	8006118 <xQueueGenericSend>
 80058de:	2801      	cmp	r0, #1
 80058e0:	d0ed      	beq.n	80058be <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 80058e2:	20ff      	movs	r0, #255	; 0xff
 80058e4:	e7ec      	b.n	80058c0 <osSemaphoreRelease+0x1c>
 80058e6:	bf00      	nop
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80058ec:	2200      	movs	r2, #0
 80058ee:	c803      	ldmia	r0, {r0, r1}
 80058f0:	f000 bbf0 	b.w	80060d4 <xQueueGenericCreate>

080058f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80058f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80058f6:	2400      	movs	r4, #0
{
 80058f8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80058fa:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80058fc:	42a2      	cmp	r2, r4
 80058fe:	bf08      	it	eq
 8005900:	2201      	moveq	r2, #1
 8005902:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8005906:	b1ab      	cbz	r3, 8005934 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005908:	4623      	mov	r3, r4
 800590a:	aa03      	add	r2, sp, #12
 800590c:	a901      	add	r1, sp, #4
 800590e:	f000 fccb 	bl	80062a8 <xQueueGenericSendFromISR>
 8005912:	2801      	cmp	r0, #1
 8005914:	d002      	beq.n	800591c <osMessagePut+0x28>
      return osErrorOS;
 8005916:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8005918:	b004      	add	sp, #16
 800591a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	b13b      	cbz	r3, 8005930 <osMessagePut+0x3c>
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <osMessagePut+0x4c>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
  return osOK;
 8005930:	2000      	movs	r0, #0
 8005932:	e7f1      	b.n	8005918 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005934:	a901      	add	r1, sp, #4
 8005936:	f000 fbef 	bl	8006118 <xQueueGenericSend>
 800593a:	2801      	cmp	r0, #1
 800593c:	d1eb      	bne.n	8005916 <osMessagePut+0x22>
 800593e:	e7f7      	b.n	8005930 <osMessagePut+0x3c>
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005946:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8005948:	2600      	movs	r6, #0
{
 800594a:	4604      	mov	r4, r0
 800594c:	4617      	mov	r7, r2
 800594e:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8005950:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8005952:	9602      	str	r6, [sp, #8]
 8005954:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8005956:	b911      	cbnz	r1, 800595e <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8005958:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	e017      	b.n	800598e <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 800595e:	9600      	str	r6, [sp, #0]
 8005960:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8005964:	b1d3      	cbz	r3, 800599c <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005966:	466a      	mov	r2, sp
 8005968:	a902      	add	r1, sp, #8
 800596a:	f000 fe17 	bl	800659c <xQueueReceiveFromISR>
 800596e:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8005970:	bf04      	itt	eq
 8005972:	2310      	moveq	r3, #16
 8005974:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8005976:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8005978:	bf18      	it	ne
 800597a:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800597c:	b13b      	cbz	r3, 800598e <osMessageGet+0x4a>
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <osMessageGet+0x70>)
 8005980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800598e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005996:	4620      	mov	r0, r4
 8005998:	b005      	add	sp, #20
 800599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800599c:	a902      	add	r1, sp, #8
 800599e:	f000 fd39 	bl	8006414 <xQueueGenericReceive>
 80059a2:	2801      	cmp	r0, #1
 80059a4:	d101      	bne.n	80059aa <osMessageGet+0x66>
      event.status = osEventMessage;
 80059a6:	2310      	movs	r3, #16
 80059a8:	e7d7      	b.n	800595a <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	bf0c      	ite	eq
 80059ae:	2300      	moveq	r3, #0
 80059b0:	2340      	movne	r3, #64	; 0x40
 80059b2:	e7d2      	b.n	800595a <osMessageGet+0x16>
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80059b8:	b510      	push	{r4, lr}
 80059ba:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80059be:	b91c      	cbnz	r4, 80059c8 <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 80059c0:	f000 fe50 	bl	8006664 <vQueueDelete>

  return osOK; 
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80059c8:	2082      	movs	r0, #130	; 0x82
}
 80059ca:	bd10      	pop	{r4, pc}

080059cc <osSemaphoreDelete>:
 80059cc:	f7ff bff4 	b.w	80059b8 <osMessageDelete>

080059d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	f100 0308 	add.w	r3, r0, #8
 80059d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059d6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059da:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059dc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059de:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059e0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059e2:	6003      	str	r3, [r0, #0]
 80059e4:	4770      	bx	lr

080059e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	6103      	str	r3, [r0, #16]
 80059ea:	4770      	bx	lr

080059ec <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80059ec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059f8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80059fa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80059fe:	3301      	adds	r3, #1
 8005a00:	6003      	str	r3, [r0, #0]
 8005a02:	4770      	bx	lr

08005a04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a04:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a06:	1c53      	adds	r3, r2, #1
{
 8005a08:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8005a0a:	d10a      	bne.n	8005a22 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a0c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a12:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a14:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a16:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005a18:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a1a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	6003      	str	r3, [r0, #0]
 8005a20:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a22:	f100 0308 	add.w	r3, r0, #8
 8005a26:	685c      	ldr	r4, [r3, #4]
 8005a28:	6825      	ldr	r5, [r4, #0]
 8005a2a:	42aa      	cmp	r2, r5
 8005a2c:	d3ef      	bcc.n	8005a0e <vListInsert+0xa>
 8005a2e:	4623      	mov	r3, r4
 8005a30:	e7f9      	b.n	8005a26 <vListInsert+0x22>

08005a32 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a32:	6841      	ldr	r1, [r0, #4]
 8005a34:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a36:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a38:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a3a:	6882      	ldr	r2, [r0, #8]
 8005a3c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a42:	bf08      	it	eq
 8005a44:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a46:	2200      	movs	r2, #0
 8005a48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	3801      	subs	r0, #1
 8005a4e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005a50:	4770      	bx	lr
	...

08005a54 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <prvTaskExitError+0x2c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	d008      	beq.n	8005a6e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	e7fe      	b.n	8005a6c <prvTaskExitError+0x18>
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	e7fe      	b.n	8005a7e <prvTaskExitError+0x2a>
 8005a80:	20000004 	.word	0x20000004

08005a84 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005a84:	4806      	ldr	r0, [pc, #24]	; (8005aa0 <prvPortStartFirstTask+0x1c>)
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	6800      	ldr	r0, [r0, #0]
 8005a8a:	f380 8808 	msr	MSP, r0
 8005a8e:	b662      	cpsie	i
 8005a90:	b661      	cpsie	f
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	df00      	svc	0
 8005a9c:	bf00      	nop
 8005a9e:	0000      	.short	0x0000
 8005aa0:	e000ed08 	.word	0xe000ed08

08005aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ab4 <vPortEnableVFP+0x10>
 8005aa8:	6801      	ldr	r1, [r0, #0]
 8005aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aae:	6001      	str	r1, [r0, #0]
 8005ab0:	4770      	bx	lr
 8005ab2:	0000      	.short	0x0000
 8005ab4:	e000ed88 	.word	0xe000ed88

08005ab8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005abc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <pxPortInitialiseStack+0x28>)
 8005ac2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ac6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005aca:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ace:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ad2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005ad6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005ada:	3844      	subs	r0, #68	; 0x44
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	08005a55 	.word	0x08005a55
	...

08005af0 <SVC_Handler>:
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	20003c80 	.word	0x20003c80

08005b14 <vPortEnterCritical>:
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005b24:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <vPortEnterCritical+0x3c>)
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005b2a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005b2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005b2e:	d10d      	bne.n	8005b4c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b30:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <vPortEnterCritical+0x40>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b38:	d008      	beq.n	8005b4c <vPortEnterCritical+0x38>
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	e7fe      	b.n	8005b4a <vPortEnterCritical+0x36>
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000004 	.word	0x20000004
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <vPortExitCritical+0x24>)
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	b943      	cbnz	r3, 8005b70 <vPortExitCritical+0x18>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	e7fe      	b.n	8005b6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005b70:	3b01      	subs	r3, #1
 8005b72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b74:	b90b      	cbnz	r3, 8005b7a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	4770      	bx	lr
 8005b7c:	20000004 	.word	0x20000004

08005b80 <PendSV_Handler>:
	__asm volatile
 8005b80:	f3ef 8009 	mrs	r0, PSP
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <pxCurrentTCBConst>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f01e 0f10 	tst.w	lr, #16
 8005b90:	bf08      	it	eq
 8005b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ba4:	f380 8811 	msr	BASEPRI, r0
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f001 f858 	bl	8006c64 <vTaskSwitchContext>
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f380 8811 	msr	BASEPRI, r0
 8005bbc:	bc08      	pop	{r3}
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc6:	f01e 0f10 	tst.w	lr, #16
 8005bca:	bf08      	it	eq
 8005bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bd0:	f380 8809 	msr	PSP, r0
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	f3af 8000 	nop.w

08005be0 <pxCurrentTCBConst>:
 8005be0:	20003c80 	.word	0x20003c80

08005be4 <SysTick_Handler>:
{
 8005be4:	b508      	push	{r3, lr}
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005bf6:	f000 fecd 	bl	8006994 <xTaskIncrementTick>
 8005bfa:	b118      	cbz	r0, 8005c04 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <SysTick_Handler+0x28>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005c04:	2300      	movs	r3, #0
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	bd08      	pop	{r3, pc}
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <vPortSetupTimerInterrupt+0x1c>)
 8005c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <vPortSetupTimerInterrupt+0x20>)
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <vPortSetupTimerInterrupt+0x24>)
 8005c24:	2207      	movs	r2, #7
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000000c 	.word	0x2000000c
 8005c30:	e000e014 	.word	0xe000e014
 8005c34:	e000e010 	.word	0xe000e010

08005c38 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <xPortStartScheduler+0xc8>)
 8005c3a:	4a32      	ldr	r2, [pc, #200]	; (8005d04 <xPortStartScheduler+0xcc>)
{
 8005c3c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	4291      	cmp	r1, r2
 8005c42:	d108      	bne.n	8005c56 <xPortStartScheduler+0x1e>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <xPortStartScheduler+0xd0>)
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d108      	bne.n	8005c70 <xPortStartScheduler+0x38>
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	e7fe      	b.n	8005c6e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c70:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <xPortStartScheduler+0xd4>)
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c78:	22ff      	movs	r2, #255	; 0xff
 8005c7a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c7c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c7e:	4a24      	ldr	r2, [pc, #144]	; (8005d10 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005c8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c8e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c90:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <xPortStartScheduler+0xdc>)
 8005c92:	2207      	movs	r2, #7
 8005c94:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c96:	2100      	movs	r1, #0
 8005c98:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005c9c:	0600      	lsls	r0, r0, #24
 8005c9e:	f102 34ff 	add.w	r4, r2, #4294967295
 8005ca2:	d423      	bmi.n	8005cec <xPortStartScheduler+0xb4>
 8005ca4:	b101      	cbz	r1, 8005ca8 <xPortStartScheduler+0x70>
 8005ca6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005cb0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cb2:	9b01      	ldr	r3, [sp, #4]
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <xPortStartScheduler+0xd4>)
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cba:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <xPortStartScheduler+0xe0>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005cc2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005cca:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005ccc:	f7ff ffa0 	bl	8005c10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <xPortStartScheduler+0xe4>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8005cd6:	f7ff fee5 	bl	8005aa4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cda:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <xPortStartScheduler+0xe8>)
 8005cdc:	6813      	ldr	r3, [r2, #0]
 8005cde:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ce2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005ce4:	f7ff fece 	bl	8005a84 <prvPortStartFirstTask>
	prvTaskExitError();
 8005ce8:	f7ff feb4 	bl	8005a54 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005cf0:	0052      	lsls	r2, r2, #1
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	f88d 2003 	strb.w	r2, [sp, #3]
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	e7cc      	b.n	8005c98 <xPortStartScheduler+0x60>
 8005cfe:	bf00      	nop
 8005d00:	e000ed00 	.word	0xe000ed00
 8005d04:	410fc271 	.word	0x410fc271
 8005d08:	410fc270 	.word	0x410fc270
 8005d0c:	e000e400 	.word	0xe000e400
 8005d10:	20000060 	.word	0x20000060
 8005d14:	20000064 	.word	0x20000064
 8005d18:	e000ed20 	.word	0xe000ed20
 8005d1c:	20000004 	.word	0x20000004
 8005d20:	e000ef34 	.word	0xe000ef34

08005d24 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8005d24:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d28:	2b0f      	cmp	r3, #15
 8005d2a:	d90e      	bls.n	8005d4a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d2c:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <vPortValidateInterruptPriority+0x4c>)
 8005d2e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d30:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <vPortValidateInterruptPriority+0x50>)
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d908      	bls.n	8005d4a <vPortValidateInterruptPriority+0x26>
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	e7fe      	b.n	8005d48 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <vPortValidateInterruptPriority+0x54>)
 8005d4c:	4a0b      	ldr	r2, [pc, #44]	; (8005d7c <vPortValidateInterruptPriority+0x58>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d908      	bls.n	8005d6c <vPortValidateInterruptPriority+0x48>
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	e7fe      	b.n	8005d6a <vPortValidateInterruptPriority+0x46>
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000e3f0 	.word	0xe000e3f0
 8005d74:	20000060 	.word	0x20000060
 8005d78:	e000ed0c 	.word	0xe000ed0c
 8005d7c:	20000064 	.word	0x20000064

08005d80 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d80:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <prvInsertBlockIntoFreeList+0x40>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4282      	cmp	r2, r0
 8005d88:	d318      	bcc.n	8005dbc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d8a:	685c      	ldr	r4, [r3, #4]
 8005d8c:	1919      	adds	r1, r3, r4
 8005d8e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d90:	bf01      	itttt	eq
 8005d92:	6841      	ldreq	r1, [r0, #4]
 8005d94:	4618      	moveq	r0, r3
 8005d96:	1909      	addeq	r1, r1, r4
 8005d98:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d9a:	6844      	ldr	r4, [r0, #4]
 8005d9c:	1901      	adds	r1, r0, r4
 8005d9e:	428a      	cmp	r2, r1
 8005da0:	d107      	bne.n	8005db2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005da2:	4908      	ldr	r1, [pc, #32]	; (8005dc4 <prvInsertBlockIntoFreeList+0x44>)
 8005da4:	6809      	ldr	r1, [r1, #0]
 8005da6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005da8:	bf1f      	itttt	ne
 8005daa:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dac:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dae:	1909      	addne	r1, r1, r4
 8005db0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005db2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005db4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005db6:	bf18      	it	ne
 8005db8:	6018      	strne	r0, [r3, #0]
 8005dba:	bd10      	pop	{r4, pc}
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	e7e1      	b.n	8005d84 <prvInsertBlockIntoFreeList+0x4>
 8005dc0:	20003c78 	.word	0x20003c78
 8005dc4:	20000068 	.word	0x20000068

08005dc8 <pvPortMalloc>:
{
 8005dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dcc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005dce:	f000 fdcb 	bl	8006968 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005dd2:	493e      	ldr	r1, [pc, #248]	; (8005ecc <pvPortMalloc+0x104>)
 8005dd4:	4d3e      	ldr	r5, [pc, #248]	; (8005ed0 <pvPortMalloc+0x108>)
 8005dd6:	680b      	ldr	r3, [r1, #0]
 8005dd8:	bb0b      	cbnz	r3, 8005e1e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8005dda:	4a3e      	ldr	r2, [pc, #248]	; (8005ed4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ddc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dde:	bf1f      	itttt	ne
 8005de0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005de6:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8005dea:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dec:	bf14      	ite	ne
 8005dee:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005df0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005df4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005df6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dfc:	4e36      	ldr	r6, [pc, #216]	; (8005ed8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8005dfe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e00:	2000      	movs	r0, #0
 8005e02:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e04:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8005e06:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e08:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e0a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e0c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e0e:	4b33      	ldr	r3, [pc, #204]	; (8005edc <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e10:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e12:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	4b32      	ldr	r3, [pc, #200]	; (8005ee0 <pvPortMalloc+0x118>)
 8005e16:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e1c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e1e:	682f      	ldr	r7, [r5, #0]
 8005e20:	4227      	tst	r7, r4
 8005e22:	d116      	bne.n	8005e52 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8005e24:	2c00      	cmp	r4, #0
 8005e26:	d041      	beq.n	8005eac <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8005e28:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e2c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e2e:	bf1c      	itt	ne
 8005e30:	f023 0307 	bicne.w	r3, r3, #7
 8005e34:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e36:	b163      	cbz	r3, 8005e52 <pvPortMalloc+0x8a>
 8005e38:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <pvPortMalloc+0x118>)
 8005e3a:	6816      	ldr	r6, [r2, #0]
 8005e3c:	42b3      	cmp	r3, r6
 8005e3e:	4690      	mov	r8, r2
 8005e40:	d807      	bhi.n	8005e52 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8005e42:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <pvPortMalloc+0x110>)
 8005e44:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e46:	6868      	ldr	r0, [r5, #4]
 8005e48:	4283      	cmp	r3, r0
 8005e4a:	d804      	bhi.n	8005e56 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8005e4c:	6809      	ldr	r1, [r1, #0]
 8005e4e:	428d      	cmp	r5, r1
 8005e50:	d107      	bne.n	8005e62 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8005e52:	2400      	movs	r4, #0
 8005e54:	e02a      	b.n	8005eac <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e56:	682c      	ldr	r4, [r5, #0]
 8005e58:	2c00      	cmp	r4, #0
 8005e5a:	d0f7      	beq.n	8005e4c <pvPortMalloc+0x84>
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4625      	mov	r5, r4
 8005e60:	e7f1      	b.n	8005e46 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e62:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e64:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e66:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e68:	1ac2      	subs	r2, r0, r3
 8005e6a:	2a10      	cmp	r2, #16
 8005e6c:	d90f      	bls.n	8005e8e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e6e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e70:	0741      	lsls	r1, r0, #29
 8005e72:	d008      	beq.n	8005e86 <pvPortMalloc+0xbe>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	e7fe      	b.n	8005e84 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e86:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e88:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e8a:	f7ff ff79 	bl	8005d80 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e8e:	4913      	ldr	r1, [pc, #76]	; (8005edc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e90:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e92:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e94:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e96:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e98:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8005e9a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e9e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ea2:	bf38      	it	cc
 8005ea4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ea6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ea8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005eaa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005eac:	f000 fe04 	bl	8006ab8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb0:	0763      	lsls	r3, r4, #29
 8005eb2:	d008      	beq.n	8005ec6 <pvPortMalloc+0xfe>
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	e7fe      	b.n	8005ec4 <pvPortMalloc+0xfc>
}
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	20000068 	.word	0x20000068
 8005ed0:	20003c6c 	.word	0x20003c6c
 8005ed4:	2000006c 	.word	0x2000006c
 8005ed8:	20003c78 	.word	0x20003c78
 8005edc:	20003c74 	.word	0x20003c74
 8005ee0:	20003c70 	.word	0x20003c70

08005ee4 <vPortFree>:
{
 8005ee4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	b370      	cbz	r0, 8005f48 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <vPortFree+0x68>)
 8005eec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005ef0:	6812      	ldr	r2, [r2, #0]
 8005ef2:	4213      	tst	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <vPortFree+0x24>
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	e7fe      	b.n	8005f06 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f08:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005f0c:	b141      	cbz	r1, 8005f20 <vPortFree+0x3c>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	e7fe      	b.n	8005f1e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f20:	ea23 0302 	bic.w	r3, r3, r2
 8005f24:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005f28:	f000 fd1e 	bl	8006968 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <vPortFree+0x6c>)
 8005f2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005f32:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f34:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f38:	440b      	add	r3, r1
 8005f3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f3c:	f7ff ff20 	bl	8005d80 <prvInsertBlockIntoFreeList>
}
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005f44:	f000 bdb8 	b.w	8006ab8 <xTaskResumeAll>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20003c6c 	.word	0x20003c6c
 8005f50:	20003c70 	.word	0x20003c70

08005f54 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f58:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f5a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8005f5c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f5e:	b942      	cbnz	r2, 8005f72 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f60:	6805      	ldr	r5, [r0, #0]
 8005f62:	b99d      	cbnz	r5, 8005f8c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f64:	6840      	ldr	r0, [r0, #4]
 8005f66:	f000 ffb9 	bl	8006edc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005f6a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005f72:	b96d      	cbnz	r5, 8005f90 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f74:	6880      	ldr	r0, [r0, #8]
 8005f76:	f001 ffed 	bl	8007f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f7a:	68a3      	ldr	r3, [r4, #8]
 8005f7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f7e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f80:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f82:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d301      	bcc.n	8005f8c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7ed      	b.n	8005f6c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f90:	68c0      	ldr	r0, [r0, #12]
 8005f92:	f001 ffdf 	bl	8007f54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f98:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f9a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f9c:	425b      	negs	r3, r3
 8005f9e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa0:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005fa2:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005fa4:	bf3e      	ittt	cc
 8005fa6:	6862      	ldrcc	r2, [r4, #4]
 8005fa8:	189b      	addcc	r3, r3, r2
 8005faa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005fac:	2d02      	cmp	r5, #2
 8005fae:	d1ed      	bne.n	8005f8c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fb0:	b10e      	cbz	r6, 8005fb6 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8005fb2:	3e01      	subs	r6, #1
 8005fb4:	e7ea      	b.n	8005f8c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	e7d8      	b.n	8005f6c <prvCopyDataToQueue+0x18>

08005fba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fba:	4603      	mov	r3, r0
 8005fbc:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005fc0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fc2:	b162      	cbz	r2, 8005fde <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fc4:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fc6:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fc8:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fca:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fcc:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005fce:	bf24      	itt	cs
 8005fd0:	6819      	ldrcs	r1, [r3, #0]
 8005fd2:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fd4:	68d9      	ldr	r1, [r3, #12]
	}
}
 8005fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fda:	f001 bfbb 	b.w	8007f54 <memcpy>
}
 8005fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fe8:	f7ff fd94 	bl	8005b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005ff4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	dc14      	bgt.n	8006024 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ffa:	23ff      	movs	r3, #255	; 0xff
 8005ffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006000:	f7ff fdaa 	bl	8005b58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006004:	f7ff fd86 	bl	8005b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006008:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006010:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006012:	2d00      	cmp	r5, #0
 8006014:	dc12      	bgt.n	800603c <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006016:	23ff      	movs	r3, #255	; 0xff
 8006018:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800601c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006020:	f7ff bd9a 	b.w	8005b58 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0e7      	beq.n	8005ffa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602a:	4630      	mov	r0, r6
 800602c:	f000 fe6e 	bl	8006d0c <xTaskRemoveFromEventList>
 8006030:	b108      	cbz	r0, 8006036 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006032:	f000 fef7 	bl	8006e24 <vTaskMissedYield>
 8006036:	3d01      	subs	r5, #1
 8006038:	b26d      	sxtb	r5, r5
 800603a:	e7dc      	b.n	8005ff6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0e9      	beq.n	8006016 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006042:	4630      	mov	r0, r6
 8006044:	f000 fe62 	bl	8006d0c <xTaskRemoveFromEventList>
 8006048:	b108      	cbz	r0, 800604e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800604a:	f000 feeb 	bl	8006e24 <vTaskMissedYield>
 800604e:	3d01      	subs	r5, #1
 8006050:	b26d      	sxtb	r5, r5
 8006052:	e7de      	b.n	8006012 <prvUnlockQueue+0x2e>

08006054 <xQueueGenericReset>:
{
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006058:	4604      	mov	r4, r0
 800605a:	b940      	cbnz	r0, 800606e <xQueueGenericReset+0x1a>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	e7fe      	b.n	800606c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800606e:	f7ff fd51 	bl	8005b14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006072:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006074:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006076:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006078:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800607a:	4343      	muls	r3, r0
 800607c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800607e:	1a1b      	subs	r3, r3, r0
 8006080:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006082:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006084:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006086:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8006088:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800608a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800608c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006094:	b995      	cbnz	r5, 80060bc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	b163      	cbz	r3, 80060b4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	f104 0010 	add.w	r0, r4, #16
 800609e:	f000 fe35 	bl	8006d0c <xTaskRemoveFromEventList>
 80060a2:	b138      	cbz	r0, 80060b4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <xQueueGenericReset+0x7c>)
 80060a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80060b4:	f7ff fd50 	bl	8005b58 <vPortExitCritical>
}
 80060b8:	2001      	movs	r0, #1
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060bc:	f104 0010 	add.w	r0, r4, #16
 80060c0:	f7ff fc86 	bl	80059d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80060c8:	f7ff fc82 	bl	80059d0 <vListInitialise>
 80060cc:	e7f2      	b.n	80060b4 <xQueueGenericReset+0x60>
 80060ce:	bf00      	nop
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <xQueueGenericCreate>:
	{
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060d8:	4606      	mov	r6, r0
 80060da:	b940      	cbnz	r0, 80060ee <xQueueGenericCreate+0x1a>
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	e7fe      	b.n	80060ec <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ee:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80060f0:	3048      	adds	r0, #72	; 0x48
 80060f2:	f7ff fe69 	bl	8005dc8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80060f6:	4604      	mov	r4, r0
 80060f8:	b138      	cbz	r0, 800610a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80060fa:	b945      	cbnz	r5, 800610e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060fc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80060fe:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006100:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006102:	2101      	movs	r1, #1
 8006104:	4620      	mov	r0, r4
 8006106:	f7ff ffa5 	bl	8006054 <xQueueGenericReset>
	}
 800610a:	4620      	mov	r0, r4
 800610c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800610e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006112:	6003      	str	r3, [r0, #0]
 8006114:	e7f3      	b.n	80060fe <xQueueGenericCreate+0x2a>
	...

08006118 <xQueueGenericSend>:
{
 8006118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	4689      	mov	r9, r1
 800611e:	9201      	str	r2, [sp, #4]
 8006120:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006122:	4604      	mov	r4, r0
 8006124:	b940      	cbnz	r0, 8006138 <xQueueGenericSend+0x20>
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	e7fe      	b.n	8006136 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006138:	2900      	cmp	r1, #0
 800613a:	f040 8088 	bne.w	800624e <xQueueGenericSend+0x136>
 800613e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8084 	beq.w	800624e <xQueueGenericSend+0x136>
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	e7fe      	b.n	8006156 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006158:	9e01      	ldr	r6, [sp, #4]
 800615a:	2e00      	cmp	r6, #0
 800615c:	f000 8082 	beq.w	8006264 <xQueueGenericSend+0x14c>
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	e7fe      	b.n	8006170 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006172:	9d01      	ldr	r5, [sp, #4]
 8006174:	b91d      	cbnz	r5, 800617e <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8006176:	f7ff fcef 	bl	8005b58 <vPortExitCritical>
			return errQUEUE_FULL;
 800617a:	2000      	movs	r0, #0
 800617c:	e058      	b.n	8006230 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 800617e:	b916      	cbnz	r6, 8006186 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8006180:	a802      	add	r0, sp, #8
 8006182:	f000 fe05 	bl	8006d90 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8006186:	f7ff fce7 	bl	8005b58 <vPortExitCritical>
		vTaskSuspendAll();
 800618a:	f000 fbed 	bl	8006968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618e:	f7ff fcc1 	bl	8005b14 <vPortEnterCritical>
 8006192:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006196:	2bff      	cmp	r3, #255	; 0xff
 8006198:	bf08      	it	eq
 800619a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800619e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	bf08      	it	eq
 80061a6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80061aa:	f7ff fcd5 	bl	8005b58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ae:	a901      	add	r1, sp, #4
 80061b0:	a802      	add	r0, sp, #8
 80061b2:	f000 fdfd 	bl	8006db0 <xTaskCheckForTimeOut>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d143      	bne.n	8006242 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061ba:	f7ff fcab 	bl	8005b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061be:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80061c0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80061c2:	f7ff fcc9 	bl	8005b58 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061c6:	42ae      	cmp	r6, r5
 80061c8:	d135      	bne.n	8006236 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ca:	9901      	ldr	r1, [sp, #4]
 80061cc:	f104 0010 	add.w	r0, r4, #16
 80061d0:	f000 fd82 	bl	8006cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7ff ff05 	bl	8005fe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061da:	f000 fc6d 	bl	8006ab8 <xTaskResumeAll>
 80061de:	b938      	cbnz	r0, 80061f0 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80061e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061e4:	f8ca 3000 	str.w	r3, [sl]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80061f2:	f7ff fc8f 	bl	8005b14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d301      	bcc.n	8006202 <xQueueGenericSend+0xea>
 80061fe:	2f02      	cmp	r7, #2
 8006200:	d1b7      	bne.n	8006172 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006202:	463a      	mov	r2, r7
 8006204:	4649      	mov	r1, r9
 8006206:	4620      	mov	r0, r4
 8006208:	f7ff fea4 	bl	8005f54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800620c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800620e:	b11b      	cbz	r3, 8006218 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006210:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006214:	f000 fd7a 	bl	8006d0c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006218:	b138      	cbz	r0, 800622a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800621a:	4b19      	ldr	r3, [pc, #100]	; (8006280 <xQueueGenericSend+0x168>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800622a:	f7ff fc95 	bl	8005b58 <vPortExitCritical>
				return pdPASS;
 800622e:	2001      	movs	r0, #1
}
 8006230:	b004      	add	sp, #16
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fed4 	bl	8005fe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800623c:	f000 fc3c 	bl	8006ab8 <xTaskResumeAll>
 8006240:	e7d6      	b.n	80061f0 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8006242:	4620      	mov	r0, r4
 8006244:	f7ff fece 	bl	8005fe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006248:	f000 fc36 	bl	8006ab8 <xTaskResumeAll>
 800624c:	e795      	b.n	800617a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800624e:	2f02      	cmp	r7, #2
 8006250:	d102      	bne.n	8006258 <xQueueGenericSend+0x140>
 8006252:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10a      	bne.n	800626e <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006258:	f000 fdea 	bl	8006e30 <xTaskGetSchedulerState>
 800625c:	2800      	cmp	r0, #0
 800625e:	f43f af7b 	beq.w	8006158 <xQueueGenericSend+0x40>
 8006262:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006264:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8006268:	f8df a014 	ldr.w	sl, [pc, #20]	; 8006280 <xQueueGenericSend+0x168>
 800626c:	e7c1      	b.n	80061f2 <xQueueGenericSend+0xda>
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	e7fe      	b.n	800627e <xQueueGenericSend+0x166>
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <xQueueCreateMutex>:
	{
 8006284:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006286:	4602      	mov	r2, r0
 8006288:	2100      	movs	r1, #0
 800628a:	2001      	movs	r0, #1
 800628c:	f7ff ff22 	bl	80060d4 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8006290:	4604      	mov	r4, r0
 8006292:	b138      	cbz	r0, 80062a4 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006298:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800629a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800629c:	461a      	mov	r2, r3
 800629e:	4619      	mov	r1, r3
 80062a0:	f7ff ff3a 	bl	8006118 <xQueueGenericSend>
	}
 80062a4:	4620      	mov	r0, r4
 80062a6:	bd10      	pop	{r4, pc}

080062a8 <xQueueGenericSendFromISR>:
{
 80062a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ac:	4688      	mov	r8, r1
 80062ae:	4691      	mov	r9, r2
 80062b0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80062b2:	4604      	mov	r4, r0
 80062b4:	b940      	cbnz	r0, 80062c8 <xQueueGenericSendFromISR+0x20>
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	e7fe      	b.n	80062c6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062c8:	bb09      	cbnz	r1, 800630e <xQueueGenericSendFromISR+0x66>
 80062ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80062cc:	b1fb      	cbz	r3, 800630e <xQueueGenericSendFromISR+0x66>
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	e7fe      	b.n	80062de <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062e4:	f000 fd12 	bl	8006d0c <xTaskRemoveFromEventList>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d034      	beq.n	8006356 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80062ec:	f1b9 0f00 	cmp.w	r9, #0
 80062f0:	d031      	beq.n	8006356 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062f2:	2001      	movs	r0, #1
 80062f4:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80062f8:	f386 8811 	msr	BASEPRI, r6
}
 80062fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006300:	3501      	adds	r5, #1
 8006302:	b26d      	sxtb	r5, r5
 8006304:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006308:	e025      	b.n	8006356 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800630a:	2000      	movs	r0, #0
 800630c:	e7f4      	b.n	80062f8 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800630e:	2f02      	cmp	r7, #2
 8006310:	d102      	bne.n	8006318 <xQueueGenericSendFromISR+0x70>
 8006312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d120      	bne.n	800635a <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006318:	f7ff fd04 	bl	8005d24 <vPortValidateInterruptPriority>
	__asm volatile
 800631c:	f3ef 8611 	mrs	r6, BASEPRI
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006330:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006332:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006334:	429a      	cmp	r2, r3
 8006336:	d301      	bcc.n	800633c <xQueueGenericSendFromISR+0x94>
 8006338:	2f02      	cmp	r7, #2
 800633a:	d1e6      	bne.n	800630a <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 800633c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006340:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8006342:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006344:	4641      	mov	r1, r8
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fe04 	bl	8005f54 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800634c:	1c6b      	adds	r3, r5, #1
 800634e:	d1d7      	bne.n	8006300 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1c4      	bne.n	80062e0 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8006356:	2001      	movs	r0, #1
 8006358:	e7ce      	b.n	80062f8 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	e7fe      	b.n	800636a <xQueueGenericSendFromISR+0xc2>

0800636c <xQueueGiveFromISR>:
{
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006370:	4604      	mov	r4, r0
 8006372:	b940      	cbnz	r0, 8006386 <xQueueGiveFromISR+0x1a>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	e7fe      	b.n	8006384 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006386:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006388:	b143      	cbz	r3, 800639c <xQueueGiveFromISR+0x30>
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	e7fe      	b.n	800639a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	b90b      	cbnz	r3, 80063a4 <xQueueGiveFromISR+0x38>
 80063a0:	6843      	ldr	r3, [r0, #4]
 80063a2:	bb73      	cbnz	r3, 8006402 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063a4:	f7ff fcbe 	bl	8005d24 <vPortValidateInterruptPriority>
	__asm volatile
 80063a8:	f3ef 8611 	mrs	r6, BASEPRI
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80063be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d301      	bcc.n	80063c8 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 80063c4:	2000      	movs	r0, #0
 80063c6:	e014      	b.n	80063f2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 80063c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80063cc:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80063ce:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80063d0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	d110      	bne.n	80063f8 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d8:	b90b      	cbnz	r3, 80063de <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 80063da:	2001      	movs	r0, #1
 80063dc:	e009      	b.n	80063f2 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80063e2:	f000 fc93 	bl	8006d0c <xTaskRemoveFromEventList>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d0f7      	beq.n	80063da <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	d0f5      	beq.n	80063da <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063ee:	2001      	movs	r0, #1
 80063f0:	6028      	str	r0, [r5, #0]
	__asm volatile
 80063f2:	f386 8811 	msr	BASEPRI, r6
}
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063f8:	3301      	adds	r3, #1
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006400:	e7eb      	b.n	80063da <xQueueGiveFromISR+0x6e>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	e7fe      	b.n	8006412 <xQueueGiveFromISR+0xa6>

08006414 <xQueueGenericReceive>:
{
 8006414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	4688      	mov	r8, r1
 800641a:	9201      	str	r2, [sp, #4]
 800641c:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800641e:	4604      	mov	r4, r0
 8006420:	b940      	cbnz	r0, 8006434 <xQueueGenericReceive+0x20>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	e7fe      	b.n	8006432 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006434:	2900      	cmp	r1, #0
 8006436:	f040 80a5 	bne.w	8006584 <xQueueGenericReceive+0x170>
 800643a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80a1 	beq.w	8006584 <xQueueGenericReceive+0x170>
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	e7fe      	b.n	8006452 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006454:	9e01      	ldr	r6, [sp, #4]
 8006456:	2e00      	cmp	r6, #0
 8006458:	f000 809a 	beq.w	8006590 <xQueueGenericReceive+0x17c>
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	e7fe      	b.n	800646c <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800646e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006470:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006472:	2b00      	cmp	r3, #0
 8006474:	d06d      	beq.n	8006552 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006476:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800647a:	e05f      	b.n	800653c <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 800647c:	9d01      	ldr	r5, [sp, #4]
 800647e:	b91d      	cbnz	r5, 8006488 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8006480:	f7ff fb6a 	bl	8005b58 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006484:	4628      	mov	r0, r5
 8006486:	e067      	b.n	8006558 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8006488:	b916      	cbnz	r6, 8006490 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 800648a:	a802      	add	r0, sp, #8
 800648c:	f000 fc80 	bl	8006d90 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8006490:	f7ff fb62 	bl	8005b58 <vPortExitCritical>
		vTaskSuspendAll();
 8006494:	f000 fa68 	bl	8006968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006498:	f7ff fb3c 	bl	8005b14 <vPortEnterCritical>
 800649c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064a0:	2bff      	cmp	r3, #255	; 0xff
 80064a2:	bf08      	it	eq
 80064a4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80064a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064ac:	2bff      	cmp	r3, #255	; 0xff
 80064ae:	bf08      	it	eq
 80064b0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80064b4:	f7ff fb50 	bl	8005b58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b8:	a901      	add	r1, sp, #4
 80064ba:	a802      	add	r0, sp, #8
 80064bc:	f000 fc78 	bl	8006db0 <xTaskCheckForTimeOut>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d152      	bne.n	800656a <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80064c4:	f7ff fb26 	bl	8005b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80064ca:	f7ff fb45 	bl	8005b58 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	d145      	bne.n	800655e <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	b933      	cbnz	r3, 80064e4 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80064d6:	f7ff fb1d 	bl	8005b14 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80064da:	6860      	ldr	r0, [r4, #4]
 80064dc:	f000 fcb8 	bl	8006e50 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80064e0:	f7ff fb3a 	bl	8005b58 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064e4:	9901      	ldr	r1, [sp, #4]
 80064e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064ea:	f000 fbf5 	bl	8006cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff fd78 	bl	8005fe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064f4:	f000 fae0 	bl	8006ab8 <xTaskResumeAll>
 80064f8:	b938      	cbnz	r0, 800650a <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80064fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064fe:	f8ca 3000 	str.w	r3, [sl]
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800650c:	f7ff fb02 	bl	8005b14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006510:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006512:	2d00      	cmp	r5, #0
 8006514:	d0b2      	beq.n	800647c <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006516:	4641      	mov	r1, r8
 8006518:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800651a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800651c:	f7ff fd4d 	bl	8005fba <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	d1a3      	bne.n	800646e <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006526:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006528:	3d01      	subs	r5, #1
 800652a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800652c:	b913      	cbnz	r3, 8006534 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800652e:	f000 fd25 	bl	8006f7c <pvTaskIncrementMutexHeldCount>
 8006532:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006534:	6923      	ldr	r3, [r4, #16]
 8006536:	b163      	cbz	r3, 8006552 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006538:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800653c:	f000 fbe6 	bl	8006d0c <xTaskRemoveFromEventList>
 8006540:	b138      	cbz	r0, 8006552 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <xQueueGenericReceive+0x184>)
 8006544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006552:	f7ff fb01 	bl	8005b58 <vPortExitCritical>
				return pdPASS;
 8006556:	2001      	movs	r0, #1
}
 8006558:	b004      	add	sp, #16
 800655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff fd40 	bl	8005fe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006564:	f000 faa8 	bl	8006ab8 <xTaskResumeAll>
 8006568:	e7cf      	b.n	800650a <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff fd3a 	bl	8005fe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006570:	f000 faa2 	bl	8006ab8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006574:	f7ff face 	bl	8005b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006578:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800657a:	f7ff faed 	bl	8005b58 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800657e:	2d00      	cmp	r5, #0
 8006580:	d1c3      	bne.n	800650a <xQueueGenericReceive+0xf6>
 8006582:	e77f      	b.n	8006484 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006584:	f000 fc54 	bl	8006e30 <xTaskGetSchedulerState>
 8006588:	2800      	cmp	r0, #0
 800658a:	f43f af63 	beq.w	8006454 <xQueueGenericReceive+0x40>
 800658e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006590:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006592:	f8df a004 	ldr.w	sl, [pc, #4]	; 8006598 <xQueueGenericReceive+0x184>
 8006596:	e7b9      	b.n	800650c <xQueueGenericReceive+0xf8>
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <xQueueReceiveFromISR>:
{
 800659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4689      	mov	r9, r1
 80065a2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80065a4:	4605      	mov	r5, r0
 80065a6:	b940      	cbnz	r0, 80065ba <xQueueReceiveFromISR+0x1e>
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	e7fe      	b.n	80065b8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ba:	bb71      	cbnz	r1, 800661a <xQueueReceiveFromISR+0x7e>
 80065bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80065be:	b363      	cbz	r3, 800661a <xQueueReceiveFromISR+0x7e>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	e7fe      	b.n	80065d0 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 80065d2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065d6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80065d8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065da:	4628      	mov	r0, r5
 80065dc:	f7ff fced 	bl	8005fba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80065e0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80065e2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80065e4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80065e6:	d113      	bne.n	8006610 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065e8:	692b      	ldr	r3, [r5, #16]
 80065ea:	b90b      	cbnz	r3, 80065f0 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 80065ec:	2001      	movs	r0, #1
 80065ee:	e00b      	b.n	8006608 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f0:	f105 0010 	add.w	r0, r5, #16
 80065f4:	f000 fb8a 	bl	8006d0c <xTaskRemoveFromEventList>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0f7      	beq.n	80065ec <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 80065fc:	f1b8 0f00 	cmp.w	r8, #0
 8006600:	d0f4      	beq.n	80065ec <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006602:	2001      	movs	r0, #1
 8006604:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8006608:	f387 8811 	msr	BASEPRI, r7
}
 800660c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006610:	3601      	adds	r6, #1
 8006612:	b276      	sxtb	r6, r6
 8006614:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8006618:	e7e8      	b.n	80065ec <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800661a:	f7ff fb83 	bl	8005d24 <vPortValidateInterruptPriority>
	__asm volatile
 800661e:	f3ef 8711 	mrs	r7, BASEPRI
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006632:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006634:	2c00      	cmp	r4, #0
 8006636:	d1cc      	bne.n	80065d2 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8006638:	4620      	mov	r0, r4
 800663a:	e7e5      	b.n	8006608 <xQueueReceiveFromISR+0x6c>

0800663c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800663c:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800663e:	4a08      	ldr	r2, [pc, #32]	; (8006660 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006640:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006642:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006646:	684c      	ldr	r4, [r1, #4]
 8006648:	4284      	cmp	r4, r0
 800664a:	d104      	bne.n	8006656 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800664c:	2000      	movs	r0, #0
 800664e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006652:	6048      	str	r0, [r1, #4]
				break;
 8006654:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006656:	3301      	adds	r3, #1
 8006658:	2b08      	cmp	r3, #8
 800665a:	d1f2      	bne.n	8006642 <vQueueUnregisterQueue+0x6>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	20003e80 	.word	0x20003e80

08006664 <vQueueDelete>:
{
 8006664:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8006666:	4604      	mov	r4, r0
 8006668:	b940      	cbnz	r0, 800667c <vQueueDelete+0x18>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	e7fe      	b.n	800667a <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800667c:	f7ff ffde 	bl	800663c <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8006680:	4620      	mov	r0, r4
}
 8006682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8006686:	f7ff bc2d 	b.w	8005ee4 <vPortFree>
	...

0800668c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668c:	4a06      	ldr	r2, [pc, #24]	; (80066a8 <prvResetNextTaskUnblockTime+0x1c>)
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <prvResetNextTaskUnblockTime+0x20>)
 8006694:	b919      	cbnz	r1, 800669e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006696:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066a2:	68d2      	ldr	r2, [r2, #12]
 80066a4:	6852      	ldr	r2, [r2, #4]
 80066a6:	e7f8      	b.n	800669a <prvResetNextTaskUnblockTime+0xe>
 80066a8:	20003c84 	.word	0x20003c84
 80066ac:	20003d5c 	.word	0x20003d5c

080066b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066b2:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066b4:	4e1b      	ldr	r6, [pc, #108]	; (8006724 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80066b6:	681d      	ldr	r5, [r3, #0]
{
 80066b8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ba:	6830      	ldr	r0, [r6, #0]
 80066bc:	3004      	adds	r0, #4
{
 80066be:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066c0:	f7ff f9b7 	bl	8005a32 <uxListRemove>
 80066c4:	4633      	mov	r3, r6
 80066c6:	b940      	cbnz	r0, 80066da <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80066c8:	6831      	ldr	r1, [r6, #0]
 80066ca:	4e17      	ldr	r6, [pc, #92]	; (8006728 <prvAddCurrentTaskToDelayedList+0x78>)
 80066cc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80066ce:	6832      	ldr	r2, [r6, #0]
 80066d0:	2001      	movs	r0, #1
 80066d2:	4088      	lsls	r0, r1
 80066d4:	ea22 0200 	bic.w	r2, r2, r0
 80066d8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066da:	1c62      	adds	r2, r4, #1
 80066dc:	d107      	bne.n	80066ee <prvAddCurrentTaskToDelayedList+0x3e>
 80066de:	b137      	cbz	r7, 80066ee <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066e0:	6819      	ldr	r1, [r3, #0]
 80066e2:	4812      	ldr	r0, [pc, #72]	; (800672c <prvAddCurrentTaskToDelayedList+0x7c>)
 80066e4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ea:	f7ff b97f 	b.w	80059ec <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066ee:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066f0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80066f2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066f4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80066f6:	d907      	bls.n	8006708 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066f8:	4a0d      	ldr	r2, [pc, #52]	; (8006730 <prvAddCurrentTaskToDelayedList+0x80>)
 80066fa:	6810      	ldr	r0, [r2, #0]
 80066fc:	6819      	ldr	r1, [r3, #0]
}
 80066fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006702:	3104      	adds	r1, #4
 8006704:	f7ff b97e 	b.w	8005a04 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006708:	4a0a      	ldr	r2, [pc, #40]	; (8006734 <prvAddCurrentTaskToDelayedList+0x84>)
 800670a:	6810      	ldr	r0, [r2, #0]
 800670c:	6819      	ldr	r1, [r3, #0]
 800670e:	3104      	adds	r1, #4
 8006710:	f7ff f978 	bl	8005a04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <prvAddCurrentTaskToDelayedList+0x88>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800671a:	bf38      	it	cc
 800671c:	601c      	strcc	r4, [r3, #0]
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006720:	20003da4 	.word	0x20003da4
 8006724:	20003c80 	.word	0x20003c80
 8006728:	20003d2c 	.word	0x20003d2c
 800672c:	20003d7c 	.word	0x20003d7c
 8006730:	20003c88 	.word	0x20003c88
 8006734:	20003c84 	.word	0x20003c84
 8006738:	20003d5c 	.word	0x20003d5c

0800673c <prvTaskIsTaskSuspended.part.0>:
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	e7fe      	b.n	800674c <prvTaskIsTaskSuspended.part.0+0x10>
	...

08006750 <xTaskCreate>:
	{
 8006750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006754:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8006758:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675a:	4650      	mov	r0, sl
	{
 800675c:	460f      	mov	r7, r1
 800675e:	4699      	mov	r9, r3
 8006760:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006762:	f7ff fb31 	bl	8005dc8 <pvPortMalloc>
			if( pxStack != NULL )
 8006766:	4605      	mov	r5, r0
 8006768:	2800      	cmp	r0, #0
 800676a:	f000 8096 	beq.w	800689a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800676e:	2054      	movs	r0, #84	; 0x54
 8006770:	f7ff fb2a 	bl	8005dc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006774:	4604      	mov	r4, r0
 8006776:	2800      	cmp	r0, #0
 8006778:	f000 808c 	beq.w	8006894 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800677c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8006780:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006782:	4455      	add	r5, sl
 8006784:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006786:	f025 0a07 	bic.w	sl, r5, #7
 800678a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800678e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006790:	7859      	ldrb	r1, [r3, #1]
 8006792:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8006796:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800679a:	b109      	cbz	r1, 80067a0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800679c:	42bb      	cmp	r3, r7
 800679e:	d1f7      	bne.n	8006790 <xTaskCreate+0x40>
 80067a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80067a2:	2d06      	cmp	r5, #6
 80067a4:	bf28      	it	cs
 80067a6:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067ac:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80067ae:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80067b0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067b2:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067b4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80067b8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067bc:	f7ff f913 	bl	80059e6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067c4:	f104 0018 	add.w	r0, r4, #24
 80067c8:	f7ff f90d 	bl	80059e6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80067cc:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067d0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067d4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067d6:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067da:	464a      	mov	r2, r9
 80067dc:	4641      	mov	r1, r8
 80067de:	4650      	mov	r0, sl
 80067e0:	f7ff f96a 	bl	8005ab8 <pxPortInitialiseStack>
 80067e4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80067e6:	b106      	cbz	r6, 80067ea <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067e8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80067ea:	f7ff f993 	bl	8005b14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80067ee:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80067f0:	4e32      	ldr	r6, [pc, #200]	; (80068bc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80068e8 <xTaskCreate+0x198>
 80067f8:	3201      	adds	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80067fc:	6835      	ldr	r5, [r6, #0]
 80067fe:	2d00      	cmp	r5, #0
 8006800:	d14e      	bne.n	80068a0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8006802:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d11d      	bne.n	8006846 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800680a:	eb08 0005 	add.w	r0, r8, r5
 800680e:	3514      	adds	r5, #20
 8006810:	f7ff f8de 	bl	80059d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006814:	2d8c      	cmp	r5, #140	; 0x8c
 8006816:	d1f8      	bne.n	800680a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8006818:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80068ec <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800681c:	4d28      	ldr	r5, [pc, #160]	; (80068c0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800681e:	4648      	mov	r0, r9
 8006820:	f7ff f8d6 	bl	80059d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006824:	4628      	mov	r0, r5
 8006826:	f7ff f8d3 	bl	80059d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800682a:	4826      	ldr	r0, [pc, #152]	; (80068c4 <xTaskCreate+0x174>)
 800682c:	f7ff f8d0 	bl	80059d0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006830:	4825      	ldr	r0, [pc, #148]	; (80068c8 <xTaskCreate+0x178>)
 8006832:	f7ff f8cd 	bl	80059d0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006836:	4825      	ldr	r0, [pc, #148]	; (80068cc <xTaskCreate+0x17c>)
 8006838:	f7ff f8ca 	bl	80059d0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800683c:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <xTaskCreate+0x180>)
 800683e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <xTaskCreate+0x184>)
 8006844:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8006846:	4a24      	ldr	r2, [pc, #144]	; (80068d8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8006848:	4924      	ldr	r1, [pc, #144]	; (80068dc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800684a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800684c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800684e:	3301      	adds	r3, #1
 8006850:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006852:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006854:	2501      	movs	r5, #1
 8006856:	fa05 f302 	lsl.w	r3, r5, r2
 800685a:	4303      	orrs	r3, r0
 800685c:	2014      	movs	r0, #20
 800685e:	600b      	str	r3, [r1, #0]
 8006860:	fb00 8002 	mla	r0, r0, r2, r8
 8006864:	4639      	mov	r1, r7
 8006866:	f7ff f8c1 	bl	80059ec <vListInsertEnd>
	taskEXIT_CRITICAL();
 800686a:	f7ff f975 	bl	8005b58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800686e:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <xTaskCreate+0x190>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	b163      	cbz	r3, 800688e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800687a:	429a      	cmp	r2, r3
 800687c:	d207      	bcs.n	800688e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800687e:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <xTaskCreate+0x194>)
 8006880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	f3bf 8f6f 	isb	sy
	}
 800688e:	4628      	mov	r0, r5
 8006890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff fb25 	bl	8005ee4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800689a:	f04f 35ff 	mov.w	r5, #4294967295
 800689e:	e7f6      	b.n	800688e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskCreate+0x190>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1ce      	bne.n	8006846 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068a8:	6833      	ldr	r3, [r6, #0]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068ae:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80068b0:	bf98      	it	ls
 80068b2:	6034      	strls	r4, [r6, #0]
 80068b4:	e7c7      	b.n	8006846 <xTaskCreate+0xf6>
 80068b6:	bf00      	nop
 80068b8:	20003d18 	.word	0x20003d18
 80068bc:	20003c80 	.word	0x20003c80
 80068c0:	20003d44 	.word	0x20003d44
 80068c4:	20003d64 	.word	0x20003d64
 80068c8:	20003d90 	.word	0x20003d90
 80068cc:	20003d7c 	.word	0x20003d7c
 80068d0:	20003c84 	.word	0x20003c84
 80068d4:	20003c88 	.word	0x20003c88
 80068d8:	20003d28 	.word	0x20003d28
 80068dc:	20003d2c 	.word	0x20003d2c
 80068e0:	20003d78 	.word	0x20003d78
 80068e4:	e000ed04 	.word	0xe000ed04
 80068e8:	20003c8c 	.word	0x20003c8c
 80068ec:	20003d30 	.word	0x20003d30

080068f0 <vTaskStartScheduler>:
{
 80068f0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80068f2:	4b17      	ldr	r3, [pc, #92]	; (8006950 <vTaskStartScheduler+0x60>)
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	2400      	movs	r4, #0
 80068f8:	9400      	str	r4, [sp, #0]
 80068fa:	4623      	mov	r3, r4
 80068fc:	2280      	movs	r2, #128	; 0x80
 80068fe:	4915      	ldr	r1, [pc, #84]	; (8006954 <vTaskStartScheduler+0x64>)
 8006900:	4815      	ldr	r0, [pc, #84]	; (8006958 <vTaskStartScheduler+0x68>)
 8006902:	f7ff ff25 	bl	8006750 <xTaskCreate>
	if( xReturn == pdPASS )
 8006906:	2801      	cmp	r0, #1
 8006908:	d114      	bne.n	8006934 <vTaskStartScheduler+0x44>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800691a:	4b10      	ldr	r3, [pc, #64]	; (800695c <vTaskStartScheduler+0x6c>)
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <vTaskStartScheduler+0x70>)
 8006924:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <vTaskStartScheduler+0x74>)
 8006928:	601c      	str	r4, [r3, #0]
}
 800692a:	b002      	add	sp, #8
 800692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006930:	f7ff b982 	b.w	8005c38 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006934:	3001      	adds	r0, #1
 8006936:	d108      	bne.n	800694a <vTaskStartScheduler+0x5a>
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	e7fe      	b.n	8006948 <vTaskStartScheduler+0x58>
}
 800694a:	b002      	add	sp, #8
 800694c:	bd10      	pop	{r4, pc}
 800694e:	bf00      	nop
 8006950:	20003d58 	.word	0x20003d58
 8006954:	0800803f 	.word	0x0800803f
 8006958:	08006bf1 	.word	0x08006bf1
 800695c:	20003d5c 	.word	0x20003d5c
 8006960:	20003d78 	.word	0x20003d78
 8006964:	20003da4 	.word	0x20003da4

08006968 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006968:	4a02      	ldr	r2, [pc, #8]	; (8006974 <vTaskSuspendAll+0xc>)
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20003d24 	.word	0x20003d24

08006978 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006978:	4b01      	ldr	r3, [pc, #4]	; (8006980 <xTaskGetTickCount+0x8>)
 800697a:	6818      	ldr	r0, [r3, #0]
}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20003da4 	.word	0x20003da4

08006984 <xTaskGetTickCountFromISR>:
{
 8006984:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006986:	f7ff f9cd 	bl	8005d24 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800698a:	4b01      	ldr	r3, [pc, #4]	; (8006990 <xTaskGetTickCountFromISR+0xc>)
 800698c:	6818      	ldr	r0, [r3, #0]
}
 800698e:	bd08      	pop	{r3, pc}
 8006990:	20003da4 	.word	0x20003da4

08006994 <xTaskIncrementTick>:
{
 8006994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006998:	4b3c      	ldr	r3, [pc, #240]	; (8006a8c <xTaskIncrementTick+0xf8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d153      	bne.n	8006a48 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80069a0:	4b3b      	ldr	r3, [pc, #236]	; (8006a90 <xTaskIncrementTick+0xfc>)
 80069a2:	681c      	ldr	r4, [r3, #0]
 80069a4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80069a6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80069a8:	b9bc      	cbnz	r4, 80069da <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80069aa:	4b3a      	ldr	r3, [pc, #232]	; (8006a94 <xTaskIncrementTick+0x100>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	b142      	cbz	r2, 80069c4 <xTaskIncrementTick+0x30>
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	e7fe      	b.n	80069c2 <xTaskIncrementTick+0x2e>
 80069c4:	4a34      	ldr	r2, [pc, #208]	; (8006a98 <xTaskIncrementTick+0x104>)
 80069c6:	6819      	ldr	r1, [r3, #0]
 80069c8:	6810      	ldr	r0, [r2, #0]
 80069ca:	6018      	str	r0, [r3, #0]
 80069cc:	6011      	str	r1, [r2, #0]
 80069ce:	4a33      	ldr	r2, [pc, #204]	; (8006a9c <xTaskIncrementTick+0x108>)
 80069d0:	6813      	ldr	r3, [r2, #0]
 80069d2:	3301      	adds	r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	f7ff fe59 	bl	800668c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069da:	4d31      	ldr	r5, [pc, #196]	; (8006aa0 <xTaskIncrementTick+0x10c>)
 80069dc:	4f31      	ldr	r7, [pc, #196]	; (8006aa4 <xTaskIncrementTick+0x110>)
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	429c      	cmp	r4, r3
 80069e2:	f04f 0b00 	mov.w	fp, #0
 80069e6:	d33e      	bcc.n	8006a66 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006a94 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80069ec:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006ab4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f0:	f8d8 2000 	ldr.w	r2, [r8]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	bb72      	cbnz	r2, 8006a56 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295
 80069fc:	602a      	str	r2, [r5, #0]
					break;
 80069fe:	e032      	b.n	8006a66 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a00:	f106 0a04 	add.w	sl, r6, #4
 8006a04:	4650      	mov	r0, sl
 8006a06:	f7ff f814 	bl	8005a32 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a0a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006a0c:	b119      	cbz	r1, 8006a16 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0e:	f106 0018 	add.w	r0, r6, #24
 8006a12:	f7ff f80e 	bl	8005a32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a16:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006a18:	f8d9 3000 	ldr.w	r3, [r9]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	fa02 f100 	lsl.w	r1, r2, r0
 8006a22:	4319      	orrs	r1, r3
 8006a24:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <xTaskIncrementTick+0x114>)
 8006a26:	f8c9 1000 	str.w	r1, [r9]
 8006a2a:	f04f 0e14 	mov.w	lr, #20
 8006a2e:	4651      	mov	r1, sl
 8006a30:	fb0e 3000 	mla	r0, lr, r0, r3
 8006a34:	f7fe ffda 	bl	80059ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a38:	6838      	ldr	r0, [r7, #0]
 8006a3a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006a3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	bf28      	it	cs
 8006a42:	f04f 0b01 	movcs.w	fp, #1
 8006a46:	e7d3      	b.n	80069f0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8006a48:	4a18      	ldr	r2, [pc, #96]	; (8006aac <xTaskIncrementTick+0x118>)
 8006a4a:	6813      	ldr	r3, [r2, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006a50:	f04f 0b00 	mov.w	fp, #0
 8006a54:	e011      	b.n	8006a7a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a56:	f8d8 2000 	ldr.w	r2, [r8]
 8006a5a:	68d2      	ldr	r2, [r2, #12]
 8006a5c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a5e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006a60:	428c      	cmp	r4, r1
 8006a62:	d2cd      	bcs.n	8006a00 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8006a64:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <xTaskIncrementTick+0x114>)
 8006a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a6c:	2214      	movs	r2, #20
 8006a6e:	434a      	muls	r2, r1
 8006a70:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8006a72:	2a02      	cmp	r2, #2
 8006a74:	bf28      	it	cs
 8006a76:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006a7a:	4a0d      	ldr	r2, [pc, #52]	; (8006ab0 <xTaskIncrementTick+0x11c>)
 8006a7c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	bf18      	it	ne
 8006a82:	f04f 0b01 	movne.w	fp, #1
}
 8006a86:	4658      	mov	r0, fp
 8006a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	20003d24 	.word	0x20003d24
 8006a90:	20003da4 	.word	0x20003da4
 8006a94:	20003c84 	.word	0x20003c84
 8006a98:	20003c88 	.word	0x20003c88
 8006a9c:	20003d60 	.word	0x20003d60
 8006aa0:	20003d5c 	.word	0x20003d5c
 8006aa4:	20003c80 	.word	0x20003c80
 8006aa8:	20003c8c 	.word	0x20003c8c
 8006aac:	20003d20 	.word	0x20003d20
 8006ab0:	20003da8 	.word	0x20003da8
 8006ab4:	20003d2c 	.word	0x20003d2c

08006ab8 <xTaskResumeAll>:
{
 8006ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8006abc:	4c31      	ldr	r4, [pc, #196]	; (8006b84 <xTaskResumeAll+0xcc>)
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	b943      	cbnz	r3, 8006ad4 <xTaskResumeAll+0x1c>
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006ad4:	f7ff f81e 	bl	8005b14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ade:	6824      	ldr	r4, [r4, #0]
 8006ae0:	b12c      	cbz	r4, 8006aee <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006ae2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006ae4:	f7ff f838 	bl	8005b58 <vPortExitCritical>
}
 8006ae8:	4620      	mov	r0, r4
 8006aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <xTaskResumeAll+0xd0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f5      	beq.n	8006ae2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006af6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8006ba0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8006afa:	4f24      	ldr	r7, [pc, #144]	; (8006b8c <xTaskResumeAll+0xd4>)
 8006afc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8006ba4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b00:	f8d9 3000 	ldr.w	r3, [r9]
 8006b04:	b9e3      	cbnz	r3, 8006b40 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8006b06:	b10c      	cbz	r4, 8006b0c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8006b08:	f7ff fdc0 	bl	800668c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b0c:	4d20      	ldr	r5, [pc, #128]	; (8006b90 <xTaskResumeAll+0xd8>)
 8006b0e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b10:	b144      	cbz	r4, 8006b24 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8006b12:	4e20      	ldr	r6, [pc, #128]	; (8006b94 <xTaskResumeAll+0xdc>)
 8006b14:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006b16:	f7ff ff3d 	bl	8006994 <xTaskIncrementTick>
 8006b1a:	b100      	cbz	r0, 8006b1e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8006b1c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b1e:	3c01      	subs	r4, #1
 8006b20:	d1f9      	bne.n	8006b16 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8006b22:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <xTaskResumeAll+0xdc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0da      	beq.n	8006ae2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <xTaskResumeAll+0xe0>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006b3c:	2401      	movs	r4, #1
 8006b3e:	e7d1      	b.n	8006ae4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b40:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006b44:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b46:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b48:	f104 0018 	add.w	r0, r4, #24
 8006b4c:	f7fe ff71 	bl	8005a32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7fe ff6e 	bl	8005a32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	2501      	movs	r5, #1
 8006b5c:	fa05 f302 	lsl.w	r3, r5, r2
 8006b60:	2014      	movs	r0, #20
 8006b62:	430b      	orrs	r3, r1
 8006b64:	fb00 8002 	mla	r0, r0, r2, r8
 8006b68:	4631      	mov	r1, r6
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	f7fe ff3e 	bl	80059ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <xTaskResumeAll+0xe4>)
 8006b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8006b7a:	bf24      	itt	cs
 8006b7c:	4b05      	ldrcs	r3, [pc, #20]	; (8006b94 <xTaskResumeAll+0xdc>)
 8006b7e:	601d      	strcs	r5, [r3, #0]
 8006b80:	e7be      	b.n	8006b00 <xTaskResumeAll+0x48>
 8006b82:	bf00      	nop
 8006b84:	20003d24 	.word	0x20003d24
 8006b88:	20003d18 	.word	0x20003d18
 8006b8c:	20003d2c 	.word	0x20003d2c
 8006b90:	20003d20 	.word	0x20003d20
 8006b94:	20003da8 	.word	0x20003da8
 8006b98:	e000ed04 	.word	0xe000ed04
 8006b9c:	20003c80 	.word	0x20003c80
 8006ba0:	20003d64 	.word	0x20003d64
 8006ba4:	20003c8c 	.word	0x20003c8c

08006ba8 <vTaskDelay>:
	{
 8006ba8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006baa:	b940      	cbnz	r0, 8006bbe <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <vTaskDelay+0x40>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <vTaskDelay+0x44>)
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	b141      	cbz	r1, 8006bd6 <vTaskDelay+0x2e>
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	e7fe      	b.n	8006bd4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bd6:	f7ff fec7 	bl	8006968 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bda:	f7ff fd69 	bl	80066b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006bde:	f7ff ff6b 	bl	8006ab8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0e2      	beq.n	8006bac <vTaskDelay+0x4>
 8006be6:	bd08      	pop	{r3, pc}
 8006be8:	e000ed04 	.word	0xe000ed04
 8006bec:	20003d24 	.word	0x20003d24

08006bf0 <prvIdleTask>:
{
 8006bf0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006bf2:	4e17      	ldr	r6, [pc, #92]	; (8006c50 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf4:	4c17      	ldr	r4, [pc, #92]	; (8006c54 <prvIdleTask+0x64>)
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	b963      	cbnz	r3, 8006c14 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bfa:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <prvIdleTask+0x68>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d9f8      	bls.n	8006bf4 <prvIdleTask+0x4>
				taskYIELD();
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <prvIdleTask+0x6c>)
 8006c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	e7ef      	b.n	8006bf4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8006c14:	f7ff fea8 	bl	8006968 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006c18:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8006c1a:	f7ff ff4d 	bl	8006ab8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	d0e9      	beq.n	8006bf6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8006c22:	f7fe ff77 	bl	8005b14 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c26:	68f3      	ldr	r3, [r6, #12]
 8006c28:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c2a:	1d28      	adds	r0, r5, #4
 8006c2c:	f7fe ff01 	bl	8005a32 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006c30:	4a0b      	ldr	r2, [pc, #44]	; (8006c60 <prvIdleTask+0x70>)
 8006c32:	6813      	ldr	r3, [r2, #0]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8006c3e:	f7fe ff8b 	bl	8005b58 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006c42:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006c44:	f7ff f94e 	bl	8005ee4 <vPortFree>
			vPortFree( pxTCB );
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f7ff f94b 	bl	8005ee4 <vPortFree>
 8006c4e:	e7d2      	b.n	8006bf6 <prvIdleTask+0x6>
 8006c50:	20003d90 	.word	0x20003d90
 8006c54:	20003d1c 	.word	0x20003d1c
 8006c58:	20003c8c 	.word	0x20003c8c
 8006c5c:	e000ed04 	.word	0xe000ed04
 8006c60:	20003d18 	.word	0x20003d18

08006c64 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c64:	4b17      	ldr	r3, [pc, #92]	; (8006cc4 <vTaskSwitchContext+0x60>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <vTaskSwitchContext+0x64>)
{
 8006c6a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c6c:	b112      	cbz	r2, 8006c74 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006c6e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8006c74:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c76:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <vTaskSwitchContext+0x68>)
 8006c78:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006c7a:	fab3 f383 	clz	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f1c3 031f 	rsb	r3, r3, #31
 8006c84:	2214      	movs	r2, #20
 8006c86:	4912      	ldr	r1, [pc, #72]	; (8006cd0 <vTaskSwitchContext+0x6c>)
 8006c88:	435a      	muls	r2, r3
 8006c8a:	1888      	adds	r0, r1, r2
 8006c8c:	588c      	ldr	r4, [r1, r2]
 8006c8e:	b944      	cbnz	r4, 8006ca2 <vTaskSwitchContext+0x3e>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	e7fe      	b.n	8006ca0 <vTaskSwitchContext+0x3c>
 8006ca2:	6844      	ldr	r4, [r0, #4]
 8006ca4:	3208      	adds	r2, #8
 8006ca6:	6864      	ldr	r4, [r4, #4]
 8006ca8:	6044      	str	r4, [r0, #4]
 8006caa:	440a      	add	r2, r1
 8006cac:	4294      	cmp	r4, r2
 8006cae:	bf04      	itt	eq
 8006cb0:	6862      	ldreq	r2, [r4, #4]
 8006cb2:	6042      	streq	r2, [r0, #4]
 8006cb4:	2214      	movs	r2, #20
 8006cb6:	fb02 1303 	mla	r3, r2, r3, r1
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <vTaskSwitchContext+0x70>)
 8006cc0:	e7d6      	b.n	8006c70 <vTaskSwitchContext+0xc>
 8006cc2:	bf00      	nop
 8006cc4:	20003d24 	.word	0x20003d24
 8006cc8:	20003da8 	.word	0x20003da8
 8006ccc:	20003d2c 	.word	0x20003d2c
 8006cd0:	20003c8c 	.word	0x20003c8c
 8006cd4:	20003c80 	.word	0x20003c80

08006cd8 <vTaskPlaceOnEventList>:
{
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006cdc:	b940      	cbnz	r0, 8006cf0 <vTaskPlaceOnEventList+0x18>
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	e7fe      	b.n	8006cee <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <vTaskPlaceOnEventList+0x30>)
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	3118      	adds	r1, #24
 8006cf6:	f7fe fe85 	bl	8005a04 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	2101      	movs	r1, #1
}
 8006cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d02:	f7ff bcd5 	b.w	80066b0 <prvAddCurrentTaskToDelayedList>
 8006d06:	bf00      	nop
 8006d08:	20003c80 	.word	0x20003c80

08006d0c <xTaskRemoveFromEventList>:
{
 8006d0c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d0e:	68c3      	ldr	r3, [r0, #12]
 8006d10:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d12:	b944      	cbnz	r4, 8006d26 <xTaskRemoveFromEventList+0x1a>
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	e7fe      	b.n	8006d24 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d26:	f104 0518 	add.w	r5, r4, #24
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7fe fe81 	bl	8005a32 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d30:	4b11      	ldr	r3, [pc, #68]	; (8006d78 <xTaskRemoveFromEventList+0x6c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	b9e3      	cbnz	r3, 8006d70 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d36:	1d25      	adds	r5, r4, #4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f7fe fe7a 	bl	8005a32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d3e:	490f      	ldr	r1, [pc, #60]	; (8006d7c <xTaskRemoveFromEventList+0x70>)
 8006d40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d42:	6808      	ldr	r0, [r1, #0]
 8006d44:	2301      	movs	r3, #1
 8006d46:	4093      	lsls	r3, r2
 8006d48:	4303      	orrs	r3, r0
 8006d4a:	600b      	str	r3, [r1, #0]
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <xTaskRemoveFromEventList+0x74>)
 8006d4e:	2014      	movs	r0, #20
 8006d50:	4629      	mov	r1, r5
 8006d52:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d56:	f7fe fe49 	bl	80059ec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <xTaskRemoveFromEventList+0x78>)
 8006d5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006d64:	bf83      	ittte	hi
 8006d66:	4b08      	ldrhi	r3, [pc, #32]	; (8006d88 <xTaskRemoveFromEventList+0x7c>)
 8006d68:	2001      	movhi	r0, #1
 8006d6a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006d6c:	2000      	movls	r0, #0
}
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d70:	4629      	mov	r1, r5
 8006d72:	4806      	ldr	r0, [pc, #24]	; (8006d8c <xTaskRemoveFromEventList+0x80>)
 8006d74:	e7ef      	b.n	8006d56 <xTaskRemoveFromEventList+0x4a>
 8006d76:	bf00      	nop
 8006d78:	20003d24 	.word	0x20003d24
 8006d7c:	20003d2c 	.word	0x20003d2c
 8006d80:	20003c8c 	.word	0x20003c8c
 8006d84:	20003c80 	.word	0x20003c80
 8006d88:	20003da8 	.word	0x20003da8
 8006d8c:	20003d64 	.word	0x20003d64

08006d90 <vTaskSetTimeOutState>:
{
 8006d90:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8006d92:	b908      	cbnz	r0, 8006d98 <vTaskSetTimeOutState+0x8>
 8006d94:	f7ff fcd2 	bl	800673c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d98:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <vTaskSetTimeOutState+0x18>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d9e:	4b03      	ldr	r3, [pc, #12]	; (8006dac <vTaskSetTimeOutState+0x1c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6043      	str	r3, [r0, #4]
 8006da4:	bd08      	pop	{r3, pc}
 8006da6:	bf00      	nop
 8006da8:	20003d60 	.word	0x20003d60
 8006dac:	20003da4 	.word	0x20003da4

08006db0 <xTaskCheckForTimeOut>:
{
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8006db4:	4604      	mov	r4, r0
 8006db6:	b940      	cbnz	r0, 8006dca <xTaskCheckForTimeOut+0x1a>
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	e7fe      	b.n	8006dc8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006dca:	b941      	cbnz	r1, 8006dde <xTaskCheckForTimeOut+0x2e>
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	e7fe      	b.n	8006ddc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8006dde:	f7fe fe99 	bl	8005b14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006de2:	4b0e      	ldr	r3, [pc, #56]	; (8006e1c <xTaskCheckForTimeOut+0x6c>)
 8006de4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006de6:	682b      	ldr	r3, [r5, #0]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	d010      	beq.n	8006e0e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dec:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <xTaskCheckForTimeOut+0x70>)
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	4290      	cmp	r0, r2
 8006df4:	6862      	ldr	r2, [r4, #4]
 8006df6:	d001      	beq.n	8006dfc <xTaskCheckForTimeOut+0x4c>
 8006df8:	4291      	cmp	r1, r2
 8006dfa:	d20d      	bcs.n	8006e18 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dfc:	1a88      	subs	r0, r1, r2
 8006dfe:	4283      	cmp	r3, r0
 8006e00:	d90a      	bls.n	8006e18 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	4413      	add	r3, r2
 8006e06:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7ff ffc1 	bl	8006d90 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8006e0e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e10:	f7fe fea2 	bl	8005b58 <vPortExitCritical>
}
 8006e14:	4620      	mov	r0, r4
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8006e18:	2401      	movs	r4, #1
 8006e1a:	e7f9      	b.n	8006e10 <xTaskCheckForTimeOut+0x60>
 8006e1c:	20003da4 	.word	0x20003da4
 8006e20:	20003d60 	.word	0x20003d60

08006e24 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e24:	4b01      	ldr	r3, [pc, #4]	; (8006e2c <vTaskMissedYield+0x8>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	4770      	bx	lr
 8006e2c:	20003da8 	.word	0x20003da8

08006e30 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <xTaskGetSchedulerState+0x18>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	b133      	cbz	r3, 8006e44 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <xTaskGetSchedulerState+0x1c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e3c:	bf0c      	ite	eq
 8006e3e:	2002      	moveq	r0, #2
 8006e40:	2000      	movne	r0, #0
 8006e42:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e44:	2001      	movs	r0, #1
	}
 8006e46:	4770      	bx	lr
 8006e48:	20003d78 	.word	0x20003d78
 8006e4c:	20003d24 	.word	0x20003d24

08006e50 <vTaskPriorityInherit>:
	{
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8006e54:	4604      	mov	r4, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d038      	beq.n	8006ecc <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e5a:	4d1d      	ldr	r5, [pc, #116]	; (8006ed0 <vTaskPriorityInherit+0x80>)
 8006e5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006e5e:	682a      	ldr	r2, [r5, #0]
 8006e60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d232      	bcs.n	8006ecc <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e66:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e68:	4e1a      	ldr	r6, [pc, #104]	; (8006ed4 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e6a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6c:	bfa1      	itttt	ge
 8006e6e:	682a      	ldrge	r2, [r5, #0]
 8006e70:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8006e72:	f1c2 0207 	rsbge	r2, r2, #7
 8006e76:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e78:	2714      	movs	r7, #20
 8006e7a:	6942      	ldr	r2, [r0, #20]
 8006e7c:	fb07 6303 	mla	r3, r7, r3, r6
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d120      	bne.n	8006ec6 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e84:	f100 0804 	add.w	r8, r0, #4
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f7fe fdd2 	bl	8005a32 <uxListRemove>
 8006e8e:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <vTaskPriorityInherit+0x88>)
 8006e90:	b948      	cbnz	r0, 8006ea6 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006e94:	4347      	muls	r7, r0
 8006e96:	59f3      	ldr	r3, [r6, r7]
 8006e98:	b92b      	cbnz	r3, 8006ea6 <vTaskPriorityInherit+0x56>
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4081      	lsls	r1, r0
 8006ea0:	ea23 0301 	bic.w	r3, r3, r1
 8006ea4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ea6:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8006ea8:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006eaa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006eac:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4083      	lsls	r3, r0
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	2314      	movs	r3, #20
 8006eb8:	4641      	mov	r1, r8
 8006eba:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8006ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8006ec2:	f7fe bd93 	b.w	80059ec <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed0:	20003c80 	.word	0x20003c80
 8006ed4:	20003c8c 	.word	0x20003c8c
 8006ed8:	20003d2c 	.word	0x20003d2c

08006edc <xTaskPriorityDisinherit>:
	{
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8006ede:	4604      	mov	r4, r0
 8006ee0:	b908      	cbnz	r0, 8006ee6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <xTaskPriorityDisinherit+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4298      	cmp	r0, r3
 8006eec:	d008      	beq.n	8006f00 <xTaskPriorityDisinherit+0x24>
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	e7fe      	b.n	8006efe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f00:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006f02:	b943      	cbnz	r3, 8006f16 <xTaskPriorityDisinherit+0x3a>
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	e7fe      	b.n	8006f14 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006f18:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8006f1a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f1c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006f1e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f20:	d0df      	beq.n	8006ee2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1dd      	bne.n	8006ee2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f26:	1d05      	adds	r5, r0, #4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f7fe fd82 	bl	8005a32 <uxListRemove>
 8006f2e:	4e11      	ldr	r6, [pc, #68]	; (8006f74 <xTaskPriorityDisinherit+0x98>)
 8006f30:	4a11      	ldr	r2, [pc, #68]	; (8006f78 <xTaskPriorityDisinherit+0x9c>)
 8006f32:	b950      	cbnz	r0, 8006f4a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006f36:	2114      	movs	r1, #20
 8006f38:	4379      	muls	r1, r7
 8006f3a:	5873      	ldr	r3, [r6, r1]
 8006f3c:	b92b      	cbnz	r3, 8006f4a <xTaskPriorityDisinherit+0x6e>
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	2001      	movs	r0, #1
 8006f42:	40b8      	lsls	r0, r7
 8006f44:	ea23 0300 	bic.w	r3, r3, r0
 8006f48:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4e:	f1c3 0107 	rsb	r1, r3, #7
 8006f52:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f54:	6811      	ldr	r1, [r2, #0]
 8006f56:	2401      	movs	r4, #1
 8006f58:	fa04 f003 	lsl.w	r0, r4, r3
 8006f5c:	4308      	orrs	r0, r1
 8006f5e:	6010      	str	r0, [r2, #0]
 8006f60:	2014      	movs	r0, #20
 8006f62:	fb00 6003 	mla	r0, r0, r3, r6
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7fe fd40 	bl	80059ec <vListInsertEnd>
					xReturn = pdTRUE;
 8006f6c:	4620      	mov	r0, r4
	}
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	20003c80 	.word	0x20003c80
 8006f74:	20003c8c 	.word	0x20003c8c
 8006f78:	20003d2c 	.word	0x20003d2c

08006f7c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <pvTaskIncrementMutexHeldCount+0x14>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	b11a      	cbz	r2, 8006f8a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006f86:	3201      	adds	r2, #1
 8006f88:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8006f8a:	6818      	ldr	r0, [r3, #0]
	}
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20003c80 	.word	0x20003c80

08006f94 <bnO_write>:
	HAL_Delay(10);
	bnO_setMode(mode);
	HAL_Delay(100);
}

int bnO_write(bnO_Registers reg, uint8_t pValue){
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	b086      	sub	sp, #24
	while(HAL_I2C_IsDeviceReady(phi2c, bnO_Address,1,0xff)!= HAL_OK){
 8006f98:	4d10      	ldr	r5, [pc, #64]	; (8006fdc <bnO_write+0x48>)
int bnO_write(bnO_Registers reg, uint8_t pValue){
 8006f9a:	f88d 1017 	strb.w	r1, [sp, #23]
 8006f9e:	4606      	mov	r6, r0
	while(HAL_I2C_IsDeviceReady(phi2c, bnO_Address,1,0xff)!= HAL_OK){
 8006fa0:	23ff      	movs	r3, #255	; 0xff
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	2150      	movs	r1, #80	; 0x50
 8006fa6:	6828      	ldr	r0, [r5, #0]
 8006fa8:	f7fa fd4e 	bl	8001a48 <HAL_I2C_IsDeviceReady>
 8006fac:	b970      	cbnz	r0, 8006fcc <bnO_write+0x38>
		HAL_Delay(50);
	}
	if(HAL_I2C_Mem_Write(phi2c, bnO_Address, reg,sizeof(reg), &pValue, sizeof(pValue),0xff) != HAL_OK){
 8006fae:	23ff      	movs	r3, #255	; 0xff
 8006fb0:	2401      	movs	r4, #1
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	f10d 0317 	add.w	r3, sp, #23
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	9401      	str	r4, [sp, #4]
 8006fbc:	4623      	mov	r3, r4
 8006fbe:	4632      	mov	r2, r6
 8006fc0:	2150      	movs	r1, #80	; 0x50
 8006fc2:	6828      	ldr	r0, [r5, #0]
 8006fc4:	f7fa fb9a 	bl	80016fc <HAL_I2C_Mem_Write>
 8006fc8:	b120      	cbz	r0, 8006fd4 <bnO_write+0x40>
 8006fca:	e7fe      	b.n	8006fca <bnO_write+0x36>
		HAL_Delay(50);
 8006fcc:	2032      	movs	r0, #50	; 0x32
 8006fce:	f7f9 ff4d 	bl	8000e6c <HAL_Delay>
 8006fd2:	e7e5      	b.n	8006fa0 <bnO_write+0xc>
		//error handling
		for(;;);
		return 0;
	}
	return 1;
}
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	b006      	add	sp, #24
 8006fd8:	bd70      	pop	{r4, r5, r6, pc}
 8006fda:	bf00      	nop
 8006fdc:	20003dac 	.word	0x20003dac

08006fe0 <bnO_read>:

signed char bnO_read(bnO_Registers reg){
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	b086      	sub	sp, #24
	uint8_t dataBuffer = 0;
 8006fe4:	aa06      	add	r2, sp, #24
 8006fe6:	2400      	movs	r4, #0
 8006fe8:	f802 4d01 	strb.w	r4, [r2, #-1]!
	if(HAL_I2C_Mem_Read(phi2c, bnO_Address, reg, sizeof(reg), &dataBuffer, sizeof(uint8_t),0xff) != HAL_OK){
 8006fec:	23ff      	movs	r3, #255	; 0xff
 8006fee:	9302      	str	r3, [sp, #8]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4805      	ldr	r0, [pc, #20]	; (8007010 <bnO_read+0x30>)
 8006ffa:	2150      	movs	r1, #80	; 0x50
 8006ffc:	6800      	ldr	r0, [r0, #0]
 8006ffe:	f7fa fc13 	bl	8001828 <HAL_I2C_Mem_Read>
 8007002:	b908      	cbnz	r0, 8007008 <bnO_read+0x28>
		//error handling
		return 0;
	}
	return dataBuffer;
 8007004:	f89d 4017 	ldrb.w	r4, [sp, #23]
}
 8007008:	b260      	sxtb	r0, r4
 800700a:	b006      	add	sp, #24
 800700c:	bd10      	pop	{r4, pc}
 800700e:	bf00      	nop
 8007010:	20003dac 	.word	0x20003dac

08007014 <bnO_setMode>:
		return 0;
	}
	return 1;
}

int bnO_setMode(bnO_OPModes mode){
 8007014:	b510      	push	{r4, lr}
	if(bnO_write(BNO055_OPR_MODE_ADDR, mode) != 1){
 8007016:	4601      	mov	r1, r0
 8007018:	203d      	movs	r0, #61	; 0x3d
 800701a:	f7ff ffbb 	bl	8006f94 <bnO_write>
 800701e:	2801      	cmp	r0, #1
 8007020:	4604      	mov	r4, r0
 8007022:	d104      	bne.n	800702e <bnO_setMode+0x1a>
		//hanlde error
		return 0;
	}
	HAL_Delay(50);
 8007024:	2032      	movs	r0, #50	; 0x32
 8007026:	f7f9 ff21 	bl	8000e6c <HAL_Delay>
	return 1;
}
 800702a:	4620      	mov	r0, r4
 800702c:	bd10      	pop	{r4, pc}
		return 0;
 800702e:	2400      	movs	r4, #0
 8007030:	e7fb      	b.n	800702a <bnO_setMode+0x16>

08007032 <bnO_setPWRMode>:

int bnO_setPWRMode(bnO_PWRModes mode){
 8007032:	b510      	push	{r4, lr}
	if(bnO_write(BNO055_PWR_MODE_ADDR, mode) != 1){
 8007034:	4601      	mov	r1, r0
 8007036:	203e      	movs	r0, #62	; 0x3e
 8007038:	f7ff ffac 	bl	8006f94 <bnO_write>
 800703c:	2801      	cmp	r0, #1
 800703e:	4604      	mov	r4, r0
 8007040:	d104      	bne.n	800704c <bnO_setPWRMode+0x1a>
		//handle error
		return 0;
	}
	HAL_Delay(50);
 8007042:	2032      	movs	r0, #50	; 0x32
 8007044:	f7f9 ff12 	bl	8000e6c <HAL_Delay>
	return 1;
}
 8007048:	4620      	mov	r0, r4
 800704a:	bd10      	pop	{r4, pc}
		return 0;
 800704c:	2400      	movs	r4, #0
 800704e:	e7fb      	b.n	8007048 <bnO_setPWRMode+0x16>

08007050 <bnO_init>:
void bnO_init(I2C_HandleTypeDef * i2c_handle, bnO_OPModes mode){
 8007050:	b537      	push	{r0, r1, r2, r4, r5, lr}
	phi2c = i2c_handle;
 8007052:	4b20      	ldr	r3, [pc, #128]	; (80070d4 <bnO_init+0x84>)
	volatile uint8_t id = 0;
 8007054:	2400      	movs	r4, #0
	phi2c = i2c_handle;
 8007056:	6018      	str	r0, [r3, #0]
	id = bnO_read(BNO055_CHIP_ID_ADDR);
 8007058:	4620      	mov	r0, r4
void bnO_init(I2C_HandleTypeDef * i2c_handle, bnO_OPModes mode){
 800705a:	460d      	mov	r5, r1
	volatile uint8_t id = 0;
 800705c:	f88d 4007 	strb.w	r4, [sp, #7]
	id = bnO_read(BNO055_CHIP_ID_ADDR);
 8007060:	f7ff ffbe 	bl	8006fe0 <bnO_read>
	if(id != BNO055_ID){
 8007064:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <bnO_init+0x88>)
	id = bnO_read(BNO055_CHIP_ID_ADDR);
 8007066:	b2c0      	uxtb	r0, r0
 8007068:	f88d 0007 	strb.w	r0, [sp, #7]
	if(id != BNO055_ID){
 800706c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d00b      	beq.n	800708e <bnO_init+0x3e>
		HAL_Delay(300);
 8007076:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800707a:	f7f9 fef7 	bl	8000e6c <HAL_Delay>
		id = bnO_read(BNO055_CHIP_ID_ADDR);
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff ffae 	bl	8006fe0 <bnO_read>
 8007084:	b2c0      	uxtb	r0, r0
 8007086:	f88d 0007 	strb.w	r0, [sp, #7]
		if(id != BNO055_ID){
 800708a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	bnO_setMode(OPERATION_MODE_CONFIG);
 800708e:	2000      	movs	r0, #0
 8007090:	f7ff ffc0 	bl	8007014 <bnO_setMode>
	bnO_write(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8007094:	2120      	movs	r1, #32
 8007096:	203f      	movs	r0, #63	; 0x3f
 8007098:	f7ff ff7c 	bl	8006f94 <bnO_write>
	HAL_Delay(50);
 800709c:	2032      	movs	r0, #50	; 0x32
 800709e:	f7f9 fee5 	bl	8000e6c <HAL_Delay>
	bnO_setPWRMode(POWER_MODE_NORMAL);
 80070a2:	2000      	movs	r0, #0
 80070a4:	f7ff ffc5 	bl	8007032 <bnO_setPWRMode>
	HAL_Delay(10);
 80070a8:	200a      	movs	r0, #10
 80070aa:	f7f9 fedf 	bl	8000e6c <HAL_Delay>
	bnO_write(BNO055_PAGE_ID_ADDR, 0x0);
 80070ae:	2100      	movs	r1, #0
 80070b0:	2007      	movs	r0, #7
 80070b2:	f7ff ff6f 	bl	8006f94 <bnO_write>
	bnO_write(BNO055_SYS_TRIGGER_ADDR, 0x0);
 80070b6:	2100      	movs	r1, #0
 80070b8:	203f      	movs	r0, #63	; 0x3f
 80070ba:	f7ff ff6b 	bl	8006f94 <bnO_write>
	HAL_Delay(10);
 80070be:	200a      	movs	r0, #10
 80070c0:	f7f9 fed4 	bl	8000e6c <HAL_Delay>
	bnO_setMode(mode);
 80070c4:	4628      	mov	r0, r5
 80070c6:	f7ff ffa5 	bl	8007014 <bnO_setMode>
	HAL_Delay(100);
 80070ca:	2064      	movs	r0, #100	; 0x64
 80070cc:	f7f9 fece 	bl	8000e6c <HAL_Delay>
}
 80070d0:	b003      	add	sp, #12
 80070d2:	bd30      	pop	{r4, r5, pc}
 80070d4:	20003dac 	.word	0x20003dac
 80070d8:	20000008 	.word	0x20000008

080070dc <bnO_getTemp>:

uint8_t bnO_getTemp(){
 80070dc:	b508      	push	{r3, lr}
	uint8_t temp = 0;
	temp = bnO_read(BNO055_TEMP_ADDR);
 80070de:	2034      	movs	r0, #52	; 0x34
 80070e0:	f7ff ff7e 	bl	8006fe0 <bnO_read>
	return temp;
}
 80070e4:	b2c0      	uxtb	r0, r0
 80070e6:	bd08      	pop	{r3, pc}

080070e8 <getCalibrationStatus>:
	volatile char status;
 	status = HAL_I2C_Master_Receive(phi2c,8<<1,data,2,0xff);
 	volatile int x = 0;
}

calib_Status getCalibrationStatus(){
 80070e8:	b507      	push	{r0, r1, r2, lr}
	calib_Status Status;
	unsigned char calib = 0;
	calib = bnO_read(BNO055_CALIB_STAT_ADDR);
 80070ea:	2035      	movs	r0, #53	; 0x35
 80070ec:	f7ff ff78 	bl	8006fe0 <bnO_read>
 80070f0:	b2c3      	uxtb	r3, r0
	Status.SYS = (calib & 0b11000000) >> 6; //SYS
	Status.GYR = (calib & 0b00110000) >> 4; //GYR
	Status.ACC = (calib & 0b00001100) >> 2; //ACC
	Status.MAG = (calib & 0b00000011); //MAG
	return Status;
 80070f2:	099a      	lsrs	r2, r3, #6
 80070f4:	2000      	movs	r0, #0
 80070f6:	f362 0007 	bfi	r0, r2, #0, #8
 80070fa:	f3c3 1201 	ubfx	r2, r3, #4, #2
 80070fe:	f362 200f 	bfi	r0, r2, #8, #8
 8007102:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8007106:	f362 4017 	bfi	r0, r2, #16, #8
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	f363 601f 	bfi	r0, r3, #24, #8
}
 8007112:	b003      	add	sp, #12
 8007114:	f85d fb04 	ldr.w	pc, [sp], #4

08007118 <getGravVector>:
	Mag.Y = (float)twosCompliment((MSB[1]<<8) | (LSB[1]))/16.0;
	Mag.Z = (float)twosCompliment((MSB[2]<<8) | (LSB[2]))/16.0;
	return Mag;
}

vector getGravVector(){
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	ed2d 8b02 	vpush	{d8}
	vector Grav;
	volatile char LSB[3];
	volatile char MSB[3];
	for(int i = 0; i < 3; i++){
 800711e:	2500      	movs	r5, #0
vector getGravVector(){
 8007120:	b08a      	sub	sp, #40	; 0x28
 8007122:	b2ec      	uxtb	r4, r5
		LSB[i] = bnO_read(46+(i*2));
 8007124:	f104 0017 	add.w	r0, r4, #23
 8007128:	0040      	lsls	r0, r0, #1
 800712a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800712e:	f7ff ff57 	bl	8006fe0 <bnO_read>
 8007132:	ab0a      	add	r3, sp, #40	; 0x28
 8007134:	195e      	adds	r6, r3, r5
 8007136:	b2c0      	uxtb	r0, r0
 8007138:	f806 0c14 	strb.w	r0, [r6, #-20]
		MSB[i] = bnO_read(47+(i*2));
 800713c:	0060      	lsls	r0, r4, #1
 800713e:	302f      	adds	r0, #47	; 0x2f
 8007140:	b2c0      	uxtb	r0, r0
 8007142:	f7ff ff4d 	bl	8006fe0 <bnO_read>
	for(int i = 0; i < 3; i++){
 8007146:	3501      	adds	r5, #1
		MSB[i] = bnO_read(47+(i*2));
 8007148:	b2c0      	uxtb	r0, r0
	for(int i = 0; i < 3; i++){
 800714a:	2d03      	cmp	r5, #3
		MSB[i] = bnO_read(47+(i*2));
 800714c:	f806 0c10 	strb.w	r0, [r6, #-16]
	for(int i = 0; i < 3; i++){
 8007150:	d1e7      	bne.n	8007122 <getGravVector+0xa>
	}
	Grav.X = (float)twosCompliment((MSB[0]<<8) | (LSB[0]))/100.0;
 8007152:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8007156:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800715a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800715e:	f000 f99b 	bl	8007498 <twosCompliment>
 8007162:	ee08 0a90 	vmov	s17, r0
	Grav.Y = (float)twosCompliment((MSB[1]<<8) | (LSB[1]))/100.0;
 8007166:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800716a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800716e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007172:	f000 f991 	bl	8007498 <twosCompliment>
 8007176:	ee08 0a10 	vmov	s16, r0
	Grav.Z = (float)twosCompliment((MSB[2]<<8) | (LSB[2]))/100.0;
 800717a:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800717e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007182:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007186:	f000 f987 	bl	8007498 <twosCompliment>
 800718a:	ee07 0a10 	vmov	s14, r0
	Grav.X = (float)twosCompliment((MSB[0]<<8) | (LSB[0]))/100.0;
 800718e:	eddf 7a09 	vldr	s15, [pc, #36]	; 80071b4 <getGravVector+0x9c>
 8007192:	eeb8 0ae8 	vcvt.f32.s32	s0, s17
	Grav.Y = (float)twosCompliment((MSB[1]<<8) | (LSB[1]))/100.0;
 8007196:	eef8 0ac8 	vcvt.f32.s32	s1, s16
	Grav.Z = (float)twosCompliment((MSB[2]<<8) | (LSB[2]))/100.0;
 800719a:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
	return Grav;
}
 800719e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80071a2:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 80071a6:	ee81 1a27 	vdiv.f32	s2, s2, s15
 80071aa:	b00a      	add	sp, #40	; 0x28
 80071ac:	ecbd 8b02 	vpop	{d8}
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	bf00      	nop
 80071b4:	42c80000 	.word	0x42c80000

080071b8 <getFileSize.part.3>:
	}
	return bytesWritten;
}


char getFileSize(char fileName[]){
 80071b8:	b510      	push	{r4, lr}
 80071ba:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
	FIL sizeObj;
	char size;
	if(xSemaphoreTake(SD_Semaphore,1000)){
		f_open(&sizeObj,fileName,FA_READ);
 80071be:	4601      	mov	r1, r0
 80071c0:	2201      	movs	r2, #1
 80071c2:	4668      	mov	r0, sp
 80071c4:	f7fd fe0a 	bl	8004ddc <f_open>
		size = (int)f_size(&sizeObj);
		f_close(&sizeObj);
 80071c8:	4668      	mov	r0, sp
		size = (int)f_size(&sizeObj);
 80071ca:	f89d 400c 	ldrb.w	r4, [sp, #12]
		f_close(&sizeObj);
 80071ce:	f7fe f877 	bl	80052c0 <f_close>
		xSemaphoreGive(SD_Semaphore);
 80071d2:	4805      	ldr	r0, [pc, #20]	; (80071e8 <getFileSize.part.3+0x30>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	461a      	mov	r2, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	f7fe ff9c 	bl	8006118 <xQueueGenericSend>
	}else{
		//Failed to access SD peripherial
		return 0;
	}
	return size;
}
 80071e0:	4620      	mov	r0, r4
 80071e2:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	20003ec0 	.word	0x20003ec0

080071ec <SD_Config>:
int SD_Config(){
 80071ec:	b538      	push	{r3, r4, r5, lr}
	if(xSemaphoreTake(SD_Semaphore,1000)){
 80071ee:	4d0c      	ldr	r5, [pc, #48]	; (8007220 <SD_Config+0x34>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071f6:	4619      	mov	r1, r3
 80071f8:	6828      	ldr	r0, [r5, #0]
 80071fa:	f7ff f90b 	bl	8006414 <xQueueGenericReceive>
 80071fe:	b170      	cbz	r0, 800721e <SD_Config+0x32>
		FR = f_mount(&myFatFS,SDPath,1);
 8007200:	2201      	movs	r2, #1
 8007202:	4908      	ldr	r1, [pc, #32]	; (8007224 <SD_Config+0x38>)
 8007204:	4808      	ldr	r0, [pc, #32]	; (8007228 <SD_Config+0x3c>)
 8007206:	f7fd fd9f 	bl	8004d48 <f_mount>
		xSemaphoreGive(SD_Semaphore);
 800720a:	2300      	movs	r3, #0
		FR = f_mount(&myFatFS,SDPath,1);
 800720c:	4604      	mov	r4, r0
		xSemaphoreGive(SD_Semaphore);
 800720e:	461a      	mov	r2, r3
 8007210:	4619      	mov	r1, r3
 8007212:	6828      	ldr	r0, [r5, #0]
 8007214:	f7fe ff80 	bl	8006118 <xQueueGenericSend>
	if(FR == FR_OK){
 8007218:	fab4 f084 	clz	r0, r4
 800721c:	0940      	lsrs	r0, r0, #5
}
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	20003ec0 	.word	0x20003ec0
 8007224:	20004329 	.word	0x20004329
 8007228:	20003ec4 	.word	0x20003ec4

0800722c <createFile>:
int createFile(char name[]){
 800722c:	b538      	push	{r3, r4, r5, lr}
	if(xSemaphoreTake(SD_Semaphore,1000)){
 800722e:	4c0d      	ldr	r4, [pc, #52]	; (8007264 <createFile+0x38>)
 8007230:	2300      	movs	r3, #0
int createFile(char name[]){
 8007232:	4605      	mov	r5, r0
	if(xSemaphoreTake(SD_Semaphore,1000)){
 8007234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007238:	4619      	mov	r1, r3
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	f7ff f8ea 	bl	8006414 <xQueueGenericReceive>
 8007240:	b178      	cbz	r0, 8007262 <createFile+0x36>
		FRESULT FR = f_open(&fileObj, name, FA_CREATE_NEW);
 8007242:	2204      	movs	r2, #4
 8007244:	4629      	mov	r1, r5
 8007246:	4808      	ldr	r0, [pc, #32]	; (8007268 <createFile+0x3c>)
 8007248:	f7fd fdc8 	bl	8004ddc <f_open>
		if(FR == FR_OK){
 800724c:	b910      	cbnz	r0, 8007254 <createFile+0x28>
			f_close(&fileObj);
 800724e:	4806      	ldr	r0, [pc, #24]	; (8007268 <createFile+0x3c>)
 8007250:	f7fe f836 	bl	80052c0 <f_close>
		xSemaphoreGive(SD_Semaphore);
 8007254:	2300      	movs	r3, #0
 8007256:	461a      	mov	r2, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6820      	ldr	r0, [r4, #0]
 800725c:	f7fe ff5c 	bl	8006118 <xQueueGenericSend>
 8007260:	2001      	movs	r0, #1
}
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20003ec0 	.word	0x20003ec0
 8007268:	200040f8 	.word	0x200040f8

0800726c <formattedWriteFloat>:
UINT formattedWriteFloat(char name[], float data[], int size){
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(xSemaphoreTake(SD_Semaphore,1000)){
 8007270:	4e4e      	ldr	r6, [pc, #312]	; (80073ac <formattedWriteFloat+0x140>)
 8007272:	2300      	movs	r3, #0
UINT formattedWriteFloat(char name[], float data[], int size){
 8007274:	b08f      	sub	sp, #60	; 0x3c
 8007276:	4680      	mov	r8, r0
 8007278:	4689      	mov	r9, r1
 800727a:	4617      	mov	r7, r2
	if(xSemaphoreTake(SD_Semaphore,1000)){
 800727c:	4619      	mov	r1, r3
 800727e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007282:	6830      	ldr	r0, [r6, #0]
 8007284:	f7ff f8c6 	bl	8006414 <xQueueGenericReceive>
 8007288:	2800      	cmp	r0, #0
 800728a:	d045      	beq.n	8007318 <formattedWriteFloat+0xac>
		volatile FRESULT FR= f_open(&fileObj, name, FA_WRITE | FA_OPEN_APPEND);
 800728c:	4c48      	ldr	r4, [pc, #288]	; (80073b0 <formattedWriteFloat+0x144>)
 800728e:	2232      	movs	r2, #50	; 0x32
 8007290:	4641      	mov	r1, r8
 8007292:	4620      	mov	r0, r4
 8007294:	f7fd fda2 	bl	8004ddc <f_open>
 8007298:	f88d 000b 	strb.w	r0, [sp, #11]
		if(FR == FR_OK){
 800729c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80072a0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d16f      	bne.n	8007388 <formattedWriteFloat+0x11c>
			f_lseek(&fileObj, f_size(&fileObj));
 80072a8:	68e1      	ldr	r1, [r4, #12]
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
 80072aa:	f8df b120 	ldr.w	fp, [pc, #288]	; 80073cc <formattedWriteFloat+0x160>
			f_lseek(&fileObj, f_size(&fileObj));
 80072ae:	4620      	mov	r0, r4
 80072b0:	f7fe f81f 	bl	80052f2 <f_lseek>
			HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 80072b4:	462a      	mov	r2, r5
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	483e      	ldr	r0, [pc, #248]	; (80073b4 <formattedWriteFloat+0x148>)
 80072ba:	f7fb feb7 	bl	800302c <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
 80072be:	462a      	mov	r2, r5
 80072c0:	a903      	add	r1, sp, #12
 80072c2:	483c      	ldr	r0, [pc, #240]	; (80073b4 <formattedWriteFloat+0x148>)
 80072c4:	f7fb feda 	bl	800307c <HAL_RTC_GetDate>
			f_printf(&fileObj,"%d/%d/%d,",RTC_Date.Date,RTC_Date.Month,RTC_Date.Year);
 80072c8:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80072cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80072d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80072d4:	9100      	str	r1, [sp, #0]
 80072d6:	4620      	mov	r0, r4
 80072d8:	4937      	ldr	r1, [pc, #220]	; (80073b8 <formattedWriteFloat+0x14c>)
 80072da:	f7fe f936 	bl	800554a <f_printf>
			f_printf(&fileObj,"%d:%d:%d,",RTC_Time.Hours,RTC_Time.Minutes,RTC_Time.Seconds);
 80072de:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80072e2:	9100      	str	r1, [sp, #0]
 80072e4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80072e8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80072ec:	4933      	ldr	r1, [pc, #204]	; (80073bc <formattedWriteFloat+0x150>)
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7fe f92b 	bl	800554a <f_printf>
 80072f4:	46ca      	mov	sl, r9
			for(int i = 0; i < size; i++){
 80072f6:	42bd      	cmp	r5, r7
 80072f8:	db12      	blt.n	8007320 <formattedWriteFloat+0xb4>
			f_printf(&fileObj,"\n");
 80072fa:	4931      	ldr	r1, [pc, #196]	; (80073c0 <formattedWriteFloat+0x154>)
 80072fc:	482c      	ldr	r0, [pc, #176]	; (80073b0 <formattedWriteFloat+0x144>)
 80072fe:	f7fe f924 	bl	800554a <f_printf>
			FR = f_close(&fileObj);
 8007302:	482b      	ldr	r0, [pc, #172]	; (80073b0 <formattedWriteFloat+0x144>)
 8007304:	f7fd ffdc 	bl	80052c0 <f_close>
 8007308:	f88d 000b 	strb.w	r0, [sp, #11]
		xSemaphoreGive(SD_Semaphore);
 800730c:	2300      	movs	r3, #0
 800730e:	461a      	mov	r2, r3
 8007310:	4619      	mov	r1, r3
 8007312:	6830      	ldr	r0, [r6, #0]
 8007314:	f7fe ff00 	bl	8006118 <xQueueGenericSend>
}
 8007318:	2000      	movs	r0, #0
 800731a:	b00f      	add	sp, #60	; 0x3c
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				floatToString(data[i],buffer);
 8007320:	f85a 0b04 	ldr.w	r0, [sl], #4
 8007324:	f7f9 f8d8 	bl	80004d8 <__aeabi_f2d>
 8007328:	ec41 0b10 	vmov	d0, r0, r1
 800732c:	a809      	add	r0, sp, #36	; 0x24
 800732e:	f000 f8fb 	bl	8007528 <floatToString>
				int test = f_printf(&fileObj,"%s",buffer);
 8007332:	aa09      	add	r2, sp, #36	; 0x24
 8007334:	4923      	ldr	r1, [pc, #140]	; (80073c4 <formattedWriteFloat+0x158>)
 8007336:	4620      	mov	r0, r4
 8007338:	f7fe f907 	bl	800554a <f_printf>
				if(test){
 800733c:	b1d0      	cbz	r0, 8007374 <formattedWriteFloat+0x108>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
 800733e:	2201      	movs	r2, #1
 8007340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007344:	4658      	mov	r0, fp
 8007346:	f7f9 ff9d 	bl	8001284 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 800734a:	200a      	movs	r0, #10
 800734c:	f7f9 fd8e 	bl	8000e6c <HAL_Delay>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_RESET);
 8007350:	4658      	mov	r0, fp
 8007352:	2200      	movs	r2, #0
 8007354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007358:	f7f9 ff94 	bl	8001284 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 800735c:	200a      	movs	r0, #10
 800735e:	f7f9 fd85 	bl	8000e6c <HAL_Delay>
				if(i != size-1){
 8007362:	1e7b      	subs	r3, r7, #1
 8007364:	429d      	cmp	r5, r3
 8007366:	d003      	beq.n	8007370 <formattedWriteFloat+0x104>
					f_printf(&fileObj,",");
 8007368:	4917      	ldr	r1, [pc, #92]	; (80073c8 <formattedWriteFloat+0x15c>)
 800736a:	4620      	mov	r0, r4
 800736c:	f7fe f8ed 	bl	800554a <f_printf>
			for(int i = 0; i < size; i++){
 8007370:	3501      	adds	r5, #1
 8007372:	e7c0      	b.n	80072f6 <formattedWriteFloat+0x8a>
					HAL_Delay(1000);
 8007374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007378:	f7f9 fd78 	bl	8000e6c <HAL_Delay>
					formattedWriteFloat(name, data,size);
 800737c:	463a      	mov	r2, r7
 800737e:	4649      	mov	r1, r9
 8007380:	4640      	mov	r0, r8
 8007382:	f7ff ff73 	bl	800726c <formattedWriteFloat>
 8007386:	e7ec      	b.n	8007362 <formattedWriteFloat+0xf6>
			xSemaphoreGive(SD_Semaphore);
 8007388:	2300      	movs	r3, #0
 800738a:	461a      	mov	r2, r3
 800738c:	4619      	mov	r1, r3
 800738e:	6830      	ldr	r0, [r6, #0]
 8007390:	f7fe fec2 	bl	8006118 <xQueueGenericSend>
			HAL_Delay(100);
 8007394:	2064      	movs	r0, #100	; 0x64
 8007396:	f7f9 fd69 	bl	8000e6c <HAL_Delay>
			SD_Config();
 800739a:	f7ff ff27 	bl	80071ec <SD_Config>
			formattedWriteFloat(name, data,size);
 800739e:	463a      	mov	r2, r7
 80073a0:	4649      	mov	r1, r9
 80073a2:	4640      	mov	r0, r8
 80073a4:	f7ff ff62 	bl	800726c <formattedWriteFloat>
 80073a8:	e7b0      	b.n	800730c <formattedWriteFloat+0xa0>
 80073aa:	bf00      	nop
 80073ac:	20003ec0 	.word	0x20003ec0
 80073b0:	200040f8 	.word	0x200040f8
 80073b4:	20003e60 	.word	0x20003e60
 80073b8:	08008044 	.word	0x08008044
 80073bc:	0800804e 	.word	0x0800804e
 80073c0:	0800805e 	.word	0x0800805e
 80073c4:	08008058 	.word	0x08008058
 80073c8:	0800804c 	.word	0x0800804c
 80073cc:	40020800 	.word	0x40020800

080073d0 <writeString>:
UINT writeString(char name[], char data[]){
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(xSemaphoreTake(SD_Semaphore,1000)){
 80073d2:	4d15      	ldr	r5, [pc, #84]	; (8007428 <writeString+0x58>)
 80073d4:	2300      	movs	r3, #0
UINT writeString(char name[], char data[]){
 80073d6:	4607      	mov	r7, r0
 80073d8:	460e      	mov	r6, r1
	if(xSemaphoreTake(SD_Semaphore,1000)){
 80073da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073de:	4619      	mov	r1, r3
 80073e0:	6828      	ldr	r0, [r5, #0]
 80073e2:	f7ff f817 	bl	8006414 <xQueueGenericReceive>
 80073e6:	b1e0      	cbz	r0, 8007422 <writeString+0x52>
		if(f_open(&fileObj, name, FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 80073e8:	4c10      	ldr	r4, [pc, #64]	; (800742c <writeString+0x5c>)
 80073ea:	2232      	movs	r2, #50	; 0x32
 80073ec:	4639      	mov	r1, r7
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7fd fcf4 	bl	8004ddc <f_open>
 80073f4:	b978      	cbnz	r0, 8007416 <writeString+0x46>
			f_lseek(&fileObj, f_size(&fileObj));
 80073f6:	68e1      	ldr	r1, [r4, #12]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f7fd ff7a 	bl	80052f2 <f_lseek>
			f_printf(&fileObj,"%s",data);
 80073fe:	4632      	mov	r2, r6
 8007400:	490b      	ldr	r1, [pc, #44]	; (8007430 <writeString+0x60>)
 8007402:	4620      	mov	r0, r4
 8007404:	f7fe f8a1 	bl	800554a <f_printf>
			f_printf(&fileObj,"\n");
 8007408:	490a      	ldr	r1, [pc, #40]	; (8007434 <writeString+0x64>)
 800740a:	4620      	mov	r0, r4
 800740c:	f7fe f89d 	bl	800554a <f_printf>
			f_close(&fileObj);
 8007410:	4620      	mov	r0, r4
 8007412:	f7fd ff55 	bl	80052c0 <f_close>
		xSemaphoreGive(SD_Semaphore);
 8007416:	2300      	movs	r3, #0
 8007418:	461a      	mov	r2, r3
 800741a:	4619      	mov	r1, r3
 800741c:	6828      	ldr	r0, [r5, #0]
 800741e:	f7fe fe7b 	bl	8006118 <xQueueGenericSend>
}
 8007422:	2000      	movs	r0, #0
 8007424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007426:	bf00      	nop
 8007428:	20003ec0 	.word	0x20003ec0
 800742c:	200040f8 	.word	0x200040f8
 8007430:	08008058 	.word	0x08008058
 8007434:	0800805e 	.word	0x0800805e

08007438 <getFileSize>:
char getFileSize(char fileName[]){
 8007438:	b510      	push	{r4, lr}
 800743a:	4604      	mov	r4, r0
	if(xSemaphoreTake(SD_Semaphore,1000)){
 800743c:	4807      	ldr	r0, [pc, #28]	; (800745c <getFileSize+0x24>)
 800743e:	2300      	movs	r3, #0
 8007440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007444:	4619      	mov	r1, r3
 8007446:	6800      	ldr	r0, [r0, #0]
 8007448:	f7fe ffe4 	bl	8006414 <xQueueGenericReceive>
 800744c:	b120      	cbz	r0, 8007458 <getFileSize+0x20>
 800744e:	4620      	mov	r0, r4
}
 8007450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007454:	f7ff beb0 	b.w	80071b8 <getFileSize.part.3>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	20003ec0 	.word	0x20003ec0

08007460 <initFileSystem>:

int initFileSystem(){
 8007460:	b508      	push	{r3, lr}
	SD_Semaphore = xSemaphoreCreateMutex();
 8007462:	2001      	movs	r0, #1
 8007464:	f7fe ff0e 	bl	8006284 <xQueueCreateMutex>
 8007468:	4b08      	ldr	r3, [pc, #32]	; (800748c <initFileSystem+0x2c>)
 800746a:	6018      	str	r0, [r3, #0]
	SD_Config();
 800746c:	f7ff febe 	bl	80071ec <SD_Config>
	createFile("GravData.csv");
 8007470:	4807      	ldr	r0, [pc, #28]	; (8007490 <initFileSystem+0x30>)
 8007472:	f7ff fedb 	bl	800722c <createFile>
	if(getFileSize("GravData.csv") < 1){
 8007476:	4806      	ldr	r0, [pc, #24]	; (8007490 <initFileSystem+0x30>)
 8007478:	f7ff ffde 	bl	8007438 <getFileSize>
 800747c:	b918      	cbnz	r0, 8007486 <initFileSystem+0x26>
		writeString("GravData.csv","Date,Time,GravX,GravY,GravZ,Calibration Status,BNO Temp");
 800747e:	4905      	ldr	r1, [pc, #20]	; (8007494 <initFileSystem+0x34>)
 8007480:	4803      	ldr	r0, [pc, #12]	; (8007490 <initFileSystem+0x30>)
 8007482:	f7ff ffa5 	bl	80073d0 <writeString>
	}
	return 1;
}
 8007486:	2001      	movs	r0, #1
 8007488:	bd08      	pop	{r3, pc}
 800748a:	bf00      	nop
 800748c:	20003ec0 	.word	0x20003ec0
 8007490:	08008060 	.word	0x08008060
 8007494:	0800806d 	.word	0x0800806d

08007498 <twosCompliment>:
	  }
}



int twosCompliment(volatile int data){
 8007498:	b082      	sub	sp, #8
 800749a:	9001      	str	r0, [sp, #4]
	if(data > 32768){
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a2:	dd0b      	ble.n	80074bc <twosCompliment+0x24>
		data = data ^ 0b1111111111111111;
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 80074aa:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80074ae:	9301      	str	r3, [sp, #4]
		data = data+1;
 80074b0:	9b01      	ldr	r3, [sp, #4]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9301      	str	r3, [sp, #4]
		data = data * -1;
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	425b      	negs	r3, r3
 80074ba:	9301      	str	r3, [sp, #4]
	}
	return data;
 80074bc:	9801      	ldr	r0, [sp, #4]
}
 80074be:	b002      	add	sp, #8
 80074c0:	4770      	bx	lr

080074c2 <intToString>:

int intToString(int intVal, char * buffer,int len,int negative){
 80074c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = 0;
	char temp[20];
	if(intVal < 0){
 80074c4:	1e04      	subs	r4, r0, #0
int intToString(int intVal, char * buffer,int len,int negative){
 80074c6:	b087      	sub	sp, #28
		negative = 1;
		intVal*=-1;
 80074c8:	bfbc      	itt	lt
 80074ca:	4264      	neglt	r4, r4
		negative = 1;
 80074cc:	2301      	movlt	r3, #1
 80074ce:	2500      	movs	r5, #0
	}
	while(intVal  > 0){
		if(intVal>=0){
			temp[i++] = (intVal%10) + '0';
 80074d0:	af01      	add	r7, sp, #4
 80074d2:	200a      	movs	r0, #10
	while(intVal  > 0){
 80074d4:	b9a4      	cbnz	r4, 8007500 <intToString+0x3e>
			intVal = intVal/10;
		}
	}
	while(i < len){
			temp[i++] = '0';
 80074d6:	ae01      	add	r6, sp, #4
 80074d8:	2730      	movs	r7, #48	; 0x30
	while(i < len){
 80074da:	4295      	cmp	r5, r2
 80074dc:	4628      	mov	r0, r5
 80074de:	db18      	blt.n	8007512 <intToString+0x50>
	}
	if(negative){
 80074e0:	b12b      	cbz	r3, 80074ee <intToString+0x2c>
			temp[i++] = '-';
 80074e2:	ab06      	add	r3, sp, #24
 80074e4:	442b      	add	r3, r5
 80074e6:	222d      	movs	r2, #45	; 0x2d
 80074e8:	f803 2c14 	strb.w	r2, [r3, #-20]
 80074ec:	3001      	adds	r0, #1
 80074ee:	4401      	add	r1, r0
 80074f0:	460b      	mov	r3, r1
	}
	for(int j = 0; j < i;j++){
		buffer[i-1-j] = temp[j];
 80074f2:	aa01      	add	r2, sp, #4
	for(int j = 0; j < i;j++){
 80074f4:	42a0      	cmp	r0, r4
 80074f6:	dc0f      	bgt.n	8007518 <intToString+0x56>
	}
	buffer[i] = '\0';
 80074f8:	2300      	movs	r3, #0
 80074fa:	700b      	strb	r3, [r1, #0]
	return i;
}
 80074fc:	b007      	add	sp, #28
 80074fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp[i++] = (intVal%10) + '0';
 8007500:	fb94 f6f0 	sdiv	r6, r4, r0
 8007504:	fb00 4416 	mls	r4, r0, r6, r4
 8007508:	3430      	adds	r4, #48	; 0x30
 800750a:	55ec      	strb	r4, [r5, r7]
			intVal = intVal/10;
 800750c:	4634      	mov	r4, r6
 800750e:	3501      	adds	r5, #1
 8007510:	e7e0      	b.n	80074d4 <intToString+0x12>
			temp[i++] = '0';
 8007512:	55af      	strb	r7, [r5, r6]
 8007514:	3501      	adds	r5, #1
 8007516:	e7e0      	b.n	80074da <intToString+0x18>
		buffer[i-1-j] = temp[j];
 8007518:	5ca5      	ldrb	r5, [r4, r2]
 800751a:	f803 5d01 	strb.w	r5, [r3, #-1]!
	for(int j = 0; j < i;j++){
 800751e:	3401      	adds	r4, #1
 8007520:	e7e8      	b.n	80074f4 <intToString+0x32>
 8007522:	0000      	movs	r0, r0
 8007524:	0000      	movs	r0, r0
	...

08007528 <floatToString>:
void floatToString(double number, char buffer[]){
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	ec57 6b10 	vmov	r6, r7, d0
 8007530:	b086      	sub	sp, #24
 8007532:	4605      	mov	r5, r0
	int intVal = (int)number;
 8007534:	4639      	mov	r1, r7
 8007536:	ee10 0a10 	vmov	r0, s0
 800753a:	f7f9 fabb 	bl	8000ab4 <__aeabi_d2iz>
	int negative = 0;
	if(number < 0)
 800753e:	4639      	mov	r1, r7
	int intVal = (int)number;
 8007540:	4680      	mov	r8, r0
	if(number < 0)
 8007542:	2200      	movs	r2, #0
 8007544:	2300      	movs	r3, #0
 8007546:	4630      	mov	r0, r6
 8007548:	f7f9 fa8c 	bl	8000a64 <__aeabi_dcmplt>
		negative = 1;
	int place = intToString(intVal,buffer,1,negative);
 800754c:	1c03      	adds	r3, r0, #0
 800754e:	bf18      	it	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2201      	movs	r2, #1
 8007554:	4629      	mov	r1, r5
 8007556:	4640      	mov	r0, r8
 8007558:	f7ff ffb3 	bl	80074c2 <intToString>
	char temp[20];
	buffer[place] = '.';
 800755c:	232e      	movs	r3, #46	; 0x2e
 800755e:	542b      	strb	r3, [r5, r0]
	int place = intToString(intVal,buffer,1,negative);
 8007560:	4604      	mov	r4, r0
	number -= intVal;
 8007562:	4640      	mov	r0, r8
 8007564:	f7f8 ffa6 	bl	80004b4 <__aeabi_i2d>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4630      	mov	r0, r6
 800756e:	4639      	mov	r1, r7
 8007570:	f7f8 fe52 	bl	8000218 <__aeabi_dsub>
	if(number>0){
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
	number -= intVal;
 8007578:	4606      	mov	r6, r0
 800757a:	460f      	mov	r7, r1
	if(number>0){
 800757c:	f7f9 fa90 	bl	8000aa0 <__aeabi_dcmpgt>
 8007580:	b1a8      	cbz	r0, 80075ae <floatToString+0x86>
		number*=100000.0;
 8007582:	a311      	add	r3, pc, #68	; (adr r3, 80075c8 <floatToString+0xa0>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
	}else{
		number*=-100000.0;
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f8 fff8 	bl	8000580 <__aeabi_dmul>
	}
	int place2 = intToString((int)number, temp,5,0);
 8007590:	f7f9 fa90 	bl	8000ab4 <__aeabi_d2iz>
 8007594:	2300      	movs	r3, #0
 8007596:	2205      	movs	r2, #5
 8007598:	a901      	add	r1, sp, #4
 800759a:	f7ff ff92 	bl	80074c2 <intToString>
	int i = place+1;
	for(i = place+1; i < place+2+place2; i++){
 800759e:	1ca2      	adds	r2, r4, #2
	int i = place+1;
 80075a0:	1c63      	adds	r3, r4, #1
	for(i = place+1; i < place+2+place2; i++){
 80075a2:	4410      	add	r0, r2
 80075a4:	4283      	cmp	r3, r0
 80075a6:	db06      	blt.n	80075b6 <floatToString+0x8e>
		buffer[i] = temp[i-place-1];
	}
}
 80075a8:	b006      	add	sp, #24
 80075aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		number*=-100000.0;
 80075ae:	a308      	add	r3, pc, #32	; (adr r3, 80075d0 <floatToString+0xa8>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	e7e8      	b.n	8007588 <floatToString+0x60>
		buffer[i] = temp[i-place-1];
 80075b6:	1b1a      	subs	r2, r3, r4
 80075b8:	a901      	add	r1, sp, #4
 80075ba:	440a      	add	r2, r1
 80075bc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80075c0:	54ea      	strb	r2, [r5, r3]
	for(i = place+1; i < place+2+place2; i++){
 80075c2:	3301      	adds	r3, #1
 80075c4:	e7ee      	b.n	80075a4 <floatToString+0x7c>
 80075c6:	bf00      	nop
 80075c8:	00000000 	.word	0x00000000
 80075cc:	40f86a00 	.word	0x40f86a00
 80075d0:	00000000 	.word	0x00000000
 80075d4:	c0f86a00 	.word	0xc0f86a00

080075d8 <logGravData>:

void logGravData(){
 80075d8:	b500      	push	{lr}
 80075da:	b08b      	sub	sp, #44	; 0x2c
	volatile vector grav;
	calib_Status calib;
	calib = getCalibrationStatus();
 80075dc:	f7ff fd84 	bl	80070e8 <getCalibrationStatus>
 80075e0:	9001      	str	r0, [sp, #4]
	grav = getGravVector();
 80075e2:	f7ff fd99 	bl	8007118 <getGravVector>
 80075e6:	ed8d 0a02 	vstr	s0, [sp, #8]
 80075ea:	edcd 0a03 	vstr	s1, [sp, #12]
 80075ee:	ed8d 1a04 	vstr	s2, [sp, #16]
	float gravArray[5] = {grav.X,grav.Y,grav.Z,calib.ACC,bnO_getTemp()};
 80075f2:	9b02      	ldr	r3, [sp, #8]
 80075f4:	9305      	str	r3, [sp, #20]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	9306      	str	r3, [sp, #24]
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	9307      	str	r3, [sp, #28]
 80075fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	edcd 7a08 	vstr	s15, [sp, #32]
 800760e:	f7ff fd65 	bl	80070dc <bnO_getTemp>
 8007612:	ee07 0a90 	vmov	s15, r0
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
	formattedWriteFloat("GravData.csv",gravArray,5);
 800761a:	2205      	movs	r2, #5
 800761c:	a905      	add	r1, sp, #20
 800761e:	4804      	ldr	r0, [pc, #16]	; (8007630 <logGravData+0x58>)
	float gravArray[5] = {grav.X,grav.Y,grav.Z,calib.ACC,bnO_getTemp()};
 8007620:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
	formattedWriteFloat("GravData.csv",gravArray,5);
 8007624:	f7ff fe22 	bl	800726c <formattedWriteFloat>
}
 8007628:	b00b      	add	sp, #44	; 0x2c
 800762a:	f85d fb04 	ldr.w	pc, [sp], #4
 800762e:	bf00      	nop
 8007630:	08008060 	.word	0x08008060

08007634 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007634:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8007636:	2001      	movs	r0, #1
 8007638:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800763c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007640:	4283      	cmp	r3, r0
 8007642:	d102      	bne.n	800764a <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8007644:	4802      	ldr	r0, [pc, #8]	; (8007650 <BSP_SD_Init+0x1c>)
 8007646:	f7fc f851 	bl	80036ec <HAL_SD_Init>
}
 800764a:	b003      	add	sp, #12
 800764c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007650:	20004798 	.word	0x20004798

08007654 <BSP_SD_ReadBlocks_DMA>:
{
 8007654:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007656:	4613      	mov	r3, r2
 8007658:	460a      	mov	r2, r1
 800765a:	4601      	mov	r1, r0
 800765c:	4803      	ldr	r0, [pc, #12]	; (800766c <BSP_SD_ReadBlocks_DMA+0x18>)
 800765e:	f7fb fd53 	bl	8003108 <HAL_SD_ReadBlocks_DMA>
}
 8007662:	3000      	adds	r0, #0
 8007664:	bf18      	it	ne
 8007666:	2001      	movne	r0, #1
 8007668:	bd08      	pop	{r3, pc}
 800766a:	bf00      	nop
 800766c:	20004798 	.word	0x20004798

08007670 <BSP_SD_WriteBlocks_DMA>:
{
 8007670:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007672:	4613      	mov	r3, r2
 8007674:	460a      	mov	r2, r1
 8007676:	4601      	mov	r1, r0
 8007678:	4803      	ldr	r0, [pc, #12]	; (8007688 <BSP_SD_WriteBlocks_DMA+0x18>)
 800767a:	f7fb fdcb 	bl	8003214 <HAL_SD_WriteBlocks_DMA>
}
 800767e:	3000      	adds	r0, #0
 8007680:	bf18      	it	ne
 8007682:	2001      	movne	r0, #1
 8007684:	bd08      	pop	{r3, pc}
 8007686:	bf00      	nop
 8007688:	20004798 	.word	0x20004798

0800768c <BSP_SD_GetCardState>:
{
 800768c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800768e:	4803      	ldr	r0, [pc, #12]	; (800769c <BSP_SD_GetCardState+0x10>)
 8007690:	f7fc f858 	bl	8003744 <HAL_SD_GetCardState>
}
 8007694:	3804      	subs	r0, #4
 8007696:	bf18      	it	ne
 8007698:	2001      	movne	r0, #1
 800769a:	bd08      	pop	{r3, pc}
 800769c:	20004798 	.word	0x20004798

080076a0 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80076a0:	4601      	mov	r1, r0
 80076a2:	4801      	ldr	r0, [pc, #4]	; (80076a8 <BSP_SD_GetCardInfo+0x8>)
 80076a4:	f7fc b83c 	b.w	8003720 <HAL_SD_GetCardInfo>
 80076a8:	20004798 	.word	0x20004798

080076ac <HAL_SD_RxCpltCallback>:
{
 80076ac:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80076ae:	f000 fa2d 	bl	8007b0c <BSP_SD_ReadCpltCallback>
 80076b2:	bd08      	pop	{r3, pc}

080076b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80076b4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80076b6:	4903      	ldr	r1, [pc, #12]	; (80076c4 <MX_FATFS_Init+0x10>)
 80076b8:	4803      	ldr	r0, [pc, #12]	; (80076c8 <MX_FATFS_Init+0x14>)
 80076ba:	f7fe f861 	bl	8005780 <FATFS_LinkDriver>
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <MX_FATFS_Init+0x18>)
 80076c0:	7018      	strb	r0, [r3, #0]
 80076c2:	bd08      	pop	{r3, pc}
 80076c4:	20004329 	.word	0x20004329
 80076c8:	080080b8 	.word	0x080080b8
 80076cc:	20004328 	.word	0x20004328

080076d0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80076d0:	2000      	movs	r0, #0
 80076d2:	4770      	bx	lr

080076d4 <vTaskBNOData>:
static void MX_RTC_Init(void);
static void MX_I2C2_Init(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
void vTaskBNOData(void *pvParameters){
 80076d4:	b508      	push	{r3, lr}
	for(;;){
//		if(xSemaphoreTake(gateKeeper,1000)){
			logGravData();
 80076d6:	f7ff ff7f 	bl	80075d8 <logGravData>
//			xSemaphoreGive(gateKeeper);
//		}
		vTaskDelay(100/portTICK_PERIOD_MS);
 80076da:	2064      	movs	r0, #100	; 0x64
 80076dc:	f7ff fa64 	bl	8006ba8 <vTaskDelay>
 80076e0:	e7f9      	b.n	80076d6 <vTaskBNOData+0x2>

080076e2 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80076e2:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 80076e4:	f7ff ffe6 	bl	80076b4 <MX_FATFS_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80076e8:	2001      	movs	r0, #1
 80076ea:	f7fe f897 	bl	800581c <osDelay>
 80076ee:	e7fb      	b.n	80076e8 <StartDefaultTask+0x6>

080076f0 <SystemClock_Config>:
{
 80076f0:	b510      	push	{r4, lr}
 80076f2:	b0ac      	sub	sp, #176	; 0xb0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80076f4:	2234      	movs	r2, #52	; 0x34
 80076f6:	2100      	movs	r1, #0
 80076f8:	a808      	add	r0, sp, #32
 80076fa:	f000 fc36 	bl	8007f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076fe:	2214      	movs	r2, #20
 8007700:	2100      	movs	r1, #0
 8007702:	a803      	add	r0, sp, #12
 8007704:	f000 fc31 	bl	8007f6a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007708:	2100      	movs	r1, #0
 800770a:	225c      	movs	r2, #92	; 0x5c
 800770c:	a815      	add	r0, sp, #84	; 0x54
 800770e:	f000 fc2c 	bl	8007f6a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8007712:	2400      	movs	r4, #0
 8007714:	4b22      	ldr	r3, [pc, #136]	; (80077a0 <SystemClock_Config+0xb0>)
 8007716:	9401      	str	r4, [sp, #4]
 8007718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800771a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800771e:	641a      	str	r2, [r3, #64]	; 0x40
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007722:	4a20      	ldr	r2, [pc, #128]	; (80077a4 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800772c:	9402      	str	r4, [sp, #8]
 800772e:	6813      	ldr	r3, [r2, #0]
 8007730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800773c:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800773e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007742:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007744:	2210      	movs	r2, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007746:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007748:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800774a:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLM = 8;
 800774c:	2208      	movs	r2, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800774e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007750:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007752:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007754:	2248      	movs	r2, #72	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007756:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007758:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 72;
 800775a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800775c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800775e:	2203      	movs	r2, #3
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007760:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8007762:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007764:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007766:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007768:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800776a:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800776c:	f7fb f960 	bl	8002a30 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007770:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007772:	4621      	mov	r1, r4
 8007774:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007776:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007778:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800777a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800777c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800777e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007780:	f7fa fe3e 	bl	8002400 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDIO
 8007784:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007788:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800778a:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800778c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007790:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007792:	942a      	str	r4, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8007794:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007796:	f7fa fefb 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
}
 800779a:	b02c      	add	sp, #176	; 0xb0
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	40023800 	.word	0x40023800
 80077a4:	40007000 	.word	0x40007000

080077a8 <main>:
{
 80077a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077ac:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80077ae:	f7f9 fb31 	bl	8000e14 <HAL_Init>
  SystemClock_Config();
 80077b2:	f7ff ff9d 	bl	80076f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077b6:	2214      	movs	r2, #20
 80077b8:	2100      	movs	r1, #0
 80077ba:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077bc:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077be:	f000 fbd4 	bl	8007f6a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077c2:	4b64      	ldr	r3, [pc, #400]	; (8007954 <main+0x1ac>)
 80077c4:	9403      	str	r4, [sp, #12]
 80077c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80077c8:	4863      	ldr	r0, [pc, #396]	; (8007958 <main+0x1b0>)
  hi2c1.Instance = I2C1;
 80077ca:	4d64      	ldr	r5, [pc, #400]	; (800795c <main+0x1b4>)
  hi2c1.Init.ClockSpeed = 100000;
 80077cc:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8007994 <main+0x1ec>
  hrtc.Instance = RTC;
 80077d0:	4e63      	ldr	r6, [pc, #396]	; (8007960 <main+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077d2:	f042 0204 	orr.w	r2, r2, #4
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
 80077d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077da:	f002 0204 	and.w	r2, r2, #4
 80077de:	9203      	str	r2, [sp, #12]
 80077e0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e2:	9404      	str	r4, [sp, #16]
 80077e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e6:	f042 0202 	orr.w	r2, r2, #2
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
 80077ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ee:	f002 0202 	and.w	r2, r2, #2
 80077f2:	9204      	str	r2, [sp, #16]
 80077f4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077f6:	9405      	str	r4, [sp, #20]
 80077f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007802:	f002 0201 	and.w	r2, r2, #1
 8007806:	9205      	str	r2, [sp, #20]
 8007808:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800780a:	9406      	str	r4, [sp, #24]
 800780c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780e:	f042 0208 	orr.w	r2, r2, #8
 8007812:	631a      	str	r2, [r3, #48]	; 0x30
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800781a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800781c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800781e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007822:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007824:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8007826:	f7f9 fd2d 	bl	8001284 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800782a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800782c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007830:	4849      	ldr	r0, [pc, #292]	; (8007958 <main+0x1b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007832:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007834:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007836:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007838:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800783a:	f7f9 fc49 	bl	80010d0 <HAL_GPIO_Init>
  hcan1.Instance = CAN1;
 800783e:	4849      	ldr	r0, [pc, #292]	; (8007964 <main+0x1bc>)
  hcan1.Init.Prescaler = 16;
 8007840:	4a49      	ldr	r2, [pc, #292]	; (8007968 <main+0x1c0>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007842:	6084      	str	r4, [r0, #8]
  hcan1.Init.Prescaler = 16;
 8007844:	2310      	movs	r3, #16
 8007846:	e880 000c 	stmia.w	r0, {r2, r3}
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800784a:	60c4      	str	r4, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800784c:	6104      	str	r4, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800784e:	6144      	str	r4, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007850:	7604      	strb	r4, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007852:	7644      	strb	r4, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007854:	7684      	strb	r4, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007856:	76c4      	strb	r4, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007858:	7704      	strb	r4, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800785a:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800785c:	f7f9 fb1a 	bl	8000e94 <HAL_CAN_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8007860:	4b42      	ldr	r3, [pc, #264]	; (800796c <main+0x1c4>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007862:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007864:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007868:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 800786a:	e885 0208 	stmia.w	r5, {r3, r9}
  hi2c1.Init.OwnAddress1 = 0;
 800786e:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007870:	f8c5 8010 	str.w	r8, [r5, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007874:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007876:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007878:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800787a:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800787c:	f7f9 fed0 	bl	8001620 <HAL_I2C_Init>
  hsd.Instance = SDIO;
 8007880:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <main+0x1c8>)
 8007882:	4a3c      	ldr	r2, [pc, #240]	; (8007974 <main+0x1cc>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007884:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007886:	e883 0014 	stmia.w	r3, {r2, r4}
  RTC_TimeTypeDef sTime = {0};
 800788a:	4621      	mov	r1, r4
 800788c:	2214      	movs	r2, #20
 800788e:	a807      	add	r0, sp, #28
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007890:	60dc      	str	r4, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007892:	611c      	str	r4, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007894:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8007896:	619c      	str	r4, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8007898:	f000 fb67 	bl	8007f6a <memset>
  hrtc.Instance = RTC;
 800789c:	4b36      	ldr	r3, [pc, #216]	; (8007978 <main+0x1d0>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800789e:	6134      	str	r4, [r6, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80078a0:	e886 0018 	stmia.w	r6, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 80078a4:	237f      	movs	r3, #127	; 0x7f
 80078a6:	60b3      	str	r3, [r6, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80078a8:	4630      	mov	r0, r6
  hrtc.Init.SynchPrediv = 255;
 80078aa:	23ff      	movs	r3, #255	; 0xff
 80078ac:	60f3      	str	r3, [r6, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80078ae:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80078b0:	61b4      	str	r4, [r6, #24]
  RTC_DateTypeDef sDate = {0};
 80078b2:	9402      	str	r4, [sp, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80078b4:	f7fb fa88 	bl	8002dc8 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80078b8:	463a      	mov	r2, r7
 80078ba:	a907      	add	r1, sp, #28
 80078bc:	4630      	mov	r0, r6
  sTime.Hours = 0x0;
 80078be:	f88d 401c 	strb.w	r4, [sp, #28]
  sTime.Minutes = 0x0;
 80078c2:	f88d 401d 	strb.w	r4, [sp, #29]
  sTime.Seconds = 0x0;
 80078c6:	f88d 401e 	strb.w	r4, [sp, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80078ca:	940a      	str	r4, [sp, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80078cc:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80078ce:	f7fb fb34 	bl	8002f3a <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80078d2:	2306      	movs	r3, #6
 80078d4:	f88d 3008 	strb.w	r3, [sp, #8]
  sDate.Month = RTC_MONTH_AUGUST;
 80078d8:	2308      	movs	r3, #8
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80078da:	463a      	mov	r2, r7
  sDate.Month = RTC_MONTH_AUGUST;
 80078dc:	f88d 3009 	strb.w	r3, [sp, #9]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80078e0:	a902      	add	r1, sp, #8
  sDate.Date = 0x17;
 80078e2:	2317      	movs	r3, #23
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80078e4:	4630      	mov	r0, r6
  sDate.Date = 0x17;
 80078e6:	f88d 300a 	strb.w	r3, [sp, #10]
  sDate.Year = 0x0;
 80078ea:	f88d 400b 	strb.w	r4, [sp, #11]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80078ee:	f7fb fac4 	bl	8002e7a <HAL_RTC_SetDate>
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 80078f2:	4621      	mov	r1, r4
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7fb fbe1 	bl	80030bc <HAL_RTCEx_SetCalibrationOutPut>
  hi2c2.Instance = I2C2;
 80078fa:	4820      	ldr	r0, [pc, #128]	; (800797c <main+0x1d4>)
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <main+0x1d8>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80078fe:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8007900:	e880 0208 	stmia.w	r0, {r3, r9}
  hi2c2.Init.OwnAddress1 = 0;
 8007904:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007906:	f8c0 8010 	str.w	r8, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800790a:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800790c:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800790e:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007910:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007912:	f7f9 fe85 	bl	8001620 <HAL_I2C_Init>
  initFileSystem();
 8007916:	f7ff fda3 	bl	8007460 <initFileSystem>
  bnO_init(&hi2c1,OPERATION_MODE_NDOF);
 800791a:	4628      	mov	r0, r5
 800791c:	210c      	movs	r1, #12
 800791e:	f7ff fb97 	bl	8007050 <bnO_init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007922:	4e18      	ldr	r6, [pc, #96]	; (8007984 <main+0x1dc>)
  BNOTask = xTaskCreate(vTaskBNOData,(const char* const)"BNO",configMINIMAL_STACK_SIZE,NULL,2,NULL);
 8007924:	4918      	ldr	r1, [pc, #96]	; (8007988 <main+0x1e0>)
 8007926:	9401      	str	r4, [sp, #4]
 8007928:	2302      	movs	r3, #2
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2280      	movs	r2, #128	; 0x80
 800792e:	4623      	mov	r3, r4
 8007930:	4816      	ldr	r0, [pc, #88]	; (800798c <main+0x1e4>)
 8007932:	f7fe ff0d 	bl	8006750 <xTaskCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007936:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007938:	ad07      	add	r5, sp, #28
 800793a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800793c:	6833      	ldr	r3, [r6, #0]
 800793e:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007940:	4621      	mov	r1, r4
 8007942:	a807      	add	r0, sp, #28
 8007944:	f7fd ff52 	bl	80057ec <osThreadCreate>
 8007948:	4b11      	ldr	r3, [pc, #68]	; (8007990 <main+0x1e8>)
 800794a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800794c:	f7fd ff3a 	bl	80057c4 <osKernelStart>
 8007950:	e7fe      	b.n	8007950 <main+0x1a8>
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800
 8007958:	40020800 	.word	0x40020800
 800795c:	20003db8 	.word	0x20003db8
 8007960:	20003e60 	.word	0x20003e60
 8007964:	2000481c 	.word	0x2000481c
 8007968:	40006400 	.word	0x40006400
 800796c:	40005400 	.word	0x40005400
 8007970:	20004798 	.word	0x20004798
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40002800 	.word	0x40002800
 800797c:	20003e0c 	.word	0x20003e0c
 8007980:	40005800 	.word	0x40005800
 8007984:	08007f94 	.word	0x08007f94
 8007988:	080080a5 	.word	0x080080a5
 800798c:	080076d5 	.word	0x080076d5
 8007990:	20004794 	.word	0x20004794
 8007994:	000186a0 	.word	0x000186a0

08007998 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007998:	6802      	ldr	r2, [r0, #0]
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800799c:	429a      	cmp	r2, r3
 800799e:	d101      	bne.n	80079a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80079a0:	f7f9 ba52 	b.w	8000e48 <HAL_IncTick>
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40001000 	.word	0x40001000

080079ac <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 80079ac:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 80079ae:	4c06      	ldr	r4, [pc, #24]	; (80079c8 <SD_CheckStatus.isra.0+0x1c>)
 80079b0:	2301      	movs	r3, #1
 80079b2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80079b4:	f7ff fe6a 	bl	800768c <BSP_SD_GetCardState>
 80079b8:	4623      	mov	r3, r4
 80079ba:	b918      	cbnz	r0, 80079c4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80079bc:	7822      	ldrb	r2, [r4, #0]
 80079be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079c2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80079c4:	7818      	ldrb	r0, [r3, #0]
}
 80079c6:	bd10      	pop	{r4, pc}
 80079c8:	20000009 	.word	0x20000009

080079cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80079cc:	b513      	push	{r0, r1, r4, lr}
  Stat = STA_NOINIT;
 80079ce:	4c0e      	ldr	r4, [pc, #56]	; (8007a08 <SD_initialize+0x3c>)
 80079d0:	2301      	movs	r3, #1
 80079d2:	7023      	strb	r3, [r4, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80079d4:	f7fd fefb 	bl	80057ce <osKernelRunning>
 80079d8:	b198      	cbz	r0, 8007a02 <SD_initialize+0x36>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80079da:	f7ff fe2b 	bl	8007634 <BSP_SD_Init>
 80079de:	b910      	cbnz	r0, 80079e6 <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 80079e0:	f7ff ffe4 	bl	80079ac <SD_CheckStatus.isra.0>
 80079e4:	7020      	strb	r0, [r4, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 80079e6:	7823      	ldrb	r3, [r4, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d00a      	beq.n	8007a02 <SD_initialize+0x36>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80079ec:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <SD_initialize+0x40>)
 80079ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079f2:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80079f6:	2100      	movs	r1, #0
 80079f8:	4668      	mov	r0, sp
 80079fa:	f7fd ff77 	bl	80058ec <osMessageCreate>
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <SD_initialize+0x44>)
 8007a00:	6018      	str	r0, [r3, #0]
    }
  }
  return Stat;
 8007a02:	7820      	ldrb	r0, [r4, #0]
}
 8007a04:	b002      	add	sp, #8
 8007a06:	bd10      	pop	{r4, pc}
 8007a08:	20000009 	.word	0x20000009
 8007a0c:	08007fa8 	.word	0x08007fa8
 8007a10:	20003db0 	.word	0x20003db0

08007a14 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8007a14:	f7ff bfca 	b.w	80079ac <SD_CheckStatus.isra.0>

08007a18 <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 8007a18:	b510      	push	{r4, lr}

    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8007a1a:	f7fd fee0 	bl	80057de <osKernelSysTick>
 8007a1e:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 8007a22:	3430      	adds	r4, #48	; 0x30
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8007a24:	f7fd fedb 	bl	80057de <osKernelSysTick>
 8007a28:	4284      	cmp	r4, r0
 8007a2a:	d801      	bhi.n	8007a30 <SD_read.part.1+0x18>
  DRESULT res = RES_ERROR;
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	e003      	b.n	8007a38 <SD_read.part.1+0x20>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a30:	f7ff fe2c 	bl	800768c <BSP_SD_GetCardState>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1f5      	bne.n	8007a24 <SD_read.part.1+0xc>
      }
    }
  }

  return res;
}
 8007a38:	bd10      	pop	{r4, pc}
	...

08007a3c <SD_read>:
{
 8007a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a3e:	4608      	mov	r0, r1
 8007a40:	4611      	mov	r1, r2
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7ff fe06 	bl	8007654 <BSP_SD_ReadBlocks_DMA>
 8007a48:	b988      	cbnz	r0, 8007a6e <SD_read+0x32>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <SD_read+0x3c>)
 8007a4c:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a50:	6819      	ldr	r1, [r3, #0]
 8007a52:	a801      	add	r0, sp, #4
 8007a54:	f7fd ff76 	bl	8005944 <osMessageGet>
    if (event.status == osEventMessage)
 8007a58:	9b01      	ldr	r3, [sp, #4]
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d107      	bne.n	8007a6e <SD_read+0x32>
      if (event.value.v == READ_CPLT_MSG)
 8007a5e:	9b02      	ldr	r3, [sp, #8]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d104      	bne.n	8007a6e <SD_read+0x32>
}
 8007a64:	b005      	add	sp, #20
 8007a66:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a6a:	f7ff bfd5 	b.w	8007a18 <SD_read.part.1>
 8007a6e:	2001      	movs	r0, #1
 8007a70:	b005      	add	sp, #20
 8007a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a76:	bf00      	nop
 8007a78:	20003db0 	.word	0x20003db0

08007a7c <SD_write>:
{
 8007a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7ff fdf4 	bl	8007670 <BSP_SD_WriteBlocks_DMA>
 8007a88:	b988      	cbnz	r0, 8007aae <SD_write+0x32>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <SD_write+0x3c>)
 8007a8c:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	a801      	add	r0, sp, #4
 8007a94:	f7fd ff56 	bl	8005944 <osMessageGet>
    if (event.status == osEventMessage)
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	2b10      	cmp	r3, #16
 8007a9c:	d107      	bne.n	8007aae <SD_write+0x32>
      if (event.value.v == WRITE_CPLT_MSG)
 8007a9e:	9b02      	ldr	r3, [sp, #8]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d104      	bne.n	8007aae <SD_write+0x32>
}
 8007aa4:	b005      	add	sp, #20
 8007aa6:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aaa:	f7ff bfb5 	b.w	8007a18 <SD_read.part.1>
 8007aae:	2001      	movs	r0, #1
 8007ab0:	b005      	add	sp, #20
 8007ab2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ab6:	bf00      	nop
 8007ab8:	20003db0 	.word	0x20003db0

08007abc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007abc:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <SD_ioctl+0x4c>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	07db      	lsls	r3, r3, #31
{
 8007ac4:	b088      	sub	sp, #32
 8007ac6:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007ac8:	d41b      	bmi.n	8007b02 <SD_ioctl+0x46>

  switch (cmd)
 8007aca:	2903      	cmp	r1, #3
 8007acc:	d803      	bhi.n	8007ad6 <SD_ioctl+0x1a>
 8007ace:	e8df f001 	tbb	[pc, r1]
 8007ad2:	0510      	.short	0x0510
 8007ad4:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8007ad6:	2004      	movs	r0, #4
  }

  return res;
}
 8007ad8:	b008      	add	sp, #32
 8007ada:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8007adc:	4668      	mov	r0, sp
 8007ade:	f7ff fddf 	bl	80076a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007ae2:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	e004      	b.n	8007af2 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8007ae8:	4668      	mov	r0, sp
 8007aea:	f7ff fdd9 	bl	80076a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8007af2:	2000      	movs	r0, #0
 8007af4:	e7f0      	b.n	8007ad8 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8007af6:	4668      	mov	r0, sp
 8007af8:	f7ff fdd2 	bl	80076a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	0a5b      	lsrs	r3, r3, #9
 8007b00:	e7f0      	b.n	8007ae4 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007b02:	2003      	movs	r0, #3
 8007b04:	e7e8      	b.n	8007ad8 <SD_ioctl+0x1c>
 8007b06:	bf00      	nop
 8007b08:	20000009 	.word	0x20000009

08007b0c <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8007b0c:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <BSP_SD_ReadCpltCallback+0x10>)
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	2101      	movs	r1, #1
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f7fd beed 	b.w	80058f4 <osMessagePut>
 8007b1a:	bf00      	nop
 8007b1c:	20003db0 	.word	0x20003db0

08007b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b20:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b22:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <HAL_MspInit+0x40>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	9200      	str	r2, [sp, #0]
 8007b28:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007b2a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007b2e:	6459      	str	r1, [r3, #68]	; 0x44
 8007b30:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007b32:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007b36:	9100      	str	r1, [sp, #0]
 8007b38:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b3a:	9201      	str	r2, [sp, #4]
 8007b3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b3e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007b42:	6419      	str	r1, [r3, #64]	; 0x40
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b4a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007b4c:	210f      	movs	r1, #15
 8007b4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b52:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007b54:	f7f9 fa2c 	bl	8000fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b58:	b003      	add	sp, #12
 8007b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b5e:	bf00      	nop
 8007b60:	40023800 	.word	0x40023800

08007b64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007b64:	b510      	push	{r4, lr}
 8007b66:	4604      	mov	r4, r0
 8007b68:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b6a:	2214      	movs	r2, #20
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	a803      	add	r0, sp, #12
 8007b70:	f000 f9fb 	bl	8007f6a <memset>
  if(hcan->Instance==CAN1)
 8007b74:	6822      	ldr	r2, [r4, #0]
 8007b76:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <HAL_CAN_MspInit+0x64>)
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d123      	bne.n	8007bc4 <HAL_CAN_MspInit+0x60>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007b7c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8007b80:	2100      	movs	r1, #0
 8007b82:	9101      	str	r1, [sp, #4]
 8007b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b86:	4811      	ldr	r0, [pc, #68]	; (8007bcc <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007b88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8007b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b90:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8007b94:	9201      	str	r2, [sp, #4]
 8007b96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b98:	9102      	str	r1, [sp, #8]
 8007b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	9302      	str	r3, [sp, #8]
 8007baa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007bac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007bb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007bbc:	2309      	movs	r3, #9
 8007bbe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc0:	f7f9 fa86 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007bc4:	b008      	add	sp, #32
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	40006400 	.word	0x40006400
 8007bcc:	40020000 	.word	0x40020000

08007bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	2214      	movs	r2, #20
{
 8007bd6:	b08b      	sub	sp, #44	; 0x2c
 8007bd8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bda:	2100      	movs	r1, #0
 8007bdc:	eb0d 0002 	add.w	r0, sp, r2
 8007be0:	f000 f9c3 	bl	8007f6a <memset>
  if(hi2c->Instance==I2C1)
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	4a3b      	ldr	r2, [pc, #236]	; (8007cd4 <HAL_I2C_MspInit+0x104>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d12e      	bne.n	8007c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bec:	4c3a      	ldr	r4, [pc, #232]	; (8007cd8 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bee:	483b      	ldr	r0, [pc, #236]	; (8007cdc <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	9500      	str	r5, [sp, #0]
 8007bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bf6:	f043 0302 	orr.w	r3, r3, #2
 8007bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8007bfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c06:	23c0      	movs	r3, #192	; 0xc0
 8007c08:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c0a:	2312      	movs	r3, #18
 8007c0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c12:	2303      	movs	r3, #3
 8007c14:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c16:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c18:	2304      	movs	r3, #4
 8007c1a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c1c:	f7f9 fa58 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c20:	9501      	str	r5, [sp, #4]
 8007c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c28:	6423      	str	r3, [r4, #64]	; 0x40
 8007c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c30:	9301      	str	r3, [sp, #4]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007c32:	201f      	movs	r0, #31
 8007c34:	462a      	mov	r2, r5
 8007c36:	2105      	movs	r1, #5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c38:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007c3a:	f7f9 f9b9 	bl	8000fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007c3e:	201f      	movs	r0, #31
 8007c40:	f7f9 f9ea 	bl	8001018 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007c44:	b00b      	add	sp, #44	; 0x2c
 8007c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hi2c->Instance==I2C2)
 8007c4a:	4a25      	ldr	r2, [pc, #148]	; (8007ce0 <HAL_I2C_MspInit+0x110>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d1f9      	bne.n	8007c44 <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c50:	4c21      	ldr	r4, [pc, #132]	; (8007cd8 <HAL_I2C_MspInit+0x108>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c52:	4822      	ldr	r0, [pc, #136]	; (8007cdc <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c54:	2500      	movs	r5, #0
 8007c56:	9502      	str	r5, [sp, #8]
 8007c58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c5a:	f043 0302 	orr.w	r3, r3, #2
 8007c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	9302      	str	r3, [sp, #8]
 8007c68:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c6a:	9503      	str	r5, [sp, #12]
 8007c6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c6e:	f043 0304 	orr.w	r3, r3, #4
 8007c72:	6323      	str	r3, [r4, #48]	; 0x30
 8007c74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	9303      	str	r3, [sp, #12]
 8007c7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c7e:	f04f 0912 	mov.w	r9, #18
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c86:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c8a:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007c8c:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c8e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007c90:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c92:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c96:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c9a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007c9c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c9e:	f7f9 fa17 	bl	80010d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ca6:	a905      	add	r1, sp, #20
 8007ca8:	480e      	ldr	r0, [pc, #56]	; (8007ce4 <HAL_I2C_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007caa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007cac:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007cb0:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007cb6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cb8:	f7f9 fa0a 	bl	80010d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007cbc:	9504      	str	r5, [sp, #16]
 8007cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cc4:	6423      	str	r3, [r4, #64]	; 0x40
 8007cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	9b04      	ldr	r3, [sp, #16]
}
 8007cd0:	e7b8      	b.n	8007c44 <HAL_I2C_MspInit+0x74>
 8007cd2:	bf00      	nop
 8007cd4:	40005400 	.word	0x40005400
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	40020400 	.word	0x40020400
 8007ce0:	40005800 	.word	0x40005800
 8007ce4:	40020800 	.word	0x40020800

08007ce8 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8007ce8:	6802      	ldr	r2, [r0, #0]
 8007cea:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <HAL_RTC_MspInit+0x10>)
 8007cec:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007cee:	bf02      	ittt	eq
 8007cf0:	4b02      	ldreq	r3, [pc, #8]	; (8007cfc <HAL_RTC_MspInit+0x14>)
 8007cf2:	2201      	moveq	r2, #1
 8007cf4:	601a      	streq	r2, [r3, #0]
 8007cf6:	4770      	bx	lr
 8007cf8:	40002800 	.word	0x40002800
 8007cfc:	42470e3c 	.word	0x42470e3c

08007d00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d04:	2214      	movs	r2, #20
{
 8007d06:	b08a      	sub	sp, #40	; 0x28
 8007d08:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	eb0d 0002 	add.w	r0, sp, r2
 8007d10:	f000 f92b 	bl	8007f6a <memset>
  if(hsd->Instance==SDIO)
 8007d14:	6822      	ldr	r2, [r4, #0]
 8007d16:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <HAL_SD_MspInit+0xc0>)
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d14d      	bne.n	8007db8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007d1c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8007d20:	2400      	movs	r4, #0
 8007d22:	9401      	str	r4, [sp, #4]
 8007d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d26:	4827      	ldr	r0, [pc, #156]	; (8007dc4 <HAL_SD_MspInit+0xc4>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d2c:	645a      	str	r2, [r3, #68]	; 0x44
 8007d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d30:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007d34:	9201      	str	r2, [sp, #4]
 8007d36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d38:	9402      	str	r4, [sp, #8]
 8007d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d3c:	f042 0202 	orr.w	r2, r2, #2
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30
 8007d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d44:	f002 0202 	and.w	r2, r2, #2
 8007d48:	9202      	str	r2, [sp, #8]
 8007d4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d4c:	9403      	str	r4, [sp, #12]
 8007d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d50:	f042 0204 	orr.w	r2, r2, #4
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30
 8007d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d58:	f002 0204 	and.w	r2, r2, #4
 8007d5c:	9203      	str	r2, [sp, #12]
 8007d5e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d60:	9404      	str	r4, [sp, #16]
 8007d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d64:	f042 0208 	orr.w	r2, r2, #8
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d70:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d72:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007d74:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007d78:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d7c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d7e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007d80:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d84:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d86:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007d88:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d8a:	f7f9 f9a1 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d92:	a905      	add	r1, sp, #20
 8007d94:	480c      	ldr	r0, [pc, #48]	; (8007dc8 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007d96:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d98:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d9a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d9c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007d9e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007da0:	f7f9 f996 	bl	80010d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007da4:	a905      	add	r1, sp, #20
 8007da6:	4809      	ldr	r0, [pc, #36]	; (8007dcc <HAL_SD_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007da8:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dac:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dae:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007db0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007db2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007db4:	f7f9 f98c 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007db8:	b00a      	add	sp, #40	; 0x28
 8007dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40012c00 	.word	0x40012c00
 8007dc4:	40020400 	.word	0x40020400
 8007dc8:	40020800 	.word	0x40020800
 8007dcc:	40020c00 	.word	0x40020c00

08007dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dd0:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8007dd2:	4601      	mov	r1, r0
{
 8007dd4:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2036      	movs	r0, #54	; 0x36
 8007dda:	f7f9 f8e9 	bl	8000fb0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8007dde:	2036      	movs	r0, #54	; 0x36
 8007de0:	f7f9 f91a 	bl	8001018 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007de4:	2500      	movs	r5, #0
 8007de6:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <HAL_InitTick+0x68>)
 8007de8:	9502      	str	r5, [sp, #8]
 8007dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007dec:	4c13      	ldr	r4, [pc, #76]	; (8007e3c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007dee:	f042 0210 	orr.w	r2, r2, #16
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007dfc:	a901      	add	r1, sp, #4
 8007dfe:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007e00:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e02:	f7fa fba7 	bl	8002554 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007e06:	f7fa fb95 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <HAL_InitTick+0x70>)
 8007e0c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8007e0e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007e12:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <HAL_InitTick+0x74>)
 8007e16:	fbb0 f0f3 	udiv	r0, r0, r3
 8007e1a:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8007e1c:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007e1e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8007e20:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e22:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007e24:	f7fb fde2 	bl	80039ec <HAL_TIM_Base_Init>
 8007e28:	b920      	cbnz	r0, 8007e34 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f7fb fcc9 	bl	80037c2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8007e30:	b009      	add	sp, #36	; 0x24
 8007e32:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8007e34:	2001      	movs	r0, #1
 8007e36:	e7fb      	b.n	8007e30 <HAL_InitTick+0x60>
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	20004844 	.word	0x20004844
 8007e40:	40001000 	.word	0x40001000
 8007e44:	000f4240 	.word	0x000f4240

08007e48 <NMI_Handler>:
 8007e48:	4770      	bx	lr

08007e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e4a:	e7fe      	b.n	8007e4a <HardFault_Handler>

08007e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e4c:	e7fe      	b.n	8007e4c <MemManage_Handler>

08007e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e4e:	e7fe      	b.n	8007e4e <BusFault_Handler>

08007e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e50:	e7fe      	b.n	8007e50 <UsageFault_Handler>

08007e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e52:	4770      	bx	lr

08007e54 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <I2C1_EV_IRQHandler+0x8>)
 8007e56:	f7f9 bf43 	b.w	8001ce0 <HAL_I2C_EV_IRQHandler>
 8007e5a:	bf00      	nop
 8007e5c:	20003db8 	.word	0x20003db8

08007e60 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <TIM6_DAC_IRQHandler+0x8>)
 8007e62:	f7fb bcbd 	b.w	80037e0 <HAL_TIM_IRQHandler>
 8007e66:	bf00      	nop
 8007e68:	20004844 	.word	0x20004844

08007e6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e6c:	490f      	ldr	r1, [pc, #60]	; (8007eac <SystemInit+0x40>)
 8007e6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <SystemInit+0x44>)
 8007e7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007e7e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8007e80:	f042 0201 	orr.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007e86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007e8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007e94:	4a07      	ldr	r2, [pc, #28]	; (8007eb4 <SystemInit+0x48>)
 8007e96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007ea0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ea6:	608b      	str	r3, [r1, #8]
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	e000ed00 	.word	0xe000ed00
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	24003010 	.word	0x24003010

08007eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007ebe:	e003      	b.n	8007ec8 <LoopCopyDataInit>

08007ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007ec6:	3104      	adds	r1, #4

08007ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ec8:	480b      	ldr	r0, [pc, #44]	; (8007ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007eca:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ed0:	d3f6      	bcc.n	8007ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8007ed2:	4a0b      	ldr	r2, [pc, #44]	; (8007f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ed4:	e002      	b.n	8007edc <LoopFillZerobss>

08007ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ed8:	f842 3b04 	str.w	r3, [r2], #4

08007edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ee0:	d3f9      	bcc.n	8007ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007ee2:	f7ff ffc3 	bl	8007e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ee6:	f000 f811 	bl	8007f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007eea:	f7ff fc5d 	bl	80077a8 <main>
  bx  lr    
 8007eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ef0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007ef4:	080080f4 	.word	0x080080f4
  ldr  r0, =_sdata
 8007ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007efc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8007f00:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8007f04:	20004880 	.word	0x20004880

08007f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007f08:	e7fe      	b.n	8007f08 <ADC_IRQHandler>
	...

08007f0c <__libc_init_array>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4e0d      	ldr	r6, [pc, #52]	; (8007f44 <__libc_init_array+0x38>)
 8007f10:	4c0d      	ldr	r4, [pc, #52]	; (8007f48 <__libc_init_array+0x3c>)
 8007f12:	1ba4      	subs	r4, r4, r6
 8007f14:	10a4      	asrs	r4, r4, #2
 8007f16:	2500      	movs	r5, #0
 8007f18:	42a5      	cmp	r5, r4
 8007f1a:	d109      	bne.n	8007f30 <__libc_init_array+0x24>
 8007f1c:	4e0b      	ldr	r6, [pc, #44]	; (8007f4c <__libc_init_array+0x40>)
 8007f1e:	4c0c      	ldr	r4, [pc, #48]	; (8007f50 <__libc_init_array+0x44>)
 8007f20:	f000 f82c 	bl	8007f7c <_init>
 8007f24:	1ba4      	subs	r4, r4, r6
 8007f26:	10a4      	asrs	r4, r4, #2
 8007f28:	2500      	movs	r5, #0
 8007f2a:	42a5      	cmp	r5, r4
 8007f2c:	d105      	bne.n	8007f3a <__libc_init_array+0x2e>
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f34:	4798      	blx	r3
 8007f36:	3501      	adds	r5, #1
 8007f38:	e7ee      	b.n	8007f18 <__libc_init_array+0xc>
 8007f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f3e:	4798      	blx	r3
 8007f40:	3501      	adds	r5, #1
 8007f42:	e7f2      	b.n	8007f2a <__libc_init_array+0x1e>
 8007f44:	080080ec 	.word	0x080080ec
 8007f48:	080080ec 	.word	0x080080ec
 8007f4c:	080080ec 	.word	0x080080ec
 8007f50:	080080f0 	.word	0x080080f0

08007f54 <memcpy>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	1e43      	subs	r3, r0, #1
 8007f58:	440a      	add	r2, r1
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	d100      	bne.n	8007f60 <memcpy+0xc>
 8007f5e:	bd10      	pop	{r4, pc}
 8007f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f68:	e7f7      	b.n	8007f5a <memcpy+0x6>

08007f6a <memset>:
 8007f6a:	4402      	add	r2, r0
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d100      	bne.n	8007f74 <memset+0xa>
 8007f72:	4770      	bx	lr
 8007f74:	f803 1b01 	strb.w	r1, [r3], #1
 8007f78:	e7f9      	b.n	8007f6e <memset+0x4>
	...

08007f7c <_init>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr

08007f88 <_fini>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr
