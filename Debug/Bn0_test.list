
Bn0_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006564  08006564  00016564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  0800656c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a7c  20000008  08006574  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000a84  08006574  00020a84  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030bda  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005434  00000000  00000000  00050c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001341b  00000000  00000000  00056046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012f0  00000000  00000000  00069468  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001b78  00000000  00000000  0006a758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c232  00000000  00000000  0006c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000079b1  00000000  00000000  00078502  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007feb3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003dec  00000000  00000000  0007ff30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006428 	.word	0x08006428

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08006428 	.word	0x08006428

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b97a 	b.w	8000e08 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	468c      	mov	ip, r1
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	9e08      	ldr	r6, [sp, #32]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d151      	bne.n	8000be0 <__udivmoddi4+0xb4>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d96d      	bls.n	8000c1e <__udivmoddi4+0xf2>
 8000b42:	fab2 fe82 	clz	lr, r2
 8000b46:	f1be 0f00 	cmp.w	lr, #0
 8000b4a:	d00b      	beq.n	8000b64 <__udivmoddi4+0x38>
 8000b4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b68:	0c25      	lsrs	r5, r4, #16
 8000b6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b6e:	fa1f f987 	uxth.w	r9, r7
 8000b72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b7a:	fb08 f309 	mul.w	r3, r8, r9
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x6c>
 8000b82:	19ed      	adds	r5, r5, r7
 8000b84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b88:	f080 8123 	bcs.w	8000dd2 <__udivmoddi4+0x2a6>
 8000b8c:	42ab      	cmp	r3, r5
 8000b8e:	f240 8120 	bls.w	8000dd2 <__udivmoddi4+0x2a6>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aed      	subs	r5, r5, r3
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ba0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ba4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba8:	fb00 f909 	mul.w	r9, r0, r9
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x98>
 8000bb0:	19e4      	adds	r4, r4, r7
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	f080 810a 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000bba:	45a1      	cmp	r9, r4
 8000bbc:	f240 8107 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 0409 	sub.w	r4, r4, r9
 8000bc8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d061      	beq.n	8000c96 <__udivmoddi4+0x16a>
 8000bd2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6034      	str	r4, [r6, #0]
 8000bda:	6073      	str	r3, [r6, #4]
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xc8>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d054      	beq.n	8000c92 <__udivmoddi4+0x166>
 8000be8:	2100      	movs	r1, #0
 8000bea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	fab3 f183 	clz	r1, r3
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	f040 808e 	bne.w	8000d1a <__udivmoddi4+0x1ee>
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xdc>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80fa 	bhi.w	8000dfc <__udivmoddi4+0x2d0>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	46ac      	mov	ip, r5
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d03f      	beq.n	8000c96 <__udivmoddi4+0x16a>
 8000c16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	b912      	cbnz	r2, 8000c26 <__udivmoddi4+0xfa>
 8000c20:	2701      	movs	r7, #1
 8000c22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c26:	fab7 fe87 	clz	lr, r7
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d134      	bne.n	8000c9a <__udivmoddi4+0x16e>
 8000c30:	1beb      	subs	r3, r5, r7
 8000c32:	0c3a      	lsrs	r2, r7, #16
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c3e:	0c25      	lsrs	r5, r4, #16
 8000c40:	fb02 3318 	mls	r3, r2, r8, r3
 8000c44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c48:	fb0c f308 	mul.w	r3, ip, r8
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x134>
 8000c50:	19ed      	adds	r5, r5, r7
 8000c52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x132>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	f200 80d1 	bhi.w	8000e00 <__udivmoddi4+0x2d4>
 8000c5e:	4680      	mov	r8, r0
 8000c60:	1aed      	subs	r5, r5, r3
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c68:	fb02 5510 	mls	r5, r2, r0, r5
 8000c6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c70:	fb0c fc00 	mul.w	ip, ip, r0
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x15c>
 8000c78:	19e4      	adds	r4, r4, r7
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x15a>
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	f200 80b8 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	e79d      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c92:	4631      	mov	r1, r6
 8000c94:	4630      	mov	r0, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	f1ce 0420 	rsb	r4, lr, #32
 8000c9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ca2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca6:	fa20 f804 	lsr.w	r8, r0, r4
 8000caa:	0c3a      	lsrs	r2, r7, #16
 8000cac:	fa25 f404 	lsr.w	r4, r5, r4
 8000cb0:	ea48 0803 	orr.w	r8, r8, r3
 8000cb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x1bc>
 8000cd4:	19ed      	adds	r5, r5, r7
 8000cd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cda:	f080 808a 	bcs.w	8000df2 <__udivmoddi4+0x2c6>
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	f240 8087 	bls.w	8000df2 <__udivmoddi4+0x2c6>
 8000ce4:	3902      	subs	r1, #2
 8000ce6:	443d      	add	r5, r7
 8000ce8:	1aeb      	subs	r3, r5, r3
 8000cea:	fa1f f588 	uxth.w	r5, r8
 8000cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000cf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000cfe:	42ab      	cmp	r3, r5
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x1e6>
 8000d02:	19ed      	adds	r5, r5, r7
 8000d04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d08:	d26f      	bcs.n	8000dea <__udivmoddi4+0x2be>
 8000d0a:	42ab      	cmp	r3, r5
 8000d0c:	d96d      	bls.n	8000dea <__udivmoddi4+0x2be>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443d      	add	r5, r7
 8000d12:	1aeb      	subs	r3, r5, r3
 8000d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d18:	e78f      	b.n	8000c3a <__udivmoddi4+0x10e>
 8000d1a:	f1c1 0720 	rsb	r7, r1, #32
 8000d1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000d22:	408b      	lsls	r3, r1
 8000d24:	fa05 f401 	lsl.w	r4, r5, r1
 8000d28:	ea48 0303 	orr.w	r3, r8, r3
 8000d2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d46:	fa1f f883 	uxth.w	r8, r3
 8000d4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d4e:	fb09 f408 	mul.w	r4, r9, r8
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	fa02 f201 	lsl.w	r2, r2, r1
 8000d58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x244>
 8000d5e:	18ed      	adds	r5, r5, r3
 8000d60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d64:	d243      	bcs.n	8000dee <__udivmoddi4+0x2c2>
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	d941      	bls.n	8000dee <__udivmoddi4+0x2c2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	441d      	add	r5, r3
 8000d70:	1b2d      	subs	r5, r5, r4
 8000d72:	fa1f fe8e 	uxth.w	lr, lr
 8000d76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d82:	fb00 f808 	mul.w	r8, r0, r8
 8000d86:	45a0      	cmp	r8, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x26e>
 8000d8a:	18e4      	adds	r4, r4, r3
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d90:	d229      	bcs.n	8000de6 <__udivmoddi4+0x2ba>
 8000d92:	45a0      	cmp	r8, r4
 8000d94:	d927      	bls.n	8000de6 <__udivmoddi4+0x2ba>
 8000d96:	3802      	subs	r0, #2
 8000d98:	441c      	add	r4, r3
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	eba4 0408 	sub.w	r4, r4, r8
 8000da2:	fba0 8902 	umull	r8, r9, r0, r2
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c6      	mov	lr, r8
 8000daa:	464d      	mov	r5, r9
 8000dac:	d315      	bcc.n	8000dda <__udivmoddi4+0x2ae>
 8000dae:	d012      	beq.n	8000dd6 <__udivmoddi4+0x2aa>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x29c>
 8000db2:	ebba 030e 	subs.w	r3, sl, lr
 8000db6:	eb64 0405 	sbc.w	r4, r4, r5
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431f      	orrs	r7, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	6037      	str	r7, [r6, #0]
 8000dc6:	6074      	str	r4, [r6, #4]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	e6f8      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000dd2:	4690      	mov	r8, r2
 8000dd4:	e6e0      	b.n	8000b98 <__udivmoddi4+0x6c>
 8000dd6:	45c2      	cmp	sl, r8
 8000dd8:	d2ea      	bcs.n	8000db0 <__udivmoddi4+0x284>
 8000dda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dde:	eb69 0503 	sbc.w	r5, r9, r3
 8000de2:	3801      	subs	r0, #1
 8000de4:	e7e4      	b.n	8000db0 <__udivmoddi4+0x284>
 8000de6:	4628      	mov	r0, r5
 8000de8:	e7d7      	b.n	8000d9a <__udivmoddi4+0x26e>
 8000dea:	4640      	mov	r0, r8
 8000dec:	e791      	b.n	8000d12 <__udivmoddi4+0x1e6>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e7be      	b.n	8000d70 <__udivmoddi4+0x244>
 8000df2:	4601      	mov	r1, r0
 8000df4:	e778      	b.n	8000ce8 <__udivmoddi4+0x1bc>
 8000df6:	3802      	subs	r0, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	e745      	b.n	8000c88 <__udivmoddi4+0x15c>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xe6>
 8000e00:	f1a8 0802 	sub.w	r8, r8, #2
 8000e04:	443d      	add	r5, r7
 8000e06:	e72b      	b.n	8000c60 <__udivmoddi4+0x134>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x30>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e16:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e1e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f8ab 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f005 fa2c 	bl	800628c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f005 f924 	bl	8006080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000e38:	2000      	movs	r0, #0
 8000e3a:	bd08      	pop	{r3, pc}
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x10>)
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_IncTick+0x14>)
 8000e44:	6811      	ldr	r1, [r2, #0]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	440b      	add	r3, r1
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000005c 	.word	0x2000005c
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2000005c 	.word	0x2000005c

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff6 	bl	8000e58 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	bf1c      	itt	ne
 8000e70:	4b05      	ldrne	r3, [pc, #20]	; (8000e88 <HAL_Delay+0x24>)
 8000e72:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e76:	bf18      	it	ne
 8000e78:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	f7ff ffed 	bl	8000e58 <HAL_GetTick>
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	4284      	cmp	r4, r0
 8000e82:	d8fa      	bhi.n	8000e7a <HAL_Delay+0x16>
  {
  }
}
 8000e84:	bd38      	pop	{r3, r4, r5, pc}
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000

08000e8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e8e:	4604      	mov	r4, r0
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d06e      	beq.n	8000f72 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e94:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000e98:	b90b      	cbnz	r3, 8000e9e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e9a:	f005 f90d 	bl	80060b8 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	f023 0302 	bic.w	r3, r3, #2
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea8:	f7ff ffd6 	bl	8000e58 <HAL_GetTick>
 8000eac:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	0791      	lsls	r1, r2, #30
 8000eb4:	d451      	bmi.n	8000f5a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	f042 0201 	orr.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ebe:	f7ff ffcb 	bl	8000e58 <HAL_GetTick>
 8000ec2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	07d2      	lsls	r2, r2, #31
 8000eca:	d554      	bpl.n	8000f76 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ecc:	7e22      	ldrb	r2, [r4, #24]
 8000ece:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	bf0c      	ite	eq
 8000ed4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ede:	7e62      	ldrb	r2, [r4, #25]
 8000ee0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	bf0c      	ite	eq
 8000ee6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eea:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ef0:	7ea2      	ldrb	r2, [r4, #26]
 8000ef2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	bf0c      	ite	eq
 8000ef8:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000efc:	f022 0220 	bicne.w	r2, r2, #32
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f02:	7ee2      	ldrb	r2, [r4, #27]
 8000f04:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	bf0c      	ite	eq
 8000f0a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f0e:	f042 0210 	orrne.w	r2, r2, #16
 8000f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f14:	7f22      	ldrb	r2, [r4, #28]
 8000f16:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	bf0c      	ite	eq
 8000f1c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f20:	f022 0208 	bicne.w	r2, r2, #8
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f26:	7f62      	ldrb	r2, [r4, #29]
 8000f28:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	bf0c      	ite	eq
 8000f2e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f32:	f022 0204 	bicne.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f38:	68e1      	ldr	r1, [r4, #12]
 8000f3a:	68a2      	ldr	r2, [r4, #8]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	6921      	ldr	r1, [r4, #16]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	6961      	ldr	r1, [r4, #20]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	6861      	ldr	r1, [r4, #4]
 8000f48:	3901      	subs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f4e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f50:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f52:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000f54:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000f58:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f5a:	f7ff ff7d 	bl	8000e58 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	280a      	cmp	r0, #10
 8000f62:	d9a4      	bls.n	8000eae <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f76:	f7ff ff6f 	bl	8000e58 <HAL_GetTick>
 8000f7a:	1b40      	subs	r0, r0, r5
 8000f7c:	280a      	cmp	r0, #10
 8000f7e:	d9a1      	bls.n	8000ec4 <HAL_CAN_Init+0x38>
 8000f80:	e7f0      	b.n	8000f64 <HAL_CAN_Init+0xd8>
	...

08000f84 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f86:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	0c1b      	lsrs	r3, r3, #16
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f94:	0200      	lsls	r0, r0, #8
 8000f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f9e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fa0:	60d3      	str	r3, [r2, #12]
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b530      	push	{r4, r5, lr}
 8000fac:	68dc      	ldr	r4, [r3, #12]
 8000fae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	bf28      	it	cs
 8000fbc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 0501 	mov.w	r5, #1
 8000fc4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fc8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fcc:	bf8c      	ite	hi
 8000fce:	3c03      	subhi	r4, #3
 8000fd0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd2:	4019      	ands	r1, r3
 8000fd4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd6:	fa05 f404 	lsl.w	r4, r5, r4
 8000fda:	3c01      	subs	r4, #1
 8000fdc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fde:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	ea42 0201 	orr.w	r2, r2, r1
 8000fe4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	bfaf      	iteee	ge
 8000fea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	f000 000f 	andlt.w	r0, r0, #15
 8000ff2:	4b06      	ldrlt	r3, [pc, #24]	; (800100c <HAL_NVIC_SetPriority+0x64>)
 8000ff4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	bfa5      	ittet	ge
 8000ff8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ffc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001004:	bd30      	pop	{r4, r5, pc}
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	e000ed14 	.word	0xe000ed14

08001010 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001010:	0942      	lsrs	r2, r0, #5
 8001012:	2301      	movs	r3, #1
 8001014:	f000 001f 	and.w	r0, r0, #31
 8001018:	fa03 f000 	lsl.w	r0, r3, r0
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <HAL_NVIC_EnableIRQ+0x14>)
 800101e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100

08001028 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001028:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800102c:	2b02      	cmp	r3, #2
 800102e:	d003      	beq.n	8001038 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
 8001036:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001038:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800103a:	2305      	movs	r3, #5
 800103c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001040:	6813      	ldr	r3, [r2, #0]
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001048:	2000      	movs	r0, #0
}
 800104a:	4770      	bx	lr

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001050:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80011f8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4a65      	ldr	r2, [pc, #404]	; (80011f0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80011fc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001060:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001062:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001068:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001070:	45b6      	cmp	lr, r6
 8001072:	f040 80aa 	bne.w	80011ca <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	684c      	ldr	r4, [r1, #4]
 8001078:	f024 0710 	bic.w	r7, r4, #16
 800107c:	2f02      	cmp	r7, #2
 800107e:	d116      	bne.n	80010ae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001080:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001084:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001088:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800108c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001090:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001094:	f04f 0c0f 	mov.w	ip, #15
 8001098:	fa0c fc0b 	lsl.w	ip, ip, fp
 800109c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	690d      	ldr	r5, [r1, #16]
 80010a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80010a6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80010aa:	f8ca 5020 	str.w	r5, [sl, #32]
 80010ae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010b4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80010bc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010be:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80010d2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d6:	d811      	bhi.n	80010fc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80010d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010da:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	68cf      	ldr	r7, [r1, #12]
 80010e0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80010e4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80010e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80010f4:	409f      	lsls	r7, r3
 80010f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	688f      	ldr	r7, [r1, #8]
 8001102:	fa07 f70a 	lsl.w	r7, r7, sl
 8001106:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001108:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110a:	00e5      	lsls	r5, r4, #3
 800110c:	d55d      	bpl.n	80011ca <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	f04f 0b00 	mov.w	fp, #0
 8001112:	f8cd b00c 	str.w	fp, [sp, #12]
 8001116:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	4d36      	ldr	r5, [pc, #216]	; (80011f4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001120:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001124:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001128:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800112c:	9703      	str	r7, [sp, #12]
 800112e:	9f03      	ldr	r7, [sp, #12]
 8001130:	f023 0703 	bic.w	r7, r3, #3
 8001134:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001138:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001140:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001148:	f04f 0e0f 	mov.w	lr, #15
 800114c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001150:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001152:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	d03f      	beq.n	80011d8 <HAL_GPIO_Init+0x18c>
 8001158:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800115c:	42a8      	cmp	r0, r5
 800115e:	d03d      	beq.n	80011dc <HAL_GPIO_Init+0x190>
 8001160:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001164:	42a8      	cmp	r0, r5
 8001166:	d03b      	beq.n	80011e0 <HAL_GPIO_Init+0x194>
 8001168:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800116c:	42a8      	cmp	r0, r5
 800116e:	d039      	beq.n	80011e4 <HAL_GPIO_Init+0x198>
 8001170:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001174:	42a8      	cmp	r0, r5
 8001176:	d037      	beq.n	80011e8 <HAL_GPIO_Init+0x19c>
 8001178:	4548      	cmp	r0, r9
 800117a:	d037      	beq.n	80011ec <HAL_GPIO_Init+0x1a0>
 800117c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001180:	42a8      	cmp	r0, r5
 8001182:	bf14      	ite	ne
 8001184:	2507      	movne	r5, #7
 8001186:	2506      	moveq	r5, #6
 8001188:	fa05 f50c 	lsl.w	r5, r5, ip
 800118c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001192:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001194:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001196:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800119a:	bf0c      	ite	eq
 800119c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800119e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011a0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011a2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011a8:	bf0c      	ite	eq
 80011aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011ac:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011ae:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011b6:	bf0c      	ite	eq
 80011b8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011ba:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80011bc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80011be:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011c2:	bf54      	ite	pl
 80011c4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80011c6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011c8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	3301      	adds	r3, #1
 80011cc:	2b10      	cmp	r3, #16
 80011ce:	f47f af48 	bne.w	8001062 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011d2:	b005      	add	sp, #20
 80011d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d8:	465d      	mov	r5, fp
 80011da:	e7d5      	b.n	8001188 <HAL_GPIO_Init+0x13c>
 80011dc:	2501      	movs	r5, #1
 80011de:	e7d3      	b.n	8001188 <HAL_GPIO_Init+0x13c>
 80011e0:	2502      	movs	r5, #2
 80011e2:	e7d1      	b.n	8001188 <HAL_GPIO_Init+0x13c>
 80011e4:	2503      	movs	r5, #3
 80011e6:	e7cf      	b.n	8001188 <HAL_GPIO_Init+0x13c>
 80011e8:	2504      	movs	r5, #4
 80011ea:	e7cd      	b.n	8001188 <HAL_GPIO_Init+0x13c>
 80011ec:	2505      	movs	r5, #5
 80011ee:	e7cb      	b.n	8001188 <HAL_GPIO_Init+0x13c>
 80011f0:	40013c00 	.word	0x40013c00
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40021400 	.word	0x40021400

08001200 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	b10a      	cbz	r2, 8001206 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	6181      	str	r1, [r0, #24]
 8001204:	4770      	bx	lr
 8001206:	0409      	lsls	r1, r1, #16
 8001208:	e7fb      	b.n	8001202 <HAL_GPIO_WritePin+0x2>

0800120a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800120a:	6802      	ldr	r2, [r0, #0]
 800120c:	6953      	ldr	r3, [r2, #20]
 800120e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001212:	d00d      	beq.n	8001230 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001214:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001218:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800121a:	2304      	movs	r3, #4
 800121c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800121e:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001224:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001228:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800122c:	2001      	movs	r0, #1
 800122e:	4770      	bx	lr
  }
  return HAL_OK;
 8001230:	4618      	mov	r0, r3
}
 8001232:	4770      	bx	lr

08001234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001238:	4604      	mov	r4, r0
 800123a:	4617      	mov	r7, r2
 800123c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800123e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001242:	b28e      	uxth	r6, r1
 8001244:	6825      	ldr	r5, [r4, #0]
 8001246:	f1b8 0f01 	cmp.w	r8, #1
 800124a:	bf0c      	ite	eq
 800124c:	696b      	ldreq	r3, [r5, #20]
 800124e:	69ab      	ldrne	r3, [r5, #24]
 8001250:	ea36 0303 	bics.w	r3, r6, r3
 8001254:	bf14      	ite	ne
 8001256:	2001      	movne	r0, #1
 8001258:	2000      	moveq	r0, #0
 800125a:	b908      	cbnz	r0, 8001260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800125c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001260:	696b      	ldr	r3, [r5, #20]
 8001262:	055a      	lsls	r2, r3, #21
 8001264:	d512      	bpl.n	800128c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800126e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001272:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001274:	2304      	movs	r3, #4
 8001276:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001278:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800127a:	2300      	movs	r3, #0
 800127c:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800127e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001282:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800128c:	1c7b      	adds	r3, r7, #1
 800128e:	d0d9      	beq.n	8001244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001290:	b94f      	cbnz	r7, 80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001292:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001294:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001296:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800129c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80012a0:	2003      	movs	r0, #3
 80012a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012a6:	f7ff fdd7 	bl	8000e58 <HAL_GetTick>
 80012aa:	eba0 0009 	sub.w	r0, r0, r9
 80012ae:	4287      	cmp	r7, r0
 80012b0:	d2c8      	bcs.n	8001244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80012b2:	e7ee      	b.n	8001292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080012b4 <I2C_WaitOnFlagUntilTimeout>:
{
 80012b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012b8:	9e08      	ldr	r6, [sp, #32]
 80012ba:	4604      	mov	r4, r0
 80012bc:	4690      	mov	r8, r2
 80012be:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80012c0:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80012c4:	b28d      	uxth	r5, r1
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f1b9 0f01 	cmp.w	r9, #1
 80012cc:	bf0c      	ite	eq
 80012ce:	695b      	ldreq	r3, [r3, #20]
 80012d0:	699b      	ldrne	r3, [r3, #24]
 80012d2:	ea35 0303 	bics.w	r3, r5, r3
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	4543      	cmp	r3, r8
 80012de:	d002      	beq.n	80012e6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80012e0:	2000      	movs	r0, #0
}
 80012e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012e6:	1c7b      	adds	r3, r7, #1
 80012e8:	d0ed      	beq.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012ea:	b95f      	cbnz	r7, 8001304 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80012ec:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80012ee:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80012f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80012fa:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001304:	f7ff fda8 	bl	8000e58 <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	4287      	cmp	r7, r0
 800130c:	d2db      	bcs.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x12>
 800130e:	e7ed      	b.n	80012ec <I2C_WaitOnFlagUntilTimeout+0x38>

08001310 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
 8001316:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	d501      	bpl.n	8001324 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001320:	2000      	movs	r0, #0
 8001322:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff ff70 	bl	800120a <I2C_IsAcknowledgeFailed>
 800132a:	b9a8      	cbnz	r0, 8001358 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800132c:	1c6a      	adds	r2, r5, #1
 800132e:	d0f3      	beq.n	8001318 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001330:	b965      	cbnz	r5, 800134c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800133a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001340:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001344:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001348:	2003      	movs	r0, #3
 800134a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800134c:	f7ff fd84 	bl	8000e58 <HAL_GetTick>
 8001350:	1b80      	subs	r0, r0, r6
 8001352:	4285      	cmp	r5, r0
 8001354:	d2e0      	bcs.n	8001318 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001356:	e7ec      	b.n	8001332 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}

0800135c <I2C_RequestMemoryWrite>:
{
 800135c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001360:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001362:	6802      	ldr	r2, [r0, #0]
{
 8001364:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001366:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]
{
 8001370:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001372:	9600      	str	r6, [sp, #0]
 8001374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800137c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800137e:	f7ff ff99 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 8001382:	b968      	cbnz	r0, 80013a0 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001384:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001388:	491c      	ldr	r1, [pc, #112]	; (80013fc <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800138a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800138e:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001390:	4620      	mov	r0, r4
 8001392:	4633      	mov	r3, r6
 8001394:	f7ff ff4e 	bl	8001234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001398:	b130      	cbz	r0, 80013a8 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800139a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139c:	2b04      	cmp	r3, #4
 800139e:	d018      	beq.n	80013d2 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80013a0:	2003      	movs	r0, #3
}
 80013a2:	b004      	add	sp, #16
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	9003      	str	r0, [sp, #12]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	9203      	str	r2, [sp, #12]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b4:	4632      	mov	r2, r6
 80013b6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b8:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff ffa8 	bl	8001310 <I2C_WaitOnTXEFlagUntilTimeout>
 80013c0:	b148      	cbz	r0, 80013d6 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d1eb      	bne.n	80013a0 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013c8:	6822      	ldr	r2, [r4, #0]
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
 80013d4:	e7e5      	b.n	80013a2 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013d6:	f1b8 0f01 	cmp.w	r8, #1
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	d102      	bne.n	80013e4 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013de:	b2ed      	uxtb	r5, r5
 80013e0:	611d      	str	r5, [r3, #16]
 80013e2:	e7de      	b.n	80013a2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80013e4:	0a2a      	lsrs	r2, r5, #8
 80013e6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013ea:	4632      	mov	r2, r6
 80013ec:	4620      	mov	r0, r4
 80013ee:	f7ff ff8f 	bl	8001310 <I2C_WaitOnTXEFlagUntilTimeout>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d1e5      	bne.n	80013c2 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	e7f1      	b.n	80013de <I2C_RequestMemoryWrite+0x82>
 80013fa:	bf00      	nop
 80013fc:	00010002 	.word	0x00010002

08001400 <I2C_RequestMemoryRead>:
{
 8001400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001404:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001406:	6803      	ldr	r3, [r0, #0]
{
 8001408:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800140a:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800141a:	601a      	str	r2, [r3, #0]
{
 800141c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800141e:	9500      	str	r5, [sp, #0]
 8001420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001422:	2200      	movs	r2, #0
 8001424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001428:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800142a:	f7ff ff43 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 800142e:	b980      	cbnz	r0, 8001452 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001430:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001432:	492f      	ldr	r1, [pc, #188]	; (80014f0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001434:	b2ff      	uxtb	r7, r7
 8001436:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800143a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800143c:	4620      	mov	r0, r4
 800143e:	462b      	mov	r3, r5
 8001440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001442:	f7ff fef7 	bl	8001234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001446:	b140      	cbz	r0, 800145a <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001448:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800144a:	2b04      	cmp	r3, #4
 800144c:	d101      	bne.n	8001452 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
 8001450:	e000      	b.n	8001454 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001452:	2003      	movs	r0, #3
}
 8001454:	b004      	add	sp, #16
 8001456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	9003      	str	r0, [sp, #12]
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	9203      	str	r2, [sp, #12]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001466:	462a      	mov	r2, r5
 8001468:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff ff4f 	bl	8001310 <I2C_WaitOnTXEFlagUntilTimeout>
 8001472:	b140      	cbz	r0, 8001486 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001476:	2b04      	cmp	r3, #4
 8001478:	d1eb      	bne.n	8001452 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800147a:	6822      	ldr	r2, [r4, #0]
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e7e3      	b.n	800144e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001486:	f1b8 0f01 	cmp.w	r8, #1
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	d124      	bne.n	80014d8 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800148e:	b2f6      	uxtb	r6, r6
 8001490:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001492:	462a      	mov	r2, r5
 8001494:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff ff3a 	bl	8001310 <I2C_WaitOnTXEFlagUntilTimeout>
 800149c:	4602      	mov	r2, r0
 800149e:	2800      	cmp	r0, #0
 80014a0:	d1e8      	bne.n	8001474 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80014a2:	6821      	ldr	r1, [r4, #0]
 80014a4:	680b      	ldr	r3, [r1, #0]
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014ac:	4620      	mov	r0, r4
 80014ae:	9500      	str	r5, [sp, #0]
 80014b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014b6:	f7ff fefd 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1c9      	bne.n	8001452 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014be:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014c2:	490b      	ldr	r1, [pc, #44]	; (80014f0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014c4:	f047 0701 	orr.w	r7, r7, #1
 80014c8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014ca:	4620      	mov	r0, r4
 80014cc:	462b      	mov	r3, r5
 80014ce:	f7ff feb1 	bl	8001234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d1b8      	bne.n	8001448 <I2C_RequestMemoryRead+0x48>
 80014d6:	e7bd      	b.n	8001454 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014d8:	0a32      	lsrs	r2, r6, #8
 80014da:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014de:	462a      	mov	r2, r5
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff ff15 	bl	8001310 <I2C_WaitOnTXEFlagUntilTimeout>
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d1c4      	bne.n	8001474 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	e7cf      	b.n	800148e <I2C_RequestMemoryRead+0x8e>
 80014ee:	bf00      	nop
 80014f0:	00010002 	.word	0x00010002

080014f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014fc:	6820      	ldr	r0, [r4, #0]
 80014fe:	6943      	ldr	r3, [r0, #20]
 8001500:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001504:	d001      	beq.n	800150a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001506:	2000      	movs	r0, #0
}
 8001508:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800150a:	6942      	ldr	r2, [r0, #20]
 800150c:	06d2      	lsls	r2, r2, #27
 800150e:	d50b      	bpl.n	8001528 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001510:	f06f 0210 	mvn.w	r2, #16
 8001514:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001516:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001518:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800151a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001522:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001526:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001528:	b95d      	cbnz	r5, 8001542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800152a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001532:	2320      	movs	r3, #32
 8001534:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001538:	2300      	movs	r3, #0
 800153a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800153e:	2003      	movs	r0, #3
 8001540:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001542:	f7ff fc89 	bl	8000e58 <HAL_GetTick>
 8001546:	1b80      	subs	r0, r0, r6
 8001548:	4285      	cmp	r5, r0
 800154a:	d2d7      	bcs.n	80014fc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800154c:	e7ed      	b.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800154e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800154e:	b570      	push	{r4, r5, r6, lr}
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	075b      	lsls	r3, r3, #29
 800155c:	d501      	bpl.n	8001562 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800155e:	2000      	movs	r0, #0
 8001560:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff fe51 	bl	800120a <I2C_IsAcknowledgeFailed>
 8001568:	b9a8      	cbnz	r0, 8001596 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800156a:	1c6a      	adds	r2, r5, #1
 800156c:	d0f3      	beq.n	8001556 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800156e:	b965      	cbnz	r5, 800158a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001578:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800157a:	2300      	movs	r3, #0
 800157c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800157e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001582:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001586:	2003      	movs	r0, #3
 8001588:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800158a:	f7ff fc65 	bl	8000e58 <HAL_GetTick>
 800158e:	1b80      	subs	r0, r0, r6
 8001590:	4285      	cmp	r5, r0
 8001592:	d2e0      	bcs.n	8001556 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001594:	e7ec      	b.n	8001570 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
}
 8001598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800159c <HAL_I2C_Init>:
{
 800159c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800159e:	4604      	mov	r4, r0
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d062      	beq.n	800166a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80015a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015ac:	b91b      	cbnz	r3, 80015b6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80015ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80015b2:	f004 fdb7 	bl	8006124 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80015b6:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015b8:	4e2d      	ldr	r6, [pc, #180]	; (8001670 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80015ba:	4d2e      	ldr	r5, [pc, #184]	; (8001674 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015bc:	2324      	movs	r3, #36	; 0x24
 80015be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80015c2:	6813      	ldr	r3, [r2, #0]
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015ca:	f000 ff71 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015ce:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80015d0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80015d2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015d6:	42b3      	cmp	r3, r6
 80015d8:	bf84      	itt	hi
 80015da:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80015de:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80015e0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015e2:	bf91      	iteee	ls
 80015e4:	1c69      	addls	r1, r5, #1
 80015e6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80015ea:	fbb1 f1f5 	udivhi	r1, r1, r5
 80015ee:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015f0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015f2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015f4:	d821      	bhi.n	800163a <HAL_I2C_Init+0x9e>
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015fc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001600:	2b03      	cmp	r3, #3
 8001602:	bf98      	it	ls
 8001604:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001606:	6a21      	ldr	r1, [r4, #32]
 8001608:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800160a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800160c:	430b      	orrs	r3, r1
 800160e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001610:	68e1      	ldr	r1, [r4, #12]
 8001612:	6923      	ldr	r3, [r4, #16]
 8001614:	430b      	orrs	r3, r1
 8001616:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001618:	69a1      	ldr	r1, [r4, #24]
 800161a:	6963      	ldr	r3, [r4, #20]
 800161c:	430b      	orrs	r3, r1
 800161e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800162a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800162e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001632:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001638:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800163a:	68a1      	ldr	r1, [r4, #8]
 800163c:	b949      	cbnz	r1, 8001652 <HAL_I2C_Init+0xb6>
 800163e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001642:	fbb0 f0f3 	udiv	r0, r0, r3
 8001646:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800164a:	b163      	cbz	r3, 8001666 <HAL_I2C_Init+0xca>
 800164c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001650:	e7d9      	b.n	8001606 <HAL_I2C_Init+0x6a>
 8001652:	2119      	movs	r1, #25
 8001654:	434b      	muls	r3, r1
 8001656:	fbb0 f0f3 	udiv	r0, r0, r3
 800165a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800165e:	b113      	cbz	r3, 8001666 <HAL_I2C_Init+0xca>
 8001660:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001664:	e7cf      	b.n	8001606 <HAL_I2C_Init+0x6a>
 8001666:	2001      	movs	r0, #1
 8001668:	e7cd      	b.n	8001606 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
}
 800166c:	bd70      	pop	{r4, r5, r6, pc}
 800166e:	bf00      	nop
 8001670:	000186a0 	.word	0x000186a0
 8001674:	000f4240 	.word	0x000f4240

08001678 <HAL_I2C_Mem_Write>:
{
 8001678:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800167c:	4604      	mov	r4, r0
 800167e:	469a      	mov	sl, r3
 8001680:	4688      	mov	r8, r1
 8001682:	4691      	mov	r9, r2
 8001684:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001686:	f7ff fbe7 	bl	8000e58 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800168a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800168e:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001690:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001692:	d003      	beq.n	800169c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001694:	2002      	movs	r0, #2
}
 8001696:	b002      	add	sp, #8
 8001698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800169c:	9000      	str	r0, [sp, #0]
 800169e:	2319      	movs	r3, #25
 80016a0:	2201      	movs	r2, #1
 80016a2:	493e      	ldr	r1, [pc, #248]	; (800179c <HAL_I2C_Mem_Write+0x124>)
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fe05 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 80016aa:	2800      	cmp	r0, #0
 80016ac:	d1f2      	bne.n	8001694 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80016ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d0ee      	beq.n	8001694 <HAL_I2C_Mem_Write+0x1c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80016c2:	bf5e      	ittt	pl
 80016c4:	681a      	ldrpl	r2, [r3, #0]
 80016c6:	f042 0201 	orrpl.w	r2, r2, #1
 80016ca:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016d4:	2321      	movs	r3, #33	; 0x21
 80016d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80016e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e4:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 80016e6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ea:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80016ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_I2C_Mem_Write+0x128>)
 80016f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016f4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016f6:	9501      	str	r5, [sp, #4]
 80016f8:	9600      	str	r6, [sp, #0]
 80016fa:	4653      	mov	r3, sl
 80016fc:	464a      	mov	r2, r9
 80016fe:	4641      	mov	r1, r8
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fe2b 	bl	800135c <I2C_RequestMemoryWrite>
 8001706:	2800      	cmp	r0, #0
 8001708:	d02a      	beq.n	8001760 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800170c:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001710:	2b04      	cmp	r3, #4
 8001712:	d107      	bne.n	8001724 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
 8001716:	e7be      	b.n	8001696 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001718:	f7ff fdfa 	bl	8001310 <I2C_WaitOnTXEFlagUntilTimeout>
 800171c:	b120      	cbz	r0, 8001728 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001720:	2b04      	cmp	r3, #4
 8001722:	d034      	beq.n	800178e <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001724:	2003      	movs	r0, #3
 8001726:	e7b6      	b.n	8001696 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001728:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800172a:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 800172c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800172e:	1c4b      	adds	r3, r1, #1
 8001730:	6263      	str	r3, [r4, #36]	; 0x24
 8001732:	780b      	ldrb	r3, [r1, #0]
 8001734:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001736:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001738:	3b01      	subs	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800173e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001740:	1e50      	subs	r0, r2, #1
 8001742:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001744:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001746:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001748:	d50a      	bpl.n	8001760 <HAL_I2C_Mem_Write+0xe8>
 800174a:	b148      	cbz	r0, 8001760 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800174c:	1c8b      	adds	r3, r1, #2
 800174e:	6263      	str	r3, [r4, #36]	; 0x24
 8001750:	784b      	ldrb	r3, [r1, #1]
 8001752:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001754:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001756:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001758:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800175a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800175c:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800175e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001760:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001762:	462a      	mov	r2, r5
 8001764:	4631      	mov	r1, r6
 8001766:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1d5      	bne.n	8001718 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176c:	f7ff feef 	bl	800154e <I2C_WaitOnBTFFlagUntilTimeout>
 8001770:	2800      	cmp	r0, #0
 8001772:	d1d4      	bne.n	800171e <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800177e:	2320      	movs	r3, #32
 8001780:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001784:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800178c:	e783      	b.n	8001696 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e7bc      	b.n	8001714 <HAL_I2C_Mem_Write+0x9c>
 800179a:	bf00      	nop
 800179c:	00100002 	.word	0x00100002
 80017a0:	ffff0000 	.word	0xffff0000

080017a4 <HAL_I2C_Mem_Read>:
{
 80017a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a8:	4604      	mov	r4, r0
 80017aa:	b086      	sub	sp, #24
 80017ac:	469a      	mov	sl, r3
 80017ae:	460d      	mov	r5, r1
 80017b0:	4691      	mov	r9, r2
 80017b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80017b4:	f7ff fb50 	bl	8000e58 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80017b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80017bc:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 80017be:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80017c0:	d004      	beq.n	80017cc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80017c2:	2502      	movs	r5, #2
}
 80017c4:	4628      	mov	r0, r5
 80017c6:	b006      	add	sp, #24
 80017c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017cc:	9000      	str	r0, [sp, #0]
 80017ce:	2319      	movs	r3, #25
 80017d0:	2201      	movs	r2, #1
 80017d2:	4979      	ldr	r1, [pc, #484]	; (80019b8 <HAL_I2C_Mem_Read+0x214>)
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff fd6d 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 80017da:	2800      	cmp	r0, #0
 80017dc:	d1f1      	bne.n	80017c2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80017de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d0ed      	beq.n	80017c2 <HAL_I2C_Mem_Read+0x1e>
 80017e6:	2301      	movs	r3, #1
 80017e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80017f2:	bf5e      	ittt	pl
 80017f4:	681a      	ldrpl	r2, [r3, #0]
 80017f6:	f042 0201 	orrpl.w	r2, r2, #1
 80017fa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001802:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001804:	2322      	movs	r3, #34	; 0x22
 8001806:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001812:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8001818:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001820:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_I2C_Mem_Read+0x218>)
 8001824:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001826:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001828:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182a:	4629      	mov	r1, r5
 800182c:	9601      	str	r6, [sp, #4]
 800182e:	9700      	str	r7, [sp, #0]
 8001830:	4653      	mov	r3, sl
 8001832:	464a      	mov	r2, r9
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fde3 	bl	8001400 <I2C_RequestMemoryRead>
 800183a:	4605      	mov	r5, r0
 800183c:	b130      	cbz	r0, 800184c <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001840:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001844:	2b04      	cmp	r3, #4
 8001846:	d13a      	bne.n	80018be <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001848:	2501      	movs	r5, #1
 800184a:	e7bb      	b.n	80017c4 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 800184c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	b992      	cbnz	r2, 8001878 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001852:	9002      	str	r0, [sp, #8]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	9202      	str	r2, [sp, #8]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	9202      	str	r2, [sp, #8]
 800185c:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001864:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001866:	2320      	movs	r3, #32
 8001868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001872:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001876:	e7a5      	b.n	80017c4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001878:	2a01      	cmp	r2, #1
 800187a:	d122      	bne.n	80018c2 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001882:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001884:	9003      	str	r0, [sp, #12]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	9203      	str	r2, [sp, #12]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	9203      	str	r2, [sp, #12]
 800188e:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001896:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001898:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80019c0 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 800189c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0e1      	beq.n	8001866 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d86b      	bhi.n	800197e <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d123      	bne.n	80018f2 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80018aa:	4632      	mov	r2, r6
 80018ac:	4639      	mov	r1, r7
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fe20 	bl	80014f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d039      	beq.n	800192c <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80018b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d1c4      	bne.n	8001848 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 80018be:	2503      	movs	r5, #3
 80018c0:	e780      	b.n	80017c4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 80018c2:	2a02      	cmp	r2, #2
 80018c4:	d10e      	bne.n	80018e4 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018cc:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	9004      	str	r0, [sp, #16]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	9204      	str	r2, [sp, #16]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	9304      	str	r3, [sp, #16]
 80018e0:	9b04      	ldr	r3, [sp, #16]
 80018e2:	e7d9      	b.n	8001898 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	9005      	str	r0, [sp, #20]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	9205      	str	r2, [sp, #20]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	9305      	str	r3, [sp, #20]
 80018ee:	9b05      	ldr	r3, [sp, #20]
 80018f0:	e7d2      	b.n	8001898 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 80018f2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018f4:	9600      	str	r6, [sp, #0]
 80018f6:	463b      	mov	r3, r7
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4641      	mov	r1, r8
 80018fe:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001900:	d122      	bne.n	8001948 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001902:	f7ff fcd7 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 8001906:	2800      	cmp	r0, #0
 8001908:	d1d9      	bne.n	80018be <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001912:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001914:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	1c51      	adds	r1, r2, #1
 800191a:	6261      	str	r1, [r4, #36]	; 0x24
 800191c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800191e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001920:	3b01      	subs	r3, #1
 8001922:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001924:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001926:	3b01      	subs	r3, #1
 8001928:	b29b      	uxth	r3, r3
 800192a:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800192c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	6262      	str	r2, [r4, #36]	; 0x24
 8001932:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001934:	6912      	ldr	r2, [r2, #16]
 8001936:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001938:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800193e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001940:	3b01      	subs	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001946:	e7a9      	b.n	800189c <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001948:	f7ff fcb4 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4602      	mov	r2, r0
 800194e:	2800      	cmp	r0, #0
 8001950:	d1b5      	bne.n	80018be <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800195a:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800195c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	1c48      	adds	r0, r1, #1
 8001962:	6260      	str	r0, [r4, #36]	; 0x24
 8001964:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001966:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001968:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800196a:	3b01      	subs	r3, #1
 800196c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800196e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001970:	3b01      	subs	r3, #1
 8001972:	b29b      	uxth	r3, r3
 8001974:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001976:	4641      	mov	r1, r8
 8001978:	463b      	mov	r3, r7
 800197a:	4620      	mov	r0, r4
 800197c:	e7c1      	b.n	8001902 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197e:	4632      	mov	r2, r6
 8001980:	4639      	mov	r1, r7
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff fdb6 	bl	80014f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001988:	2800      	cmp	r0, #0
 800198a:	d195      	bne.n	80018b8 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800198c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	6262      	str	r2, [r4, #36]	; 0x24
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	6912      	ldr	r2, [r2, #16]
 8001996:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001998:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800199a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800199c:	3b01      	subs	r3, #1
 800199e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019a8:	6953      	ldr	r3, [r2, #20]
 80019aa:	075b      	lsls	r3, r3, #29
 80019ac:	f57f af76 	bpl.w	800189c <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b2:	1c59      	adds	r1, r3, #1
 80019b4:	6261      	str	r1, [r4, #36]	; 0x24
 80019b6:	e7bd      	b.n	8001934 <HAL_I2C_Mem_Read+0x190>
 80019b8:	00100002 	.word	0x00100002
 80019bc:	ffff0000 	.word	0xffff0000
 80019c0:	00010004 	.word	0x00010004

080019c4 <HAL_I2C_IsDeviceReady>:
{
 80019c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	b085      	sub	sp, #20
 80019cc:	4698      	mov	r8, r3
 80019ce:	4689      	mov	r9, r1
 80019d0:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 80019d2:	f7ff fa41 	bl	8000e58 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80019da:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 80019dc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019de:	d003      	beq.n	80019e8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80019e0:	2002      	movs	r0, #2
}
 80019e2:	b005      	add	sp, #20
 80019e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e8:	9000      	str	r0, [sp, #0]
 80019ea:	2319      	movs	r3, #25
 80019ec:	2201      	movs	r2, #1
 80019ee:	494a      	ldr	r1, [pc, #296]	; (8001b18 <HAL_I2C_IsDeviceReady+0x154>)
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff fc5f 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d1f2      	bne.n	80019e0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80019fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d0ee      	beq.n	80019e0 <HAL_I2C_IsDeviceReady+0x1c>
 8001a02:	2301      	movs	r3, #1
 8001a04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a08:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a0a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001b18 <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001a12:	bf5e      	ittt	pl
 8001a14:	681a      	ldrpl	r2, [r3, #0]
 8001a16:	f042 0201 	orrpl.w	r2, r2, #1
 8001a1a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a22:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a24:	2324      	movs	r3, #36	; 0x24
 8001a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2a:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2e:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a30:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a34:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a44:	9600      	str	r6, [sp, #0]
 8001a46:	4643      	mov	r3, r8
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff fc32 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	b108      	cbz	r0, 8001a56 <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e7c5      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9fc 	bl	8000e58 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a64:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001a66:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 8001a6a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a6c:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a70:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001a74:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a76:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001a78:	b911      	cbnz	r1, 8001a80 <HAL_I2C_IsDeviceReady+0xbc>
 8001a7a:	b90a      	cbnz	r2, 8001a80 <HAL_I2C_IsDeviceReady+0xbc>
 8001a7c:	2ba0      	cmp	r3, #160	; 0xa0
 8001a7e:	d120      	bne.n	8001ac2 <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a80:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	2720      	movs	r7, #32
 8001a84:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a94:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a96:	d02a      	beq.n	8001aee <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	9203      	str	r2, [sp, #12]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	9203      	str	r2, [sp, #12]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	9303      	str	r3, [sp, #12]
 8001aa4:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa6:	9600      	str	r6, [sp, #0]
 8001aa8:	2319      	movs	r3, #25
 8001aaa:	2201      	movs	r2, #1
 8001aac:	491a      	ldr	r1, [pc, #104]	; (8001b18 <HAL_I2C_IsDeviceReady+0x154>)
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff fc00 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1cc      	bne.n	8001a52 <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001abc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001ac0:	e78f      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ac2:	f1b8 0f00 	cmp.w	r8, #0
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ac8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ad0:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001ad2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ad6:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ada:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	e7ca      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ae2:	f7ff f9b9 	bl	8000e58 <HAL_GetTick>
 8001ae6:	1b80      	subs	r0, r0, r6
 8001ae8:	4580      	cmp	r8, r0
 8001aea:	d3ed      	bcc.n	8001ac8 <HAL_I2C_IsDeviceReady+0x104>
 8001aec:	e7ee      	b.n	8001acc <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001af2:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af4:	4659      	mov	r1, fp
 8001af6:	9600      	str	r6, [sp, #0]
 8001af8:	2319      	movs	r3, #25
 8001afa:	2201      	movs	r2, #1
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff fbd9 	bl	80012b4 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d1a5      	bne.n	8001a52 <HAL_I2C_IsDeviceReady+0x8e>
 8001b06:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001b08:	45aa      	cmp	sl, r5
 8001b0a:	d894      	bhi.n	8001a36 <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 8001b0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
 8001b16:	e764      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x1e>
 8001b18:	00100002 	.word	0x00100002
 8001b1c:	ffff0000 	.word	0xffff0000

08001b20 <HAL_I2C_MasterTxCpltCallback>:
 8001b20:	4770      	bx	lr

08001b22 <HAL_I2C_MasterRxCpltCallback>:
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2C_SlaveTxCpltCallback>:
 8001b24:	4770      	bx	lr

08001b26 <HAL_I2C_SlaveRxCpltCallback>:
 8001b26:	4770      	bx	lr

08001b28 <HAL_I2C_AddrCallback>:
{
 8001b28:	4770      	bx	lr

08001b2a <HAL_I2C_ListenCpltCallback>:
 8001b2a:	4770      	bx	lr

08001b2c <HAL_I2C_MemTxCpltCallback>:
 8001b2c:	4770      	bx	lr

08001b2e <HAL_I2C_MemRxCpltCallback>:
 8001b2e:	4770      	bx	lr

08001b30 <HAL_I2C_ErrorCallback>:
 8001b30:	4770      	bx	lr

08001b32 <HAL_I2C_AbortCpltCallback>:
{
 8001b32:	4770      	bx	lr

08001b34 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001b34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b38:	3b29      	subs	r3, #41	; 0x29
 8001b3a:	2b01      	cmp	r3, #1
{
 8001b3c:	b510      	push	{r4, lr}
 8001b3e:	6803      	ldr	r3, [r0, #0]
 8001b40:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b42:	d839      	bhi.n	8001bb8 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b44:	2200      	movs	r2, #0
 8001b46:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b48:	2228      	movs	r2, #40	; 0x28
 8001b4a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b54:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001b5c:	d054      	beq.n	8001c08 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001b5e:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001b60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001b68:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <I2C_ITError+0x120>)
 8001b70:	d031      	beq.n	8001bd6 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b72:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b74:	f7ff fa58 	bl	8001028 <HAL_DMA_Abort_IT>
 8001b78:	b150      	cbz	r0, 8001b90 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 8001b7a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	2320      	movs	r3, #32
 8001b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b8e:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001b90:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b94:	2b28      	cmp	r3, #40	; 0x28
 8001b96:	d10e      	bne.n	8001bb6 <I2C_ITError+0x82>
 8001b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b9a:	075b      	lsls	r3, r3, #29
 8001b9c:	d50b      	bpl.n	8001bb6 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <I2C_ITError+0x124>)
 8001ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ba8:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001bb2:	f7ff ffba 	bl	8001b2a <HAL_I2C_ListenCpltCallback>
 8001bb6:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8001bb8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001bbc:	2a60      	cmp	r2, #96	; 0x60
 8001bbe:	d005      	beq.n	8001bcc <I2C_ITError+0x98>
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	bf5c      	itt	pl
 8001bc6:	2220      	movpl	r2, #32
 8001bc8:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001bd4:	e7bb      	b.n	8001b4e <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001bd6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bd8:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bda:	f7ff fa25 	bl	8001028 <HAL_DMA_Abort_IT>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d0d6      	beq.n	8001b90 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001be2:	6822      	ldr	r2, [r4, #0]
 8001be4:	6953      	ldr	r3, [r2, #20]
 8001be6:	0658      	lsls	r0, r3, #25
 8001be8:	d504      	bpl.n	8001bf4 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bec:	6912      	ldr	r2, [r2, #16]
 8001bee:	1c59      	adds	r1, r3, #1
 8001bf0:	6261      	str	r1, [r4, #36]	; 0x24
 8001bf2:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8001bf4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001bf6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	2320      	movs	r3, #32
 8001c02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001c06:	e7c1      	b.n	8001b8c <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001c08:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001c0c:	2960      	cmp	r1, #96	; 0x60
 8001c0e:	d114      	bne.n	8001c3a <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	2120      	movs	r1, #32
 8001c12:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c16:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	0651      	lsls	r1, r2, #25
 8001c1c:	d504      	bpl.n	8001c28 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	1c51      	adds	r1, r2, #1
 8001c24:	6261      	str	r1, [r4, #36]	; 0x24
 8001c26:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff ff7d 	bl	8001b32 <HAL_I2C_AbortCpltCallback>
 8001c38:	e7aa      	b.n	8001b90 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	0652      	lsls	r2, r2, #25
 8001c3e:	d504      	bpl.n	8001c4a <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	1c51      	adds	r1, r2, #1
 8001c46:	6261      	str	r1, [r4, #36]	; 0x24
 8001c48:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ff70 	bl	8001b30 <HAL_I2C_ErrorCallback>
 8001c50:	e79e      	b.n	8001b90 <I2C_ITError+0x5c>
 8001c52:	bf00      	nop
 8001c54:	08002331 	.word	0x08002331
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c5c:	6803      	ldr	r3, [r0, #0]
{
 8001c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c60:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c62:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001c64:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8001c66:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001c6a:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c6c:	2c10      	cmp	r4, #16
{
 8001c6e:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c70:	d002      	beq.n	8001c78 <HAL_I2C_EV_IRQHandler+0x1c>
 8001c72:	2c40      	cmp	r4, #64	; 0x40
 8001c74:	f040 8255 	bne.w	8002122 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001c78:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001c7c:	d066      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0xf0>
 8001c7e:	0597      	lsls	r7, r2, #22
 8001c80:	d564      	bpl.n	8001d4c <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c82:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001c86:	2c40      	cmp	r4, #64	; 0x40
 8001c88:	d143      	bne.n	8001d12 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8001c8a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001c8c:	2c00      	cmp	r4, #0
 8001c8e:	d13b      	bne.n	8001d08 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c90:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c92:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001c96:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001c98:	4e98      	ldr	r6, [pc, #608]	; (8001efc <HAL_I2C_EV_IRQHandler+0x2a0>)
 8001c9a:	4c99      	ldr	r4, [pc, #612]	; (8001f00 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8001c9c:	402e      	ands	r6, r5
 8001c9e:	400c      	ands	r4, r1
 8001ca0:	2e00      	cmp	r6, #0
 8001ca2:	f000 819f 	beq.w	8001fe4 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001ca6:	4d97      	ldr	r5, [pc, #604]	; (8001f04 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8001ca8:	400d      	ands	r5, r1
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	f000 8166 	beq.w	8001f7c <HAL_I2C_EV_IRQHandler+0x320>
 8001cb0:	0555      	lsls	r5, r2, #21
 8001cb2:	f140 8163 	bpl.w	8001f7c <HAL_I2C_EV_IRQHandler+0x320>
 8001cb6:	2c00      	cmp	r4, #0
 8001cb8:	f040 8160 	bne.w	8001f7c <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001cbc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cc0:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001cc2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cc6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 8001cc8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8001cca:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ccc:	2d00      	cmp	r5, #0
 8001cce:	f040 8105 	bne.w	8001edc <HAL_I2C_EV_IRQHandler+0x280>
 8001cd2:	2a21      	cmp	r2, #33	; 0x21
 8001cd4:	f040 8104 	bne.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cd8:	2c04      	cmp	r4, #4
 8001cda:	f000 816c 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x35a>
 8001cde:	2c08      	cmp	r4, #8
 8001ce0:	f000 8169 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x35a>
 8001ce4:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001ce8:	f000 8165 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cf2:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cf4:	2311      	movs	r3, #17
 8001cf6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d02:	f7ff ff0d 	bl	8001b20 <HAL_I2C_MasterTxCpltCallback>
 8001d06:	e0f6      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d08:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d0a:	f044 0401 	orr.w	r4, r4, #1
 8001d0e:	b2e4      	uxtb	r4, r4
 8001d10:	e7c1      	b.n	8001c96 <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d12:	6904      	ldr	r4, [r0, #16]
 8001d14:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001d18:	d105      	bne.n	8001d26 <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001d1a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001d1e:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d20:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001d22:	d1f2      	bne.n	8001d0a <HAL_I2C_EV_IRQHandler+0xae>
 8001d24:	e7b5      	b.n	8001c92 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8001d26:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001d28:	b934      	cbnz	r4, 8001d38 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001d2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d2c:	11e4      	asrs	r4, r4, #7
 8001d2e:	f004 0406 	and.w	r4, r4, #6
 8001d32:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001d36:	e7ae      	b.n	8001c96 <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001d38:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001d3a:	2c01      	cmp	r4, #1
 8001d3c:	d1ac      	bne.n	8001c98 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001d3e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d40:	11e4      	asrs	r4, r4, #7
 8001d42:	f004 0406 	and.w	r4, r4, #6
 8001d46:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001d4a:	e7a4      	b.n	8001c96 <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001d4c:	4c6e      	ldr	r4, [pc, #440]	; (8001f08 <HAL_I2C_EV_IRQHandler+0x2ac>)
 8001d4e:	400c      	ands	r4, r1
 8001d50:	b11c      	cbz	r4, 8001d5a <HAL_I2C_EV_IRQHandler+0xfe>
 8001d52:	0596      	lsls	r6, r2, #22
 8001d54:	d501      	bpl.n	8001d5a <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001d56:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d58:	e7d9      	b.n	8001d0e <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001d5a:	4c6c      	ldr	r4, [pc, #432]	; (8001f0c <HAL_I2C_EV_IRQHandler+0x2b0>)
 8001d5c:	400c      	ands	r4, r1
 8001d5e:	2c00      	cmp	r4, #0
 8001d60:	d09a      	beq.n	8001c98 <HAL_I2C_EV_IRQHandler+0x3c>
 8001d62:	0594      	lsls	r4, r2, #22
 8001d64:	d598      	bpl.n	8001c98 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8001d66:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d6a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001d6c:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d70:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001d74:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8001d76:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d78:	f040 80a8 	bne.w	8001ecc <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001d7c:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001d7e:	b947      	cbnz	r7, 8001d92 <HAL_I2C_EV_IRQHandler+0x136>
 8001d80:	2c40      	cmp	r4, #64	; 0x40
 8001d82:	d106      	bne.n	8001d92 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d84:	9701      	str	r7, [sp, #4]
 8001d86:	695c      	ldr	r4, [r3, #20]
 8001d88:	9401      	str	r4, [sp, #4]
 8001d8a:	699c      	ldr	r4, [r3, #24]
 8001d8c:	9401      	str	r4, [sp, #4]
 8001d8e:	9c01      	ldr	r4, [sp, #4]
 8001d90:	e782      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001d92:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001d94:	b98c      	cbnz	r4, 8001dba <HAL_I2C_EV_IRQHandler+0x15e>
 8001d96:	6907      	ldr	r7, [r0, #16]
 8001d98:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001d9c:	d10d      	bne.n	8001dba <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9e:	9402      	str	r4, [sp, #8]
 8001da0:	695c      	ldr	r4, [r3, #20]
 8001da2:	9402      	str	r4, [sp, #8]
 8001da4:	699c      	ldr	r4, [r3, #24]
 8001da6:	9402      	str	r4, [sp, #8]
 8001da8:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001daa:	681c      	ldr	r4, [r3, #0]
 8001dac:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001db0:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001db2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001db4:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8001db6:	6504      	str	r4, [r0, #80]	; 0x50
 8001db8:	e76e      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001dba:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001dbc:	b2a4      	uxth	r4, r4
 8001dbe:	b954      	cbnz	r4, 8001dd6 <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc0:	9403      	str	r4, [sp, #12]
 8001dc2:	695c      	ldr	r4, [r3, #20]
 8001dc4:	9403      	str	r4, [sp, #12]
 8001dc6:	699c      	ldr	r4, [r3, #24]
 8001dc8:	9403      	str	r4, [sp, #12]
 8001dca:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001dcc:	681c      	ldr	r4, [r3, #0]
 8001dce:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001dd2:	601c      	str	r4, [r3, #0]
 8001dd4:	e019      	b.n	8001e0a <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8001dd6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001dd8:	b2a4      	uxth	r4, r4
 8001dda:	2c01      	cmp	r4, #1
 8001ddc:	d142      	bne.n	8001e64 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001dde:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001de2:	d11b      	bne.n	8001e1c <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001de4:	681c      	ldr	r4, [r3, #0]
 8001de6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001dea:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001dec:	685c      	ldr	r4, [r3, #4]
 8001dee:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001df2:	d00c      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001dfa:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	9404      	str	r4, [sp, #16]
 8001e00:	695c      	ldr	r4, [r3, #20]
 8001e02:	9404      	str	r4, [sp, #16]
 8001e04:	699c      	ldr	r4, [r3, #24]
 8001e06:	9404      	str	r4, [sp, #16]
 8001e08:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 8001e0a:	2400      	movs	r4, #0
 8001e0c:	e7d3      	b.n	8001db6 <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0e:	9405      	str	r4, [sp, #20]
 8001e10:	695c      	ldr	r4, [r3, #20]
 8001e12:	9405      	str	r4, [sp, #20]
 8001e14:	699c      	ldr	r4, [r3, #24]
 8001e16:	9405      	str	r4, [sp, #20]
 8001e18:	9c05      	ldr	r4, [sp, #20]
 8001e1a:	e7d7      	b.n	8001dcc <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e1c:	2e04      	cmp	r6, #4
 8001e1e:	d015      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1f0>
 8001e20:	2e08      	cmp	r6, #8
 8001e22:	d013      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001e24:	f1be 0f12 	cmp.w	lr, #18
 8001e28:	d010      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001e2a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e2c:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e2e:	681c      	ldr	r4, [r3, #0]
 8001e30:	bf14      	ite	ne
 8001e32:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001e36:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001e3a:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	9406      	str	r4, [sp, #24]
 8001e40:	695c      	ldr	r4, [r3, #20]
 8001e42:	9406      	str	r4, [sp, #24]
 8001e44:	699c      	ldr	r4, [r3, #24]
 8001e46:	9406      	str	r4, [sp, #24]
 8001e48:	9c06      	ldr	r4, [sp, #24]
 8001e4a:	e7de      	b.n	8001e0a <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e4c:	681c      	ldr	r4, [r3, #0]
 8001e4e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001e52:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e54:	2400      	movs	r4, #0
 8001e56:	9407      	str	r4, [sp, #28]
 8001e58:	695c      	ldr	r4, [r3, #20]
 8001e5a:	9407      	str	r4, [sp, #28]
 8001e5c:	699c      	ldr	r4, [r3, #24]
 8001e5e:	9407      	str	r4, [sp, #28]
 8001e60:	9c07      	ldr	r4, [sp, #28]
 8001e62:	e7b3      	b.n	8001dcc <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8001e64:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001e66:	b2a4      	uxth	r4, r4
 8001e68:	2c02      	cmp	r4, #2
 8001e6a:	d11c      	bne.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001e6c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e6e:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e70:	681c      	ldr	r4, [r3, #0]
 8001e72:	bf1d      	ittte	ne
 8001e74:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8001e78:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001e7a:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001e7c:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001e80:	bf18      	it	ne
 8001e82:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001e86:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e88:	685c      	ldr	r4, [r3, #4]
 8001e8a:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001e8c:	bf42      	ittt	mi
 8001e8e:	685c      	ldrmi	r4, [r3, #4]
 8001e90:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001e94:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e96:	2400      	movs	r4, #0
 8001e98:	9408      	str	r4, [sp, #32]
 8001e9a:	695c      	ldr	r4, [r3, #20]
 8001e9c:	9408      	str	r4, [sp, #32]
 8001e9e:	699c      	ldr	r4, [r3, #24]
 8001ea0:	9408      	str	r4, [sp, #32]
 8001ea2:	9c08      	ldr	r4, [sp, #32]
 8001ea4:	e7b1      	b.n	8001e0a <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ea6:	681c      	ldr	r4, [r3, #0]
 8001ea8:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001eac:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001eae:	685c      	ldr	r4, [r3, #4]
 8001eb0:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001eb2:	bf42      	ittt	mi
 8001eb4:	685c      	ldrmi	r4, [r3, #4]
 8001eb6:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001eba:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	9409      	str	r4, [sp, #36]	; 0x24
 8001ec0:	695c      	ldr	r4, [r3, #20]
 8001ec2:	9409      	str	r4, [sp, #36]	; 0x24
 8001ec4:	699c      	ldr	r4, [r3, #24]
 8001ec6:	9409      	str	r4, [sp, #36]	; 0x24
 8001ec8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001eca:	e79e      	b.n	8001e0a <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ecc:	2400      	movs	r4, #0
 8001ece:	940a      	str	r4, [sp, #40]	; 0x28
 8001ed0:	695c      	ldr	r4, [r3, #20]
 8001ed2:	940a      	str	r4, [sp, #40]	; 0x28
 8001ed4:	699c      	ldr	r4, [r3, #24]
 8001ed6:	940a      	str	r4, [sp, #40]	; 0x28
 8001ed8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001eda:	e6dd      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001edc:	2a21      	cmp	r2, #33	; 0x21
 8001ede:	d003      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x28c>
 8001ee0:	2940      	cmp	r1, #64	; 0x40
 8001ee2:	d108      	bne.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ee4:	2a22      	cmp	r2, #34	; 0x22
 8001ee6:	d106      	bne.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 8001ee8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001eea:	b292      	uxth	r2, r2
 8001eec:	b982      	cbnz	r2, 8001f10 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef4:	605a      	str	r2, [r3, #4]
}
 8001ef6:	b00d      	add	sp, #52	; 0x34
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	00100004 	.word	0x00100004
 8001f00:	00010004 	.word	0x00010004
 8001f04:	00010080 	.word	0x00010080
 8001f08:	00010008 	.word	0x00010008
 8001f0c:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f10:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001f14:	2a40      	cmp	r2, #64	; 0x40
 8001f16:	d127      	bne.n	8001f68 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 8001f18:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001f1a:	b97a      	cbnz	r2, 8001f3c <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f1c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001f1e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f20:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f22:	d105      	bne.n	8001f30 <HAL_I2C_EV_IRQHandler+0x2d4>
 8001f24:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f26:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8001f28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f2a:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8001f2c:	6503      	str	r3, [r0, #80]	; 0x50
 8001f2e:	e7e2      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f34:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001f36:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e7f7      	b.n	8001f2c <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 8001f3c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001f3e:	2a01      	cmp	r2, #1
 8001f40:	d102      	bne.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f42:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	e7f5      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 8001f48:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001f4a:	2a02      	cmp	r2, #2
 8001f4c:	d1d3      	bne.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f4e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001f52:	2a22      	cmp	r2, #34	; 0x22
 8001f54:	d104      	bne.n	8001f60 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e7ca      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f60:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001f64:	2a21      	cmp	r2, #33	; 0x21
 8001f66:	d1c6      	bne.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f68:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f6a:	1c51      	adds	r1, r2, #1
 8001f6c:	6241      	str	r1, [r0, #36]	; 0x24
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001f72:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8001f7a:	e7bc      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001f7c:	2c00      	cmp	r4, #0
 8001f7e:	d0ba      	beq.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001f80:	0594      	lsls	r4, r2, #22
 8001f82:	d5b8      	bpl.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f84:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f86:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001f8a:	2a21      	cmp	r2, #33	; 0x21
 8001f8c:	d1b3      	bne.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 8001f8e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001f90:	b292      	uxth	r2, r2
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d1e8      	bne.n	8001f68 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f96:	2904      	cmp	r1, #4
 8001f98:	d00d      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x35a>
 8001f9a:	2908      	cmp	r1, #8
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x35a>
 8001f9e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001fa2:	d008      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001faa:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fac:	2311      	movs	r3, #17
 8001fae:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8001fb4:	e6a2      	b.n	8001cfc <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fbc:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fca:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fd0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fd8:	2a40      	cmp	r2, #64	; 0x40
 8001fda:	f47f ae92 	bne.w	8001d02 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001fde:	f7ff fda5 	bl	8001b2c <HAL_I2C_MemTxCpltCallback>
 8001fe2:	e788      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001fe4:	4d90      	ldr	r5, [pc, #576]	; (8002228 <HAL_I2C_EV_IRQHandler+0x5cc>)
 8001fe6:	400d      	ands	r5, r1
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d041      	beq.n	8002070 <HAL_I2C_EV_IRQHandler+0x414>
 8001fec:	0551      	lsls	r1, r2, #21
 8001fee:	d53f      	bpl.n	8002070 <HAL_I2C_EV_IRQHandler+0x414>
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d13d      	bne.n	8002070 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ff4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001ff8:	2a22      	cmp	r2, #34	; 0x22
 8001ffa:	f47f af7c 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 8001ffe:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002000:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8002002:	2a03      	cmp	r2, #3
 8002004:	d913      	bls.n	800202e <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002006:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	1c51      	adds	r1, r2, #1
 800200c:	6241      	str	r1, [r0, #36]	; 0x24
 800200e:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002010:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002012:	3b01      	subs	r3, #1
 8002014:	b29b      	uxth	r3, r3
 8002016:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8002018:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b03      	cmp	r3, #3
 800201e:	f47f af6a 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002022:	6802      	ldr	r2, [r0, #0]
 8002024:	6853      	ldr	r3, [r2, #4]
 8002026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800202a:	6053      	str	r3, [r2, #4]
 800202c:	e763      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 800202e:	2a01      	cmp	r2, #1
 8002030:	f63f af61 	bhi.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002042:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002044:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	1c51      	adds	r1, r2, #1
 800204a:	6241      	str	r1, [r0, #36]	; 0x24
 800204c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800204e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002056:	2320      	movs	r3, #32
 8002058:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 800205c:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800205e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002066:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002068:	d158      	bne.n	800211c <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800206a:	f7ff fd60 	bl	8001b2e <HAL_I2C_MemRxCpltCallback>
 800206e:	e742      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002070:	2c00      	cmp	r4, #0
 8002072:	f43f af40 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002076:	0597      	lsls	r7, r2, #22
 8002078:	f57f af3d 	bpl.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800207c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 800207e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002080:	b292      	uxth	r2, r2
 8002082:	2a04      	cmp	r2, #4
 8002084:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002086:	d108      	bne.n	800209a <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800208e:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002090:	1c51      	adds	r1, r2, #1
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	6241      	str	r1, [r0, #36]	; 0x24
 8002096:	7013      	strb	r3, [r2, #0]
 8002098:	e76b      	b.n	8001f72 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 800209a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800209c:	b2a4      	uxth	r4, r4
 800209e:	2c03      	cmp	r4, #3
 80020a0:	d108      	bne.n	80020b4 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80020a8:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020aa:	6819      	ldr	r1, [r3, #0]
 80020ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80020b0:	6019      	str	r1, [r3, #0]
 80020b2:	e7ed      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 80020b4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80020b6:	b2a4      	uxth	r4, r4
 80020b8:	2c02      	cmp	r4, #2
 80020ba:	d1e9      	bne.n	8002090 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 80020bc:	3901      	subs	r1, #1
 80020be:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	bf9d      	ittte	ls
 80020c4:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 80020c8:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020ca:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020cc:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020d0:	bf98      	it	ls
 80020d2:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020d6:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	1c51      	adds	r1, r2, #1
 80020dc:	6241      	str	r1, [r0, #36]	; 0x24
 80020de:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80020e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	6242      	str	r2, [r0, #36]	; 0x24
 80020ee:	6802      	ldr	r2, [r0, #0]
 80020f0:	6912      	ldr	r2, [r2, #16]
 80020f2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80020f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020f6:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020fe:	6853      	ldr	r3, [r2, #4]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002106:	2320      	movs	r3, #32
 8002108:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800210c:	2300      	movs	r3, #0
 800210e:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002110:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002114:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002118:	2a40      	cmp	r2, #64	; 0x40
 800211a:	e7a5      	b.n	8002068 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800211c:	f7ff fd01 	bl	8001b22 <HAL_I2C_MasterRxCpltCallback>
 8002120:	e6e9      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002122:	4c42      	ldr	r4, [pc, #264]	; (800222c <HAL_I2C_EV_IRQHandler+0x5d0>)
 8002124:	400c      	ands	r4, r1
 8002126:	b174      	cbz	r4, 8002146 <HAL_I2C_EV_IRQHandler+0x4ea>
 8002128:	0596      	lsls	r6, r2, #22
 800212a:	d50c      	bpl.n	8002146 <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800212c:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800212e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002130:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002134:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002136:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 800213a:	bf54      	ite	pl
 800213c:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800213e:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002140:	f7ff fcf2 	bl	8001b28 <HAL_I2C_AddrCallback>
 8002144:	e6d7      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002146:	4c3a      	ldr	r4, [pc, #232]	; (8002230 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8002148:	400c      	ands	r4, r1
 800214a:	2c00      	cmp	r4, #0
 800214c:	d074      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x5dc>
 800214e:	0594      	lsls	r4, r2, #22
 8002150:	d572      	bpl.n	8002238 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8002152:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800215c:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800215e:	2100      	movs	r1, #0
 8002160:	910b      	str	r1, [sp, #44]	; 0x2c
 8002162:	6959      	ldr	r1, [r3, #20]
 8002164:	910b      	str	r1, [sp, #44]	; 0x2c
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	f041 0101 	orr.w	r1, r1, #1
 800216c:	6019      	str	r1, [r3, #0]
 800216e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002176:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 800217c:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800217e:	d50c      	bpl.n	800219a <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002180:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002184:	2922      	cmp	r1, #34	; 0x22
 8002186:	d003      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x534>
 8002188:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800218c:	292a      	cmp	r1, #42	; 0x2a
 800218e:	d129      	bne.n	80021e4 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002190:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002192:	6809      	ldr	r1, [r1, #0]
 8002194:	6849      	ldr	r1, [r1, #4]
 8002196:	b289      	uxth	r1, r1
 8002198:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800219a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800219c:	b289      	uxth	r1, r1
 800219e:	b1e1      	cbz	r1, 80021da <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021a0:	6959      	ldr	r1, [r3, #20]
 80021a2:	074f      	lsls	r7, r1, #29
 80021a4:	d508      	bpl.n	80021b8 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	1c4c      	adds	r4, r1, #1
 80021ac:	6244      	str	r4, [r0, #36]	; 0x24
 80021ae:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 80021b0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021b8:	6801      	ldr	r1, [r0, #0]
 80021ba:	694b      	ldr	r3, [r1, #20]
 80021bc:	065e      	lsls	r6, r3, #25
 80021be:	d508      	bpl.n	80021d2 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021c2:	6909      	ldr	r1, [r1, #16]
 80021c4:	1c5c      	adds	r4, r3, #1
 80021c6:	6244      	str	r4, [r0, #36]	; 0x24
 80021c8:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 80021ca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021dc:	b123      	cbz	r3, 80021e8 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 80021de:	f7ff fca9 	bl	8001b34 <I2C_ITError>
 80021e2:	e688      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80021e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021e6:	e7d4      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80021e8:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80021ec:	2902      	cmp	r1, #2
 80021ee:	d80a      	bhi.n	8002206 <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f0:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80021f2:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80021f6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002200:	f7ff fc93 	bl	8001b2a <HAL_I2C_ListenCpltCallback>
 8002204:	e677      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002206:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002208:	2b22      	cmp	r3, #34	; 0x22
 800220a:	d002      	beq.n	8002212 <HAL_I2C_EV_IRQHandler+0x5b6>
 800220c:	2a22      	cmp	r2, #34	; 0x22
 800220e:	f47f ae72 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002214:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002218:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002220:	f7ff fc81 	bl	8001b26 <HAL_I2C_SlaveRxCpltCallback>
 8002224:	e667      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002226:	bf00      	nop
 8002228:	00010040 	.word	0x00010040
 800222c:	00010002 	.word	0x00010002
 8002230:	00010010 	.word	0x00010010
 8002234:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002238:	4e39      	ldr	r6, [pc, #228]	; (8002320 <HAL_I2C_EV_IRQHandler+0x6c4>)
 800223a:	4c3a      	ldr	r4, [pc, #232]	; (8002324 <HAL_I2C_EV_IRQHandler+0x6c8>)
 800223c:	402e      	ands	r6, r5
 800223e:	400c      	ands	r4, r1
 8002240:	2e00      	cmp	r6, #0
 8002242:	d036      	beq.n	80022b2 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002244:	4d38      	ldr	r5, [pc, #224]	; (8002328 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8002246:	400d      	ands	r5, r1
 8002248:	b33d      	cbz	r5, 800229a <HAL_I2C_EV_IRQHandler+0x63e>
 800224a:	0555      	lsls	r5, r2, #21
 800224c:	d525      	bpl.n	800229a <HAL_I2C_EV_IRQHandler+0x63e>
 800224e:	bb24      	cbnz	r4, 800229a <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 8002250:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002254:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002256:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 8002258:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 800225a:	2a00      	cmp	r2, #0
 800225c:	f43f ae4b 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002260:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002262:	1c54      	adds	r4, r2, #1
 8002264:	6244      	str	r4, [r0, #36]	; 0x24
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800226a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800226c:	3a01      	subs	r2, #1
 800226e:	b292      	uxth	r2, r2
 8002270:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002272:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002274:	b292      	uxth	r2, r2
 8002276:	2a00      	cmp	r2, #0
 8002278:	f47f ae3d 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 800227c:	2929      	cmp	r1, #41	; 0x29
 800227e:	f47f ae3a 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800228a:	2321      	movs	r3, #33	; 0x21
 800228c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800228e:	2328      	movs	r3, #40	; 0x28
 8002290:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002294:	f7ff fc46 	bl	8001b24 <HAL_I2C_SlaveTxCpltCallback>
 8002298:	e62d      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800229a:	2c00      	cmp	r4, #0
 800229c:	f43f ae2b 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 80022a0:	0594      	lsls	r4, r2, #22
 80022a2:	f57f ae28 	bpl.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80022a6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022a8:	b292      	uxth	r2, r2
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	f47f ae5c 	bne.w	8001f68 <HAL_I2C_EV_IRQHandler+0x30c>
 80022b0:	e621      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80022b2:	4d1e      	ldr	r5, [pc, #120]	; (800232c <HAL_I2C_EV_IRQHandler+0x6d0>)
 80022b4:	400d      	ands	r5, r1
 80022b6:	b335      	cbz	r5, 8002306 <HAL_I2C_EV_IRQHandler+0x6aa>
 80022b8:	0551      	lsls	r1, r2, #21
 80022ba:	d524      	bpl.n	8002306 <HAL_I2C_EV_IRQHandler+0x6aa>
 80022bc:	bb1c      	cbnz	r4, 8002306 <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 80022be:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80022c2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80022c4:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 80022c6:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 80022c8:	2900      	cmp	r1, #0
 80022ca:	f43f ae14 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	1c4c      	adds	r4, r1, #1
 80022d4:	6244      	str	r4, [r0, #36]	; 0x24
 80022d6:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80022d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29b      	uxth	r3, r3
 80022de:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f ae06 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 80022ea:	2a2a      	cmp	r2, #42	; 0x2a
 80022ec:	f47f ae03 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022f0:	6802      	ldr	r2, [r0, #0]
 80022f2:	6853      	ldr	r3, [r2, #4]
 80022f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f8:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022fa:	2322      	movs	r3, #34	; 0x22
 80022fc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80022fe:	2328      	movs	r3, #40	; 0x28
 8002300:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002304:	e78c      	b.n	8002220 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002306:	2c00      	cmp	r4, #0
 8002308:	f43f adf5 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
 800230c:	0592      	lsls	r2, r2, #22
 800230e:	f57f adf2 	bpl.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002312:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002314:	b292      	uxth	r2, r2
 8002316:	2a00      	cmp	r2, #0
 8002318:	f43f aded 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800231c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800231e:	e6b7      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x434>
 8002320:	00100004 	.word	0x00100004
 8002324:	00010004 	.word	0x00010004
 8002328:	00010080 	.word	0x00010080
 800232c:	00010040 	.word	0x00010040

08002330 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002330:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002332:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002334:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002336:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233e:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002340:	2200      	movs	r2, #0
 8002342:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002344:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002346:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002348:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800234a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800234e:	2960      	cmp	r1, #96	; 0x60
 8002350:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800235c:	d107      	bne.n	800236e <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002368:	f7ff fbe3 	bl	8001b32 <HAL_I2C_AbortCpltCallback>
 800236c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002376:	f7ff fbdb 	bl	8001b30 <HAL_I2C_ErrorCallback>
 800237a:	bd08      	pop	{r3, pc}

0800237c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002380:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	4604      	mov	r4, r0
 8002384:	b910      	cbnz	r0, 800238c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
 8002388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <HAL_RCC_ClockConfig+0x124>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	f002 020f 	and.w	r2, r2, #15
 8002394:	428a      	cmp	r2, r1
 8002396:	d328      	bcc.n	80023ea <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	6821      	ldr	r1, [r4, #0]
 800239a:	078f      	lsls	r7, r1, #30
 800239c:	d42d      	bmi.n	80023fa <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	07c8      	lsls	r0, r1, #31
 80023a0:	d440      	bmi.n	8002424 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a2:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCC_ClockConfig+0x124>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f002 020f 	and.w	r2, r2, #15
 80023aa:	4295      	cmp	r5, r2
 80023ac:	d366      	bcc.n	800247c <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ae:	6822      	ldr	r2, [r4, #0]
 80023b0:	0751      	lsls	r1, r2, #29
 80023b2:	d46c      	bmi.n	800248e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	0713      	lsls	r3, r2, #28
 80023b6:	d507      	bpl.n	80023c8 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <HAL_RCC_ClockConfig+0x128>)
 80023ba:	6921      	ldr	r1, [r4, #16]
 80023bc:	6893      	ldr	r3, [r2, #8]
 80023be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023c6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c8:	f000 faa8 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <HAL_RCC_ClockConfig+0x128>)
 80023ce:	4a36      	ldr	r2, [pc, #216]	; (80024a8 <HAL_RCC_ClockConfig+0x12c>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	40d8      	lsrs	r0, r3
 80023da:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x130>)
 80023dc:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80023de:	2000      	movs	r0, #0
 80023e0:	f003 ff54 	bl	800628c <HAL_InitTick>

  return HAL_OK;
 80023e4:	2000      	movs	r0, #0
 80023e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	4299      	cmp	r1, r3
 80023f6:	d1c6      	bne.n	8002386 <HAL_RCC_ClockConfig+0xa>
 80023f8:	e7ce      	b.n	8002398 <HAL_RCC_ClockConfig+0x1c>
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	bf1e      	ittt	ne
 8002402:	689a      	ldrne	r2, [r3, #8]
 8002404:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002408:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	bf42      	ittt	mi
 800240e:	689a      	ldrmi	r2, [r3, #8]
 8002410:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002414:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68a0      	ldr	r0, [r4, #8]
 800241a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800241e:	4302      	orrs	r2, r0
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	e7bc      	b.n	800239e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002424:	6862      	ldr	r2, [r4, #4]
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_ClockConfig+0x128>)
 8002428:	2a01      	cmp	r2, #1
 800242a:	d11d      	bne.n	8002468 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	d0a8      	beq.n	8002386 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002434:	4e1b      	ldr	r6, [pc, #108]	; (80024a4 <HAL_RCC_ClockConfig+0x128>)
 8002436:	68b3      	ldr	r3, [r6, #8]
 8002438:	f023 0303 	bic.w	r3, r3, #3
 800243c:	4313      	orrs	r3, r2
 800243e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002440:	f7fe fd0a 	bl	8000e58 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002448:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	68b3      	ldr	r3, [r6, #8]
 800244c:	6862      	ldr	r2, [r4, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002456:	d0a4      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fcfe 	bl	8000e58 <HAL_GetTick>
 800245c:	1bc0      	subs	r0, r0, r7
 800245e:	4540      	cmp	r0, r8
 8002460:	d9f3      	bls.n	800244a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002462:	2003      	movs	r0, #3
}
 8002464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002468:	1e91      	subs	r1, r2, #2
 800246a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	d802      	bhi.n	8002476 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002470:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002474:	e7dd      	b.n	8002432 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	f013 0f02 	tst.w	r3, #2
 800247a:	e7da      	b.n	8002432 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247c:	b2ea      	uxtb	r2, r5
 800247e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	429d      	cmp	r5, r3
 8002488:	f47f af7d 	bne.w	8002386 <HAL_RCC_ClockConfig+0xa>
 800248c:	e78f      	b.n	80023ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248e:	4905      	ldr	r1, [pc, #20]	; (80024a4 <HAL_RCC_ClockConfig+0x128>)
 8002490:	68e0      	ldr	r0, [r4, #12]
 8002492:	688b      	ldr	r3, [r1, #8]
 8002494:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002498:	4303      	orrs	r3, r0
 800249a:	608b      	str	r3, [r1, #8]
 800249c:	e78a      	b.n	80023b4 <HAL_RCC_ClockConfig+0x38>
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08006544 	.word	0x08006544
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80024be:	6810      	ldr	r0, [r2, #0]
}
 80024c0:	40d8      	lsrs	r0, r3
 80024c2:	4770      	bx	lr
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08006554 	.word	0x08006554
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024d0:	230f      	movs	r3, #15
 80024d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_GetClockConfig+0x34>)
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80024e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80024ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	08db      	lsrs	r3, r3, #3
 80024f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80024f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetClockConfig+0x38>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	600b      	str	r3, [r1, #0]
 8002502:	4770      	bx	lr
 8002504:	40023800 	.word	0x40023800
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800250c:	6803      	ldr	r3, [r0, #0]
{
 800250e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002512:	f013 0601 	ands.w	r6, r3, #1
{
 8002516:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002518:	d00b      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800251a:	49aa      	ldr	r1, [pc, #680]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800251c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800251e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002522:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002526:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002528:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800252c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002530:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002532:	079d      	lsls	r5, r3, #30
 8002534:	d50b      	bpl.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002536:	48a3      	ldr	r0, [pc, #652]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002538:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800253a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800253e:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8002542:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8002544:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002546:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 800254a:	bf08      	it	eq
 800254c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800254e:	f013 0504 	ands.w	r5, r3, #4
 8002552:	d012      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002554:	499b      	ldr	r1, [pc, #620]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002556:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002558:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800255c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002560:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002564:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002568:	bf18      	it	ne
 800256a:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800256e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002572:	bf12      	itee	ne
 8002574:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8002576:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8002578:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800257a:	0718      	lsls	r0, r3, #28
 800257c:	d50f      	bpl.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800257e:	4891      	ldr	r0, [pc, #580]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002582:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002586:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800258a:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800258c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002590:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002594:	f000 8109 	beq.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8002598:	2900      	cmp	r1, #0
 800259a:	bf08      	it	eq
 800259c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800259e:	0699      	lsls	r1, r3, #26
 80025a0:	d533      	bpl.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	4b87      	ldr	r3, [pc, #540]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025a8:	4f87      	ldr	r7, [pc, #540]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fc48 	bl	8000e58 <HAL_GetTick>
 80025c8:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	05da      	lsls	r2, r3, #23
 80025ce:	f140 80ee 	bpl.w	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025d2:	4f7c      	ldr	r7, [pc, #496]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80025d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025d6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80025da:	f040 80fb 	bne.w	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80025e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80025e8:	4a76      	ldr	r2, [pc, #472]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80025ea:	f040 8116 	bne.w	800281a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80025ee:	6891      	ldr	r1, [r2, #8]
 80025f0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80025f4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80025f8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80025fc:	4301      	orrs	r1, r0
 80025fe:	6091      	str	r1, [r2, #8]
 8002600:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002606:	430b      	orrs	r3, r1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800260e:	bf42      	ittt	mi
 8002610:	4b6e      	ldrmi	r3, [pc, #440]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002612:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8002616:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	061a      	lsls	r2, r3, #24
 800261c:	d508      	bpl.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800261e:	4969      	ldr	r1, [pc, #420]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002620:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002622:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8002626:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800262a:	4302      	orrs	r2, r0
 800262c:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002630:	065f      	lsls	r7, r3, #25
 8002632:	d508      	bpl.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002634:	4963      	ldr	r1, [pc, #396]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002636:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002638:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800263c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002640:	4302      	orrs	r2, r0
 8002642:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002646:	05d8      	lsls	r0, r3, #23
 8002648:	d50c      	bpl.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800264a:	485e      	ldr	r0, [pc, #376]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800264c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800264e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8002652:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8002656:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8002658:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800265c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8002660:	bf08      	it	eq
 8002662:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002664:	0599      	lsls	r1, r3, #22
 8002666:	d508      	bpl.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002668:	4956      	ldr	r1, [pc, #344]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800266a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800266c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8002670:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002674:	4302      	orrs	r2, r0
 8002676:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800267a:	055a      	lsls	r2, r3, #21
 800267c:	f100 80d1 	bmi.w	8002822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002680:	2e01      	cmp	r6, #1
 8002682:	f040 80dc 	bne.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002686:	4e52      	ldr	r6, [pc, #328]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002688:	4f4e      	ldr	r7, [pc, #312]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800268e:	f7fe fbe3 	bl	8000e58 <HAL_GetTick>
 8002692:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	f100 8125 	bmi.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	07d0      	lsls	r0, r2, #31
 80026a0:	d501      	bpl.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80026a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026a4:	b11b      	cbz	r3, 80026ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80026a6:	0791      	lsls	r1, r2, #30
 80026a8:	d515      	bpl.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80026aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026ac:	b99b      	cbnz	r3, 80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026ae:	4945      	ldr	r1, [pc, #276]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026b0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026b4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80026b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026bc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80026c0:	4303      	orrs	r3, r0
 80026c2:	6860      	ldr	r0, [r4, #4]
 80026c4:	4303      	orrs	r3, r0
 80026c6:	68a0      	ldr	r0, [r4, #8]
 80026c8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026cc:	6960      	ldr	r0, [r4, #20]
 80026ce:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80026d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026d6:	0753      	lsls	r3, r2, #29
 80026d8:	d503      	bpl.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80026da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e0:	d005      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026e2:	0717      	lsls	r7, r2, #28
 80026e4:	d520      	bpl.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ec:	d11c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026ee:	4935      	ldr	r1, [pc, #212]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026f0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026f4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80026f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002700:	4303      	orrs	r3, r0
 8002702:	6860      	ldr	r0, [r4, #4]
 8002704:	4303      	orrs	r3, r0
 8002706:	68a0      	ldr	r0, [r4, #8]
 8002708:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800270c:	6920      	ldr	r0, [r4, #16]
 800270e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002712:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002716:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800271a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800271c:	f020 001f 	bic.w	r0, r0, #31
 8002720:	3b01      	subs	r3, #1
 8002722:	4303      	orrs	r3, r0
 8002724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002728:	0550      	lsls	r0, r2, #21
 800272a:	d51b      	bpl.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800272c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800272e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002732:	d117      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002734:	4823      	ldr	r0, [pc, #140]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002736:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002738:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800273c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002740:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002744:	433b      	orrs	r3, r7
 8002746:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002748:	f3c1 4101 	ubfx	r1, r1, #16, #2
 800274c:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800274e:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8002752:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002756:	68e1      	ldr	r1, [r4, #12]
 8002758:	0849      	lsrs	r1, r1, #1
 800275a:	3901      	subs	r1, #1
 800275c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002760:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002764:	0511      	lsls	r1, r2, #20
 8002766:	d511      	bpl.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002768:	6923      	ldr	r3, [r4, #16]
 800276a:	68a2      	ldr	r2, [r4, #8]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002772:	6862      	ldr	r2, [r4, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	6962      	ldr	r2, [r4, #20]
 8002778:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800277c:	68e2      	ldr	r2, [r4, #12]
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002788:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800278c:	2301      	movs	r3, #1
 800278e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002790:	f7fe fb62 	bl	8000e58 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002794:	4e0b      	ldr	r6, [pc, #44]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8002796:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002798:	6833      	ldr	r3, [r6, #0]
 800279a:	011a      	lsls	r2, r3, #4
 800279c:	d453      	bmi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800279e:	f7fe fb5b 	bl	8000e58 <HAL_GetTick>
 80027a2:	1bc0      	subs	r0, r0, r7
 80027a4:	2802      	cmp	r0, #2
 80027a6:	d9f7      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80027a8:	e008      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 80027aa:	2601      	movs	r6, #1
 80027ac:	e6f7      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fb53 	bl	8000e58 <HAL_GetTick>
 80027b2:	eba0 0008 	sub.w	r0, r0, r8
 80027b6:	2802      	cmp	r0, #2
 80027b8:	f67f af07 	bls.w	80025ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 80027bc:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 80027be:	b003      	add	sp, #12
 80027c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000
 80027cc:	424711e0 	.word	0x424711e0
 80027d0:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027d6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027da:	4293      	cmp	r3, r2
 80027dc:	f43f aeff 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e2:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ec:	2100      	movs	r1, #0
 80027ee:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80027f0:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f4:	07db      	lsls	r3, r3, #31
 80027f6:	f57f aef2 	bpl.w	80025de <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 80027fa:	f7fe fb2d 	bl	8000e58 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002802:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002806:	0798      	lsls	r0, r3, #30
 8002808:	f53f aee9 	bmi.w	80025de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fb24 	bl	8000e58 <HAL_GetTick>
 8002810:	eba0 0008 	sub.w	r0, r0, r8
 8002814:	4548      	cmp	r0, r9
 8002816:	d9f5      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002818:	e7d0      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281a:	6891      	ldr	r1, [r2, #8]
 800281c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002820:	e6ed      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002822:	483c      	ldr	r0, [pc, #240]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8002824:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002826:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800282a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800282e:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002830:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002834:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002838:	f47f af22 	bne.w	8002680 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800283c:	e723      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800283e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002842:	f43f af20 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8002846:	2d01      	cmp	r5, #1
 8002848:	d14b      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 800284a:	4d33      	ldr	r5, [pc, #204]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800284c:	4e31      	ldr	r6, [pc, #196]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002852:	f7fe fb01 	bl	8000e58 <HAL_GetTick>
 8002856:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002858:	6833      	ldr	r3, [r6, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	d44b      	bmi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800285e:	6821      	ldr	r1, [r4, #0]
 8002860:	074e      	lsls	r6, r1, #29
 8002862:	d501      	bpl.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002864:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002866:	b11b      	cbz	r3, 8002870 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002868:	0708      	lsls	r0, r1, #28
 800286a:	d51a      	bpl.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800286c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800286e:	b9c3      	cbnz	r3, 80028a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002872:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002874:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287c:	4303      	orrs	r3, r0
 800287e:	69e0      	ldr	r0, [r4, #28]
 8002880:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002884:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002886:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800288a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800288e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002892:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002894:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002898:	3801      	subs	r0, #1
 800289a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800289e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80028a2:	05ca      	lsls	r2, r1, #23
 80028a4:	d514      	bpl.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80028a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ac:	d110      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ae:	4919      	ldr	r1, [pc, #100]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80028b0:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80028b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80028ba:	4313      	orrs	r3, r2
 80028bc:	69e2      	ldr	r2, [r4, #28]
 80028be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028c2:	6a22      	ldr	r2, [r4, #32]
 80028c4:	0852      	lsrs	r2, r2, #1
 80028c6:	3a01      	subs	r2, #1
 80028c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80028d0:	2301      	movs	r3, #1
 80028d2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80028d4:	f7fe fac0 	bl	8000e58 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028d8:	4c0e      	ldr	r4, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80028da:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	d50f      	bpl.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 80028e2:	2000      	movs	r0, #0
 80028e4:	e76b      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028e6:	f7fe fab7 	bl	8000e58 <HAL_GetTick>
 80028ea:	eba0 0008 	sub.w	r0, r0, r8
 80028ee:	2802      	cmp	r0, #2
 80028f0:	f67f aed0 	bls.w	8002694 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80028f4:	e762      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80028f6:	f7fe faaf 	bl	8000e58 <HAL_GetTick>
 80028fa:	1bc0      	subs	r0, r0, r7
 80028fc:	2802      	cmp	r0, #2
 80028fe:	d9ab      	bls.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002900:	e75c      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002902:	f7fe faa9 	bl	8000e58 <HAL_GetTick>
 8002906:	1b40      	subs	r0, r0, r5
 8002908:	2802      	cmp	r0, #2
 800290a:	d9e7      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800290c:	e756      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800290e:	bf00      	nop
 8002910:	42470e40 	.word	0x42470e40
 8002914:	40023800 	.word	0x40023800
 8002918:	42470070 	.word	0x42470070

0800291c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291c:	4920      	ldr	r1, [pc, #128]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x84>)
{
 800291e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002920:	688b      	ldr	r3, [r1, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d007      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x1e>
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d020      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002930:	481d      	ldr	r0, [pc, #116]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf18      	it	ne
 8002936:	4610      	movne	r0, r2
 8002938:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800293a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002940:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	bf14      	ite	ne
 8002946:	4818      	ldrne	r0, [pc, #96]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002948:	4816      	ldreq	r0, [pc, #88]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800294e:	bf18      	it	ne
 8002950:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002952:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	fba1 0100 	umull	r0, r1, r1, r0
 800295a:	f7fe f8cf 	bl	8000afc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x84>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800296a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800296e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002970:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002974:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002976:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	bf14      	ite	ne
 800297c:	480a      	ldrne	r0, [pc, #40]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4809      	ldreq	r0, [pc, #36]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002980:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002984:	bf18      	it	ne
 8002986:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002988:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298c:	fba1 0100 	umull	r0, r1, r1, r0
 8002990:	f7fe f8b4 	bl	8000afc <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x84>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800299c:	e7e5      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x4e>
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	017d7840 	.word	0x017d7840

080029ac <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ac:	6803      	ldr	r3, [r0, #0]
{
 80029ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	07df      	lsls	r7, r3, #31
{
 80029b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	d410      	bmi.n	80029da <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	079e      	lsls	r6, r3, #30
 80029bc:	d467      	bmi.n	8002a8e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	071a      	lsls	r2, r3, #28
 80029c2:	f100 80b2 	bmi.w	8002b2a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	075b      	lsls	r3, r3, #29
 80029ca:	f100 80d0 	bmi.w	8002b6e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ce:	69a2      	ldr	r2, [r4, #24]
 80029d0:	2a00      	cmp	r2, #0
 80029d2:	f040 8139 	bne.w	8002c48 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80029d6:	2000      	movs	r0, #0
 80029d8:	e01e      	b.n	8002a18 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029da:	4b97      	ldr	r3, [pc, #604]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	f002 020c 	and.w	r2, r2, #12
 80029e2:	2a04      	cmp	r2, #4
 80029e4:	d010      	beq.n	8002a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ec:	2a08      	cmp	r2, #8
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	025d      	lsls	r5, r3, #9
 80029f4:	d408      	bmi.n	8002a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b90      	ldr	r3, [pc, #576]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029fe:	2a0c      	cmp	r2, #12
 8002a00:	d10d      	bne.n	8002a1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	0250      	lsls	r0, r2, #9
 8002a06:	d50a      	bpl.n	8002a1e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0399      	lsls	r1, r3, #14
 8002a0e:	d5d3      	bpl.n	80029b8 <HAL_RCC_OscConfig+0xc>
 8002a10:	6863      	ldr	r3, [r4, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1d0      	bne.n	80029b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002a16:	2001      	movs	r0, #1
}
 8002a18:	b002      	add	sp, #8
 8002a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	6862      	ldr	r2, [r4, #4]
 8002a20:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002a24:	d111      	bne.n	8002a4a <HAL_RCC_OscConfig+0x9e>
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fa13 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4d81      	ldr	r5, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002a34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	682b      	ldr	r3, [r5, #0]
 8002a38:	039a      	lsls	r2, r3, #14
 8002a3a:	d4bd      	bmi.n	80029b8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fa0c 	bl	8000e58 <HAL_GetTick>
 8002a40:	1b80      	subs	r0, r0, r6
 8002a42:	2864      	cmp	r0, #100	; 0x64
 8002a44:	d9f7      	bls.n	8002a36 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	e7e6      	b.n	8002a18 <HAL_RCC_OscConfig+0x6c>
 8002a4a:	4d7b      	ldr	r5, [pc, #492]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002a50:	682b      	ldr	r3, [r5, #0]
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0xb8>
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	602b      	str	r3, [r5, #0]
 8002a5a:	682b      	ldr	r3, [r5, #0]
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	602b      	str	r3, [r5, #0]
 8002a62:	e7e4      	b.n	8002a2e <HAL_RCC_OscConfig+0x82>
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	602b      	str	r3, [r5, #0]
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a70:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a72:	2a00      	cmp	r2, #0
 8002a74:	d1db      	bne.n	8002a2e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002a76:	f7fe f9ef 	bl	8000e58 <HAL_GetTick>
 8002a7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	039b      	lsls	r3, r3, #14
 8002a80:	d59a      	bpl.n	80029b8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a82:	f7fe f9e9 	bl	8000e58 <HAL_GetTick>
 8002a86:	1b80      	subs	r0, r0, r6
 8002a88:	2864      	cmp	r0, #100	; 0x64
 8002a8a:	d9f7      	bls.n	8002a7c <HAL_RCC_OscConfig+0xd0>
 8002a8c:	e7db      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	f012 0f0c 	tst.w	r2, #12
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a9e:	2a08      	cmp	r2, #8
 8002aa0:	d102      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	025f      	lsls	r7, r3, #9
 8002aa6:	d508      	bpl.n	8002aba <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa8:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002aaa:	6893      	ldr	r3, [r2, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab4:	6853      	ldr	r3, [r2, #4]
 8002ab6:	025e      	lsls	r6, r3, #9
 8002ab8:	d40e      	bmi.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	0795      	lsls	r5, r2, #30
 8002ac0:	d502      	bpl.n	8002ac8 <HAL_RCC_OscConfig+0x11c>
 8002ac2:	68e2      	ldr	r2, [r4, #12]
 8002ac4:	2a01      	cmp	r2, #1
 8002ac6:	d1a6      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	6921      	ldr	r1, [r4, #16]
 8002acc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002ad0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002ad4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	e772      	b.n	80029be <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad8:	68e2      	ldr	r2, [r4, #12]
 8002ada:	4b58      	ldr	r3, [pc, #352]	; (8002c3c <HAL_RCC_OscConfig+0x290>)
 8002adc:	b1b2      	cbz	r2, 8002b0c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ae2:	f7fe f9b9 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4d54      	ldr	r5, [pc, #336]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002ae8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	0798      	lsls	r0, r3, #30
 8002aee:	d507      	bpl.n	8002b00 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	6922      	ldr	r2, [r4, #16]
 8002af4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002af8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002afc:	602b      	str	r3, [r5, #0]
 8002afe:	e75e      	b.n	80029be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe f9aa 	bl	8000e58 <HAL_GetTick>
 8002b04:	1b80      	subs	r0, r0, r6
 8002b06:	2802      	cmp	r0, #2
 8002b08:	d9ef      	bls.n	8002aea <HAL_RCC_OscConfig+0x13e>
 8002b0a:	e79c      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8002b0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b0e:	f7fe f9a3 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4d49      	ldr	r5, [pc, #292]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002b14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	682b      	ldr	r3, [r5, #0]
 8002b18:	0799      	lsls	r1, r3, #30
 8002b1a:	f57f af50 	bpl.w	80029be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe f99b 	bl	8000e58 <HAL_GetTick>
 8002b22:	1b80      	subs	r0, r0, r6
 8002b24:	2802      	cmp	r0, #2
 8002b26:	d9f6      	bls.n	8002b16 <HAL_RCC_OscConfig+0x16a>
 8002b28:	e78d      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	6962      	ldr	r2, [r4, #20]
 8002b2c:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <HAL_RCC_OscConfig+0x294>)
 8002b2e:	b17a      	cbz	r2, 8002b50 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b34:	f7fe f990 	bl	8000e58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b38:	4d3f      	ldr	r5, [pc, #252]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002b3a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b3e:	079f      	lsls	r7, r3, #30
 8002b40:	f53f af41 	bmi.w	80029c6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b44:	f7fe f988 	bl	8000e58 <HAL_GetTick>
 8002b48:	1b80      	subs	r0, r0, r6
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d9f6      	bls.n	8002b3c <HAL_RCC_OscConfig+0x190>
 8002b4e:	e77a      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002b50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b52:	f7fe f981 	bl	8000e58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b56:	4d38      	ldr	r5, [pc, #224]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002b58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b5c:	0798      	lsls	r0, r3, #30
 8002b5e:	f57f af32 	bpl.w	80029c6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f979 	bl	8000e58 <HAL_GetTick>
 8002b66:	1b80      	subs	r0, r0, r6
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d9f6      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1ae>
 8002b6c:	e76b      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b72:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002b76:	d128      	bne.n	8002bca <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	9201      	str	r2, [sp, #4]
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b8c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	4d2d      	ldr	r5, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	05d9      	lsls	r1, r3, #23
 8002b94:	d51b      	bpl.n	8002bce <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b96:	68a3      	ldr	r3, [r4, #8]
 8002b98:	4d27      	ldr	r5, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d127      	bne.n	8002bee <HAL_RCC_OscConfig+0x242>
 8002b9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002ba6:	f7fe f957 	bl	8000e58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	4d23      	ldr	r5, [pc, #140]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002bac:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bb4:	079b      	lsls	r3, r3, #30
 8002bb6:	d539      	bpl.n	8002c2c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8002bb8:	2e00      	cmp	r6, #0
 8002bba:	f43f af08 	beq.w	80029ce <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_RCC_OscConfig+0x28c>)
 8002bc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc8:	e701      	b.n	80029ce <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2600      	movs	r6, #0
 8002bcc:	e7df      	b.n	8002b8e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bce:	682b      	ldr	r3, [r5, #0]
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bd6:	f7fe f93f 	bl	8000e58 <HAL_GetTick>
 8002bda:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	05da      	lsls	r2, r3, #23
 8002be0:	d4d9      	bmi.n	8002b96 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe f939 	bl	8000e58 <HAL_GetTick>
 8002be6:	1bc0      	subs	r0, r0, r7
 8002be8:	2802      	cmp	r0, #2
 8002bea:	d9f7      	bls.n	8002bdc <HAL_RCC_OscConfig+0x230>
 8002bec:	e72b      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d104      	bne.n	8002bfc <HAL_RCC_OscConfig+0x250>
 8002bf2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	672b      	str	r3, [r5, #112]	; 0x70
 8002bfa:	e7d0      	b.n	8002b9e <HAL_RCC_OscConfig+0x1f2>
 8002bfc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	672a      	str	r2, [r5, #112]	; 0x70
 8002c04:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ca      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8002c10:	f7fe f922 	bl	8000e58 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c18:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c1c:	0798      	lsls	r0, r3, #30
 8002c1e:	d5cb      	bpl.n	8002bb8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe f91a 	bl	8000e58 <HAL_GetTick>
 8002c24:	1bc0      	subs	r0, r0, r7
 8002c26:	4540      	cmp	r0, r8
 8002c28:	d9f7      	bls.n	8002c1a <HAL_RCC_OscConfig+0x26e>
 8002c2a:	e70c      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f914 	bl	8000e58 <HAL_GetTick>
 8002c30:	1bc0      	subs	r0, r0, r7
 8002c32:	4540      	cmp	r0, r8
 8002c34:	d9bd      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x206>
 8002c36:	e706      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
 8002c44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c48:	4d23      	ldr	r5, [pc, #140]	; (8002cd8 <HAL_RCC_OscConfig+0x32c>)
 8002c4a:	68ab      	ldr	r3, [r5, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f43f aee0 	beq.w	8002a16 <HAL_RCC_OscConfig+0x6a>
 8002c56:	4e21      	ldr	r6, [pc, #132]	; (8002cdc <HAL_RCC_OscConfig+0x330>)
 8002c58:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5e:	d12d      	bne.n	8002cbc <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8002c60:	f7fe f8fa 	bl	8000e58 <HAL_GetTick>
 8002c64:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	0199      	lsls	r1, r3, #6
 8002c6a:	d421      	bmi.n	8002cb0 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	6a22      	ldr	r2, [r4, #32]
 8002c6e:	69e3      	ldr	r3, [r4, #28]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c80:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002c84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4c14      	ldr	r4, [pc, #80]	; (8002cd8 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c90:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c92:	2301      	movs	r3, #1
 8002c94:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c96:	f7fe f8df 	bl	8000e58 <HAL_GetTick>
 8002c9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	019a      	lsls	r2, r3, #6
 8002ca0:	f53f ae99 	bmi.w	80029d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe f8d8 	bl	8000e58 <HAL_GetTick>
 8002ca8:	1b40      	subs	r0, r0, r5
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d9f6      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
 8002cae:	e6ca      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe f8d2 	bl	8000e58 <HAL_GetTick>
 8002cb4:	1bc0      	subs	r0, r0, r7
 8002cb6:	2802      	cmp	r0, #2
 8002cb8:	d9d5      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
 8002cba:	e6c4      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f8cc 	bl	8000e58 <HAL_GetTick>
 8002cc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	f57f ae86 	bpl.w	80029d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe f8c5 	bl	8000e58 <HAL_GetTick>
 8002cce:	1b00      	subs	r0, r0, r4
 8002cd0:	2802      	cmp	r0, #2
 8002cd2:	d9f6      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x316>
 8002cd4:	e6b7      	b.n	8002a46 <HAL_RCC_OscConfig+0x9a>
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470060 	.word	0x42470060

08002ce0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ce0:	6802      	ldr	r2, [r0, #0]
{
 8002ce2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ce4:	68d3      	ldr	r3, [r2, #12]
 8002ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cea:	60d3      	str	r3, [r2, #12]
{
 8002cec:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cee:	f7fe f8b3 	bl	8000e58 <HAL_GetTick>
 8002cf2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	069b      	lsls	r3, r3, #26
 8002cfa:	d501      	bpl.n	8002d00 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d00:	f7fe f8aa 	bl	8000e58 <HAL_GetTick>
 8002d04:	1b40      	subs	r0, r0, r5
 8002d06:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d0a:	d9f3      	bls.n	8002cf4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002d0c:	2003      	movs	r0, #3
}
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}

08002d10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d10:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d12:	6803      	ldr	r3, [r0, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	0652      	lsls	r2, r2, #25
{
 8002d18:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d1a:	d501      	bpl.n	8002d20 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002d26:	f7fe f897 	bl	8000e58 <HAL_GetTick>
 8002d2a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	065b      	lsls	r3, r3, #25
 8002d32:	d4f3      	bmi.n	8002d1c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d34:	f7fe f890 	bl	8000e58 <HAL_GetTick>
 8002d38:	1b40      	subs	r0, r0, r5
 8002d3a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d3e:	d9f5      	bls.n	8002d2c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002d40:	2003      	movs	r0, #3
}
 8002d42:	bd38      	pop	{r3, r4, r5, pc}

08002d44 <HAL_RTC_Init>:
{
 8002d44:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002d46:	4604      	mov	r4, r0
 8002d48:	b1b8      	cbz	r0, 8002d7a <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d4a:	7f43      	ldrb	r3, [r0, #29]
 8002d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d50:	b913      	cbnz	r3, 8002d58 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002d52:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002d54:	f003 fa26 	bl	80061a4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002d58:	2302      	movs	r3, #2
 8002d5a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	22ca      	movs	r2, #202	; 0xca
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
 8002d62:	2253      	movs	r2, #83	; 0x53
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff ffd2 	bl	8002d10 <RTC_EnterInitMode>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	4605      	mov	r5, r0
 8002d70:	b128      	cbz	r0, 8002d7e <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d76:	2304      	movs	r3, #4
 8002d78:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8002d7a:	2501      	movs	r5, #1
 8002d7c:	e02e      	b.n	8002ddc <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d7e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d80:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d82:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d8c:	6862      	ldr	r2, [r4, #4]
 8002d8e:	6899      	ldr	r1, [r3, #8]
 8002d90:	4302      	orrs	r2, r0
 8002d92:	6960      	ldr	r0, [r4, #20]
 8002d94:	4302      	orrs	r2, r0
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d9a:	68e2      	ldr	r2, [r4, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68a1      	ldr	r1, [r4, #8]
 8002da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002da6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dae:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	069b      	lsls	r3, r3, #26
 8002db4:	d405      	bmi.n	8002dc2 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff ff92 	bl	8002ce0 <HAL_RTC_WaitForSynchro>
 8002dbc:	b108      	cbz	r0, 8002dc2 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	e7d7      	b.n	8002d72 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002dc2:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002dc4:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	7763      	strb	r3, [r4, #29]
}
 8002ddc:	4628      	mov	r0, r5
 8002dde:	bd38      	pop	{r3, r4, r5, pc}

08002de0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002de0:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002de2:	2809      	cmp	r0, #9
 8002de4:	d803      	bhi.n	8002dee <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002de6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002dea:	b2c0      	uxtb	r0, r0
 8002dec:	4770      	bx	lr
    Value -= 10U;
 8002dee:	380a      	subs	r0, #10
    bcdhigh++;
 8002df0:	3301      	adds	r3, #1
    Value -= 10U;
 8002df2:	b2c0      	uxtb	r0, r0
 8002df4:	e7f5      	b.n	8002de2 <RTC_ByteToBcd2+0x2>

08002df6 <HAL_RTC_SetDate>:
{
 8002df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002df8:	7f03      	ldrb	r3, [r0, #28]
 8002dfa:	2b01      	cmp	r3, #1
{
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8002e02:	d030      	beq.n	8002e66 <HAL_RTC_SetDate+0x70>
 8002e04:	2301      	movs	r3, #1
 8002e06:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002e08:	7746      	strb	r6, [r0, #29]
 8002e0a:	784b      	ldrb	r3, [r1, #1]
 8002e0c:	78c8      	ldrb	r0, [r1, #3]
 8002e0e:	788e      	ldrb	r6, [r1, #2]
 8002e10:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	d148      	bne.n	8002ea8 <HAL_RTC_SetDate+0xb2>
 8002e16:	06da      	lsls	r2, r3, #27
 8002e18:	d503      	bpl.n	8002e22 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e1a:	f023 0310 	bic.w	r3, r3, #16
 8002e1e:	330a      	adds	r3, #10
 8002e20:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e22:	f7ff ffdd 	bl	8002de0 <RTC_ByteToBcd2>
 8002e26:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e28:	7848      	ldrb	r0, [r1, #1]
 8002e2a:	f7ff ffd9 	bl	8002de0 <RTC_ByteToBcd2>
 8002e2e:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e30:	4630      	mov	r0, r6
 8002e32:	f7ff ffd5 	bl	8002de0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e36:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002e3a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002e3e:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	22ca      	movs	r2, #202	; 0xca
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
 8002e48:	2253      	movs	r2, #83	; 0x53
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f7ff ff5f 	bl	8002d10 <RTC_EnterInitMode>
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	4606      	mov	r6, r0
 8002e56:	b140      	cbz	r0, 8002e6a <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002e60:	2300      	movs	r3, #0
 8002e62:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8002e64:	2601      	movs	r6, #1
}
 8002e66:	4630      	mov	r0, r6
 8002e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e6a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002e6e:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002e72:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e7a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	069b      	lsls	r3, r3, #26
 8002e80:	d40a      	bmi.n	8002e98 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e82:	4628      	mov	r0, r5
 8002e84:	f7ff ff2c 	bl	8002ce0 <HAL_RTC_WaitForSynchro>
 8002e88:	b130      	cbz	r0, 8002e98 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	22ff      	movs	r2, #255	; 0xff
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e90:	2304      	movs	r3, #4
 8002e92:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8002e94:	772e      	strb	r6, [r5, #28]
 8002e96:	e7e5      	b.n	8002e64 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	22ff      	movs	r2, #255	; 0xff
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8002ea6:	e7de      	b.n	8002e66 <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ea8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002eaa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002eae:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002eb0:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002eb4:	e7c5      	b.n	8002e42 <HAL_RTC_SetDate+0x4c>

08002eb6 <HAL_RTC_SetTime>:
{
 8002eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002eb8:	7f03      	ldrb	r3, [r0, #28]
 8002eba:	2b01      	cmp	r3, #1
{
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	460f      	mov	r7, r1
 8002ec0:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8002ec4:	d02f      	beq.n	8002f26 <HAL_RTC_SetTime+0x70>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	7703      	strb	r3, [r0, #28]
 8002eca:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ecc:	7745      	strb	r5, [r0, #29]
 8002ece:	7808      	ldrb	r0, [r1, #0]
 8002ed0:	784d      	ldrb	r5, [r1, #1]
 8002ed2:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ed4:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002ed6:	bb42      	cbnz	r2, 8002f2a <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ed8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8002edc:	bf08      	it	eq
 8002ede:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ee0:	f7ff ff7e 	bl	8002de0 <RTC_ByteToBcd2>
 8002ee4:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f7ff ff7a 	bl	8002de0 <RTC_ByteToBcd2>
 8002eec:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff ff76 	bl	8002de0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ef6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002efa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002efe:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f02:	6833      	ldr	r3, [r6, #0]
 8002f04:	22ca      	movs	r2, #202	; 0xca
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
 8002f08:	2253      	movs	r2, #83	; 0x53
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7ff feff 	bl	8002d10 <RTC_EnterInitMode>
 8002f12:	6833      	ldr	r3, [r6, #0]
 8002f14:	4605      	mov	r5, r0
 8002f16:	b1a8      	cbz	r0, 8002f44 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002f18:	22ff      	movs	r2, #255	; 0xff
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002f20:	2300      	movs	r3, #0
 8002f22:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8002f24:	2501      	movs	r5, #1
}
 8002f26:	4628      	mov	r0, r5
 8002f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f2a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f2e:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8002f32:	bf08      	it	eq
 8002f34:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f36:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f3a:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002f3c:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f3e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002f42:	e7de      	b.n	8002f02 <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f44:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8002f48:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002f4c:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002f4e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f50:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002f52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f56:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	4302      	orrs	r2, r0
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f68:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	d40a      	bmi.n	8002f86 <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f70:	4630      	mov	r0, r6
 8002f72:	f7ff feb5 	bl	8002ce0 <HAL_RTC_WaitForSynchro>
 8002f76:	b130      	cbz	r0, 8002f86 <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002f78:	6833      	ldr	r3, [r6, #0]
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8002f82:	7735      	strb	r5, [r6, #28]
 8002f84:	e7ce      	b.n	8002f24 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f86:	6833      	ldr	r3, [r6, #0]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8002f90:	2300      	movs	r3, #0
 8002f92:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8002f94:	e7c7      	b.n	8002f26 <HAL_RTC_SetTime+0x70>

08002f96 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002f96:	0903      	lsrs	r3, r0, #4
 8002f98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002f9c:	f000 000f 	and.w	r0, r0, #15
 8002fa0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8002fa4:	b2c0      	uxtb	r0, r0
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002fa8:	6803      	ldr	r3, [r0, #0]
 8002faa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fac:	6048      	str	r0, [r1, #4]
{
 8002fae:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fb0:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002fb2:	681d      	ldr	r5, [r3, #0]
 8002fb4:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 8002fb8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fbc:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002fc0:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fc2:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002fc4:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002fc8:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002fcc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002fd0:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002fd4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002fd6:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002fd8:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002fda:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002fdc:	b952      	cbnz	r2, 8002ff4 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002fde:	f7ff ffda 	bl	8002f96 <RTC_Bcd2ToByte>
 8002fe2:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff ffd6 	bl	8002f96 <RTC_Bcd2ToByte>
 8002fea:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002fec:	4628      	mov	r0, r5
 8002fee:	f7ff ffd2 	bl	8002f96 <RTC_Bcd2ToByte>
 8002ff2:	7088      	strb	r0, [r1, #2]
}
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}

08002ff8 <HAL_RTC_GetDate>:
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002ffa:	6803      	ldr	r3, [r0, #0]
 8002ffc:	685c      	ldr	r4, [r3, #4]
 8002ffe:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8003002:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003006:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003008:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800300c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003010:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003014:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003016:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003018:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800301a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800301c:	b952      	cbnz	r2, 8003034 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800301e:	f7ff ffba 	bl	8002f96 <RTC_Bcd2ToByte>
 8003022:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003024:	4628      	mov	r0, r5
 8003026:	f7ff ffb6 	bl	8002f96 <RTC_Bcd2ToByte>
 800302a:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff ffb2 	bl	8002f96 <RTC_Bcd2ToByte>
 8003032:	7088      	strb	r0, [r1, #2]
}
 8003034:	2000      	movs	r0, #0
 8003036:	bd38      	pop	{r3, r4, r5, pc}

08003038 <HAL_RTCEx_SetCalibrationOutPut>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003038:	7f03      	ldrb	r3, [r0, #28]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f04f 0302 	mov.w	r3, #2
 8003040:	d016      	beq.n	8003070 <HAL_RTCEx_SetCalibrationOutPut+0x38>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003042:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003044:	6803      	ldr	r3, [r0, #0]
 8003046:	22ca      	movs	r2, #202	; 0xca
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
 800304a:	2253      	movs	r2, #83	; 0x53
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003054:	609a      	str	r2, [r3, #8]
  
  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4311      	orrs	r1, r2
 800305a:	6099      	str	r1, [r3, #8]
  
  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003062:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8003068:	2301      	movs	r3, #1
 800306a:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 800306c:	2300      	movs	r3, #0
 800306e:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8003070:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8003072:	4770      	bx	lr

08003074 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003078:	b087      	sub	sp, #28
 800307a:	4604      	mov	r4, r0
 800307c:	460d      	mov	r5, r1
 800307e:	4691      	mov	r9, r2
 8003080:	4698      	mov	r8, r3
 8003082:	9e10      	ldr	r6, [sp, #64]	; 0x40
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7fd fee8 	bl	8000e58 <HAL_GetTick>
 8003088:	4607      	mov	r7, r0
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 800308a:	b92d      	cbnz	r5, 8003098 <HAL_SD_ReadBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800308c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800308e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003092:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003094:	2001      	movs	r0, #1
 8003096:	e010      	b.n	80030ba <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8003098:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800309c:	b2c0      	uxtb	r0, r0
 800309e:	2801      	cmp	r0, #1
 80030a0:	f040 80c1 	bne.w	8003226 <HAL_SD_ReadBlocks+0x1b2>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030a6:	eb09 0308 	add.w	r3, r9, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80030aa:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030ac:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ae:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030b0:	d906      	bls.n	80030c0 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b8:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 80030ba:	b007      	add	sp, #28
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80030c0:	2303      	movs	r3, #3
 80030c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80030c6:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80030ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030cc:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80030ce:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 80030d2:	bf18      	it	ne
 80030d4:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80030d8:	f000 fdd5 	bl	8003c86 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80030dc:	b150      	cbz	r0, 80030f4 <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80030e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030e8:	4318      	orrs	r0, r3
 80030ea:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030ec:	2001      	movs	r0, #1
 80030ee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 80030f2:	e7e2      	b.n	80030ba <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80030fa:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80030fe:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003100:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003102:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003104:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003108:	f04f 0b02 	mov.w	fp, #2
    SDIO_ConfigData(hsd->Instance, &config);
 800310c:	4669      	mov	r1, sp
 800310e:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003110:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003112:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003116:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 800311a:	f000 fda1 	bl	8003c60 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800311e:	45d0      	cmp	r8, sl
 8003120:	d925      	bls.n	800316e <HAL_SD_ReadBlocks+0xfa>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003122:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003126:	4649      	mov	r1, r9
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	f000 fddc 	bl	8003ce6 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800312e:	2800      	cmp	r0, #0
 8003130:	d1d5      	bne.n	80030de <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003132:	6820      	ldr	r0, [r4, #0]
 8003134:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003136:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800313a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800313c:	d01e      	beq.n	800317c <HAL_SD_ReadBlocks+0x108>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	d509      	bpl.n	8003156 <HAL_SD_ReadBlocks+0xe2>
 8003142:	f1b8 0f01 	cmp.w	r8, #1
 8003146:	d906      	bls.n	8003156 <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003148:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800314a:	2b03      	cmp	r3, #3
 800314c:	d003      	beq.n	8003156 <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800314e:	f000 fe13 	bl	8003d78 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003152:	2800      	cmp	r0, #0
 8003154:	d1c3      	bne.n	80030de <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	0710      	lsls	r0, r2, #28
 800315c:	d530      	bpl.n	80031c0 <HAL_SD_ReadBlocks+0x14c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800315e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003166:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800316a:	63a3      	str	r3, [r4, #56]	; 0x38
 800316c:	e7be      	b.n	80030ec <HAL_SD_ReadBlocks+0x78>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800316e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003172:	4649      	mov	r1, r9
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	f000 fd9e 	bl	8003cb6 <SDMMC_CmdReadSingleBlock>
 800317a:	e7d8      	b.n	800312e <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	d50b      	bpl.n	8003198 <HAL_SD_ReadBlocks+0x124>
 8003180:	f1a5 0904 	sub.w	r9, r5, #4
 8003184:	f105 0a1c 	add.w	sl, r5, #28
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	f000 fcab 	bl	8003ae4 <SDIO_ReadFIFO>
 800318e:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 8003192:	45d1      	cmp	r9, sl
 8003194:	d1f8      	bne.n	8003188 <HAL_SD_ReadBlocks+0x114>
        tempbuff += 8U;
 8003196:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003198:	b966      	cbnz	r6, 80031b4 <HAL_SD_ReadBlocks+0x140>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031a8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80031b0:	2003      	movs	r0, #3
 80031b2:	e782      	b.n	80030ba <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80031b4:	f7fd fe50 	bl	8000e58 <HAL_GetTick>
 80031b8:	1bc0      	subs	r0, r0, r7
 80031ba:	4286      	cmp	r6, r0
 80031bc:	d8b9      	bhi.n	8003132 <HAL_SD_ReadBlocks+0xbe>
 80031be:	e7ec      	b.n	800319a <HAL_SD_ReadBlocks+0x126>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80031c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c2:	0791      	lsls	r1, r2, #30
 80031c4:	d506      	bpl.n	80031d4 <HAL_SD_ReadBlocks+0x160>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031ce:	f043 0302 	orr.w	r3, r3, #2
 80031d2:	e7ca      	b.n	800316a <HAL_SD_ReadBlocks+0xf6>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80031d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d6:	0692      	lsls	r2, r2, #26
 80031d8:	d518      	bpl.n	800320c <HAL_SD_ReadBlocks+0x198>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80031e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e2:	f043 0320 	orr.w	r3, r3, #32
 80031e6:	e7c0      	b.n	800316a <HAL_SD_ReadBlocks+0xf6>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 80031e8:	f000 fc7c 	bl	8003ae4 <SDIO_ReadFIFO>
 80031ec:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80031f0:	b93e      	cbnz	r6, 8003202 <HAL_SD_ReadBlocks+0x18e>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003200:	e7b3      	b.n	800316a <HAL_SD_ReadBlocks+0xf6>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003202:	f7fd fe29 	bl	8000e58 <HAL_GetTick>
 8003206:	1bc0      	subs	r0, r0, r7
 8003208:	4286      	cmp	r6, r0
 800320a:	d9f2      	bls.n	80031f2 <HAL_SD_ReadBlocks+0x17e>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003210:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8003214:	d1e8      	bne.n	80031e8 <HAL_SD_ReadBlocks+0x174>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003216:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800321a:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800321c:	2201      	movs	r2, #1
 800321e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8003222:	4618      	mov	r0, r3
 8003224:	e749      	b.n	80030ba <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800322c:	e731      	b.n	8003092 <HAL_SD_ReadBlocks+0x1e>

0800322e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800322e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	4604      	mov	r4, r0
 8003236:	460d      	mov	r5, r1
 8003238:	4691      	mov	r9, r2
 800323a:	461e      	mov	r6, r3
 800323c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7fd fe0b 	bl	8000e58 <HAL_GetTick>
 8003242:	4680      	mov	r8, r0
  uint32_t count = 0U;
  uint32_t *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8003244:	b92d      	cbnz	r5, 8003252 <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003248:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800324c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800324e:	2001      	movs	r0, #1
 8003250:	e010      	b.n	8003274 <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8003252:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003256:	b2c0      	uxtb	r0, r0
 8003258:	2801      	cmp	r0, #1
 800325a:	f040 809d 	bne.w	8003398 <HAL_SD_WriteBlocks+0x16a>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800325e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003260:	eb09 0306 	add.w	r3, r9, r6
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003264:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003266:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003268:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800326a:	d906      	bls.n	800327a <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800326c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800326e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003272:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8003274:	b007      	add	sp, #28
 8003276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800327a:	2303      	movs	r3, #3
 800327c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003280:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003282:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8003284:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003286:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003288:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 800328c:	bf18      	it	ne
 800328e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003292:	f000 fcf8 	bl	8003c86 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003296:	b150      	cbz	r0, 80032ae <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80032a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032a2:	4318      	orrs	r0, r3
 80032a4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032a6:	2001      	movs	r0, #1
 80032a8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80032ac:	e7e2      	b.n	8003274 <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 80032ae:	2e01      	cmp	r6, #1
 80032b0:	d933      	bls.n	800331a <HAL_SD_WriteBlocks+0xec>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032b2:	2320      	movs	r3, #32
 80032b4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80032b6:	4649      	mov	r1, r9
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	f000 fd44 	bl	8003d46 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80032be:	2800      	cmp	r0, #0
 80032c0:	d1ea      	bne.n	8003298 <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032c8:	0273      	lsls	r3, r6, #9
 80032ca:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032cc:	2390      	movs	r3, #144	; 0x90
 80032ce:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032d0:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032d2:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032d4:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 80032d6:	4669      	mov	r1, sp
 80032d8:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032da:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80032dc:	f000 fcc0 	bl	8003c60 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032e4:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80032e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80032ea:	d01d      	beq.n	8003328 <HAL_SD_WriteBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80032ec:	05dd      	lsls	r5, r3, #23
 80032ee:	d508      	bpl.n	8003302 <HAL_SD_WriteBlocks+0xd4>
 80032f0:	2e01      	cmp	r6, #1
 80032f2:	d906      	bls.n	8003302 <HAL_SD_WriteBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80032f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d003      	beq.n	8003302 <HAL_SD_WriteBlocks+0xd4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032fa:	f000 fd3d 	bl	8003d78 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80032fe:	2800      	cmp	r0, #0
 8003300:	d1ca      	bne.n	8003298 <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003306:	0711      	lsls	r1, r2, #28
 8003308:	d52d      	bpl.n	8003366 <HAL_SD_WriteBlocks+0x138>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800330a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003312:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003316:	63a3      	str	r3, [r4, #56]	; 0x38
 8003318:	e7c5      	b.n	80032a6 <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800331a:	2310      	movs	r3, #16
 800331c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800331e:	4649      	mov	r1, r9
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	f000 fcf8 	bl	8003d16 <SDMMC_CmdWriteSingleBlock>
 8003326:	e7ca      	b.n	80032be <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8003328:	045b      	lsls	r3, r3, #17
 800332a:	d509      	bpl.n	8003340 <HAL_SD_WriteBlocks+0x112>
 800332c:	46a9      	mov	r9, r5
 800332e:	3520      	adds	r5, #32
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8003330:	4649      	mov	r1, r9
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	f109 0904 	add.w	r9, r9, #4
 8003338:	f000 fbd7 	bl	8003aea <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800333c:	454d      	cmp	r5, r9
 800333e:	d1f7      	bne.n	8003330 <HAL_SD_WriteBlocks+0x102>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003340:	b957      	cbnz	r7, 8003358 <HAL_SD_WriteBlocks+0x12a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800334a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800334c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800334e:	2301      	movs	r3, #1
 8003350:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003354:	2003      	movs	r0, #3
 8003356:	e78d      	b.n	8003274 <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003358:	f7fd fd7e 	bl	8000e58 <HAL_GetTick>
 800335c:	eba0 0008 	sub.w	r0, r0, r8
 8003360:	4287      	cmp	r7, r0
 8003362:	d8bd      	bhi.n	80032e0 <HAL_SD_WriteBlocks+0xb2>
 8003364:	e7ed      	b.n	8003342 <HAL_SD_WriteBlocks+0x114>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	0792      	lsls	r2, r2, #30
 800336a:	d506      	bpl.n	800337a <HAL_SD_WriteBlocks+0x14c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800336c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	e7cd      	b.n	8003316 <HAL_SD_WriteBlocks+0xe8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800337a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800337c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003380:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003386:	d003      	beq.n	8003390 <HAL_SD_WriteBlocks+0x162>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800338a:	f043 0310 	orr.w	r3, r3, #16
 800338e:	e7c2      	b.n	8003316 <HAL_SD_WriteBlocks+0xe8>
    hsd->State = HAL_SD_STATE_READY;
 8003390:	2301      	movs	r3, #1
 8003392:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003396:	e76d      	b.n	8003274 <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003398:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800339a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800339e:	e755      	b.n	800324c <HAL_SD_WriteBlocks+0x1e>

080033a0 <HAL_SD_GetCardCSD>:
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  uint32_t tmp = 0U;
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80033a0:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80033a2:	0f9a      	lsrs	r2, r3, #30
 80033a4:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80033a6:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80033aa:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80033ac:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80033b0:	708a      	strb	r2, [r1, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
  pCSD->TAAC = (uint8_t)tmp;
 80033b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80033b6:	70ca      	strb	r2, [r1, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
  pCSD->NSAC = (uint8_t)tmp;
 80033b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80033bc:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 80033be:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80033c0:	714b      	strb	r3, [r1, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80033c2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033c4:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	80ca      	strh	r2, [r1, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80033ca:	88ca      	ldrh	r2, [r1, #6]
{
 80033cc:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80033d4:	4322      	orrs	r2, r4
 80033d6:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80033d8:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80033dc:	720a      	strb	r2, [r1, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80033de:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80033e2:	09d4      	lsrs	r4, r2, #7
 80033e4:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80033e6:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80033ea:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80033ec:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80033f0:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80033f2:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80033f6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80033f8:	2400      	movs	r4, #0
 80033fa:	734c      	strb	r4, [r1, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80033fc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033fe:	2c00      	cmp	r4, #0
 8003400:	f040 8083 	bne.w	800350a <HAL_SD_GetCardCSD+0x16a>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003404:	0292      	lsls	r2, r2, #10
 8003406:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800340a:	610a      	str	r2, [r1, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
    pCSD->DeviceSize |= (tmp) << 2U;
 800340c:	690a      	ldr	r2, [r1, #16]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8003414:	4313      	orrs	r3, r2
 8003416:	610b      	str	r3, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003418:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800341a:	690b      	ldr	r3, [r1, #16]
 800341c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8003420:	610b      	str	r3, [r1, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8003422:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8003426:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8003428:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800342c:	754b      	strb	r3, [r1, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800342e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8003432:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8003434:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8003438:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800343a:	0bd3      	lsrs	r3, r2, #15
 800343c:	f003 0306 	and.w	r3, r3, #6
 8003440:	760b      	strb	r3, [r1, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8003442:	7e0c      	ldrb	r4, [r1, #24]
 8003444:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003448:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800344c:	4322      	orrs	r2, r4
 800344e:	760a      	strb	r2, [r1, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003450:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003452:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003454:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003456:	3402      	adds	r4, #2
 8003458:	40a2      	lsls	r2, r4
 800345a:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800345c:	7a0d      	ldrb	r5, [r1, #8]
 800345e:	2401      	movs	r4, #1
 8003460:	40ac      	lsls	r4, r5
 8003462:	6584      	str	r4, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003464:	0a64      	lsrs	r4, r4, #9
 8003466:	4362      	muls	r2, r4
 8003468:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800346a:	f44f 7200 	mov.w	r2, #512	; 0x200
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800346e:	6602      	str	r2, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003470:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800347a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800347c:	768b      	strb	r3, [r1, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800347e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003480:	7e8a      	ldrb	r2, [r1, #26]
 8003482:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8003486:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800348c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800348e:	76cb      	strb	r3, [r1, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003490:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003492:	0fda      	lsrs	r2, r3, #31
 8003494:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8003496:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800349a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800349c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80034a0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80034a2:	0d9a      	lsrs	r2, r3, #22
 80034a4:	f002 020c 	and.w	r2, r2, #12
 80034a8:	77ca      	strb	r2, [r1, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80034aa:	7fca      	ldrb	r2, [r1, #31]
 80034ac:	f3c3 5081 	ubfx	r0, r3, #22, #2
 80034b0:	4302      	orrs	r2, r0
 80034b2:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80034b4:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80034b8:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 80034bc:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80034be:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 80034c2:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80034c6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80034ca:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80034ce:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80034d2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80034d6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80034da:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80034de:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80034e2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80034e6:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80034ea:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80034ee:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80034f2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80034f6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 80034fa:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80034fe:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8003502:	2301      	movs	r3, #1
 8003504:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  
  return HAL_OK;
}
 8003508:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800350a:	2c01      	cmp	r4, #1
 800350c:	d11a      	bne.n	8003544 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003514:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003516:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8003518:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800351a:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 800351c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003520:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8003522:	690c      	ldr	r4, [r1, #16]
 8003524:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003528:	4322      	orrs	r2, r4
 800352a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800352c:	690a      	ldr	r2, [r1, #16]
 800352e:	0292      	lsls	r2, r2, #10
 8003530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003534:	6542      	str	r2, [r0, #84]	; 0x54
 8003536:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003540:	6582      	str	r2, [r0, #88]	; 0x58
 8003542:	e794      	b.n	800346e <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8003544:	6803      	ldr	r3, [r0, #0]
 8003546:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800354a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800354c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003554:	2301      	movs	r3, #1
 8003556:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800355a:	4618      	mov	r0, r3
 800355c:	bd30      	pop	{r4, r5, pc}
	...

08003560 <HAL_SD_InitCard>:
{
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003564:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003566:	2376      	movs	r3, #118	; 0x76
 8003568:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800356a:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800356c:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 800356e:	ab0a      	add	r3, sp, #40	; 0x28
{
 8003570:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8003572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003576:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 800357a:	4e6f      	ldr	r6, [pc, #444]	; (8003738 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800357c:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800357e:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003580:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8003582:	ab07      	add	r3, sp, #28
 8003584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f000 fa90 	bl	8003aac <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 800358c:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 800358e:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	f000 faaf 	bl	8003af4 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003596:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8003598:	2002      	movs	r0, #2
 800359a:	f7fd fc63 	bl	8000e64 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800359e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80035a0:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035a2:	f000 fc1b 	bl	8003ddc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035a6:	4606      	mov	r6, r0
 80035a8:	b968      	cbnz	r0, 80035c6 <HAL_SD_InitCard+0x66>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	f000 fc3e 	bl	8003e2c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b0:	b380      	cbz	r0, 8003614 <HAL_SD_InitCard+0xb4>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80035b2:	64a6      	str	r6, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80035b4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80035b8:	9b06      	ldr	r3, [sp, #24]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	42ab      	cmp	r3, r5
 80035be:	9206      	str	r2, [sp, #24]
 80035c0:	d108      	bne.n	80035d4 <HAL_SD_InitCard+0x74>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80035c2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80035c6:	2001      	movs	r0, #1
 80035c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035ce:	430e      	orrs	r6, r1
 80035d0:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 80035d2:	e081      	b.n	80036d8 <HAL_SD_InitCard+0x178>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80035d4:	2100      	movs	r1, #0
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f000 fc60 	bl	8003e9c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035dc:	4601      	mov	r1, r0
 80035de:	b110      	cbz	r0, 80035e6 <HAL_SD_InitCard+0x86>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035e0:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80035e4:	e7ef      	b.n	80035c6 <HAL_SD_InitCard+0x66>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	f000 fc70 	bl	8003ecc <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035ec:	4601      	mov	r1, r0
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d1f6      	bne.n	80035e0 <HAL_SD_InitCard+0x80>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	f000 fa99 	bl	8003b2a <SDIO_GetResponse>
    while(validvoltage == 0U)
 80035f8:	2800      	cmp	r0, #0
 80035fa:	dadd      	bge.n	80035b8 <HAL_SD_InitCard+0x58>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80035fc:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80035fe:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8003600:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8003602:	2301      	movs	r3, #1
 8003604:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8003608:	f000 fa78 	bl	8003afc <SDIO_GetPowerState>
 800360c:	bb10      	cbnz	r0, 8003654 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800360e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003612:	e06b      	b.n	80036ec <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003614:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003616:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800361a:	9b06      	ldr	r3, [sp, #24]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	42ab      	cmp	r3, r5
 8003620:	9206      	str	r2, [sp, #24]
 8003622:	d0ce      	beq.n	80035c2 <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003624:	2100      	movs	r1, #0
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	f000 fc38 	bl	8003e9c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800362c:	4606      	mov	r6, r0
 800362e:	2800      	cmp	r0, #0
 8003630:	d1c9      	bne.n	80035c6 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003632:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	f000 fc48 	bl	8003ecc <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800363c:	4606      	mov	r6, r0
 800363e:	2800      	cmp	r0, #0
 8003640:	d1c1      	bne.n	80035c6 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003642:	4601      	mov	r1, r0
 8003644:	6820      	ldr	r0, [r4, #0]
 8003646:	f000 fa70 	bl	8003b2a <SDIO_GetResponse>
    while(validvoltage == 0U)
 800364a:	0fc3      	lsrs	r3, r0, #31
 800364c:	d0e5      	beq.n	800361a <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800364e:	0042      	lsls	r2, r0, #1
 8003650:	d5d4      	bpl.n	80035fc <HAL_SD_InitCard+0x9c>
 8003652:	e7d4      	b.n	80035fe <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003654:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003656:	2b03      	cmp	r3, #3
 8003658:	d01a      	beq.n	8003690 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	f000 fc4f 	bl	8003efe <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003660:	4605      	mov	r5, r0
 8003662:	2800      	cmp	r0, #0
 8003664:	d142      	bne.n	80036ec <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003666:	4601      	mov	r1, r0
 8003668:	6820      	ldr	r0, [r4, #0]
 800366a:	f000 fa5e 	bl	8003b2a <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800366e:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003670:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	f000 fa59 	bl	8003b2a <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003678:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800367a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	f000 fa54 	bl	8003b2a <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003682:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003684:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003686:	6820      	ldr	r0, [r4, #0]
 8003688:	f000 fa4f 	bl	8003b2a <SDIO_GetResponse>
 800368c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003692:	2b03      	cmp	r3, #3
 8003694:	d122      	bne.n	80036dc <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003698:	2b03      	cmp	r3, #3
 800369a:	d12e      	bne.n	80036fa <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800369c:	2104      	movs	r1, #4
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	f000 fa43 	bl	8003b2a <SDIO_GetResponse>
 80036a4:	0d00      	lsrs	r0, r0, #20
 80036a6:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80036a8:	a90d      	add	r1, sp, #52	; 0x34
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff fe78 	bl	80033a0 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80036b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	0412      	lsls	r2, r2, #16
 80036b6:	2300      	movs	r3, #0
 80036b8:	f000 fb78 	bl	8003dac <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80036bc:	4605      	mov	r5, r0
 80036be:	b9a8      	cbnz	r0, 80036ec <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 80036c0:	f104 0310 	add.w	r3, r4, #16
 80036c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80036cc:	1d23      	adds	r3, r4, #4
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	f000 f9eb 	bl	8003aac <SDIO_Init>
  return HAL_OK;
 80036d6:	4628      	mov	r0, r5
}
 80036d8:	b019      	add	sp, #100	; 0x64
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80036dc:	f10d 0116 	add.w	r1, sp, #22
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f000 fc37 	bl	8003f54 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036e6:	4605      	mov	r5, r0
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d0d4      	beq.n	8003696 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 80036ec:	2001      	movs	r0, #1
 80036ee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80036f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036f4:	431d      	orrs	r5, r3
 80036f6:	63a5      	str	r5, [r4, #56]	; 0x38
 80036f8:	e7ee      	b.n	80036d8 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 80036fa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80036fe:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	0409      	lsls	r1, r1, #16
 8003704:	f000 fc10 	bl	8003f28 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003708:	4605      	mov	r5, r0
 800370a:	2800      	cmp	r0, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800370e:	4601      	mov	r1, r0
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	f000 fa0a 	bl	8003b2a <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003716:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003718:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	f000 fa05 	bl	8003b2a <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003720:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003722:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	f000 fa00 	bl	8003b2a <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800372a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800372c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	f000 f9fb 	bl	8003b2a <SDIO_GetResponse>
 8003734:	6720      	str	r0, [r4, #112]	; 0x70
 8003736:	e7b1      	b.n	800369c <HAL_SD_InitCard+0x13c>
 8003738:	422580a0 	.word	0x422580a0

0800373c <HAL_SD_Init>:
{
 800373c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800373e:	4604      	mov	r4, r0
 8003740:	b1a0      	cbz	r0, 800376c <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8003742:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800374a:	b913      	cbnz	r3, 8003752 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 800374c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800374e:	f002 fd35 	bl	80061bc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8003752:	2303      	movs	r3, #3
 8003754:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff ff01 	bl	8003560 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800375e:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8003760:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003762:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003764:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003766:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800376a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800376c:	2001      	movs	r0, #1
}
 800376e:	bd10      	pop	{r4, pc}

08003770 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003770:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003772:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003774:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003776:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003778:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800377a:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800377c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800377e:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003780:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003782:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003784:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003786:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003788:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800378a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800378c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800378e:	61cb      	str	r3, [r1, #28]
}
 8003790:	2000      	movs	r0, #0
 8003792:	4770      	bx	lr

08003794 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003794:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003796:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003798:	0409      	lsls	r1, r1, #16
{
 800379a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800379c:	6800      	ldr	r0, [r0, #0]
 800379e:	f000 fc2d 	bl	8003ffc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80037a2:	4601      	mov	r1, r0
 80037a4:	b928      	cbnz	r0, 80037b2 <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	f000 f9bf 	bl	8003b2a <SDIO_GetResponse>
  return cardstate;
 80037ac:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80037b0:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80037b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037b4:	4319      	orrs	r1, r3
 80037b6:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80037b8:	2000      	movs	r0, #0
 80037ba:	e7f7      	b.n	80037ac <HAL_SD_GetCardState+0x18>

080037bc <HAL_TIM_Base_MspInit>:
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037be:	6803      	ldr	r3, [r0, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_OC_DelayElapsedCallback>:
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_IC_CaptureCallback>:
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_TriggerCallback>:
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037dc:	6803      	ldr	r3, [r0, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	0791      	lsls	r1, r2, #30
{
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e6:	d50e      	bpl.n	8003806 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	0792      	lsls	r2, r2, #30
 80037ec:	d50b      	bpl.n	8003806 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ee:	f06f 0202 	mvn.w	r2, #2
 80037f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fa:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fc:	d077      	beq.n	80038ee <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	f7ff ffea 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	2300      	movs	r3, #0
 8003804:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	0750      	lsls	r0, r2, #29
 800380c:	d510      	bpl.n	8003830 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	0751      	lsls	r1, r2, #29
 8003812:	d50d      	bpl.n	8003830 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003814:	f06f 0204 	mvn.w	r2, #4
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003822:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003824:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003826:	d068      	beq.n	80038fa <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003828:	f7ff ffd5 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382c:	2300      	movs	r3, #0
 800382e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	0712      	lsls	r2, r2, #28
 8003836:	d50f      	bpl.n	8003858 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	0710      	lsls	r0, r2, #28
 800383c:	d50c      	bpl.n	8003858 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800383e:	f06f 0208 	mvn.w	r2, #8
 8003842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800384c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384e:	d05a      	beq.n	8003906 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003850:	f7ff ffc1 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003854:	2300      	movs	r3, #0
 8003856:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	06d2      	lsls	r2, r2, #27
 800385e:	d510      	bpl.n	8003882 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	06d0      	lsls	r0, r2, #27
 8003864:	d50d      	bpl.n	8003882 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003866:	f06f 0210 	mvn.w	r2, #16
 800386a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800386e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003870:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003874:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003878:	d04b      	beq.n	8003912 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	f7ff ffac 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	2300      	movs	r3, #0
 8003880:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	07d1      	lsls	r1, r2, #31
 8003888:	d508      	bpl.n	800389c <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	07d2      	lsls	r2, r2, #31
 800388e:	d505      	bpl.n	800389c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003890:	f06f 0201 	mvn.w	r2, #1
 8003894:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003896:	4620      	mov	r0, r4
 8003898:	f002 fb80 	bl	8005f9c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	0610      	lsls	r0, r2, #24
 80038a2:	d508      	bpl.n	80038b6 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	0611      	lsls	r1, r2, #24
 80038a8:	d505      	bpl.n	80038b6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038b0:	4620      	mov	r0, r4
 80038b2:	f000 f8b4 	bl	8003a1e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	0652      	lsls	r2, r2, #25
 80038bc:	d508      	bpl.n	80038d0 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	0650      	lsls	r0, r2, #25
 80038c2:	d505      	bpl.n	80038d0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7ff ff85 	bl	80037da <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	0691      	lsls	r1, r2, #26
 80038d6:	d522      	bpl.n	800391e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	0692      	lsls	r2, r2, #26
 80038dc:	d51f      	bpl.n	800391e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038de:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80038e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e4:	611a      	str	r2, [r3, #16]
    }
  }
}
 80038e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80038ea:	f000 b897 	b.w	8003a1c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	f7ff ff71 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff70 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80038f8:	e783      	b.n	8003802 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	f7ff ff6b 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff ff6a 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003904:	e792      	b.n	800382c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	f7ff ff65 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ff64 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003910:	e7a0      	b.n	8003854 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	f7ff ff5f 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ff5e 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800391c:	e7af      	b.n	800387e <HAL_TIM_IRQHandler+0xa2>
 800391e:	bd10      	pop	{r4, pc}

08003920 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003920:	4a2e      	ldr	r2, [pc, #184]	; (80039dc <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8003922:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003924:	4290      	cmp	r0, r2
 8003926:	d012      	beq.n	800394e <TIM_Base_SetConfig+0x2e>
 8003928:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800392c:	d00f      	beq.n	800394e <TIM_Base_SetConfig+0x2e>
 800392e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003932:	4290      	cmp	r0, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x2e>
 8003936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393a:	4290      	cmp	r0, r2
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x2e>
 800393e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003942:	4290      	cmp	r0, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x2e>
 8003946:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800394a:	4290      	cmp	r0, r2
 800394c:	d11d      	bne.n	800398a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800394e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003954:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003956:	4a21      	ldr	r2, [pc, #132]	; (80039dc <TIM_Base_SetConfig+0xbc>)
 8003958:	4290      	cmp	r0, r2
 800395a:	d104      	bne.n	8003966 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	4313      	orrs	r3, r2
 8003964:	e028      	b.n	80039b8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003966:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800396a:	d0f7      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 800396c:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <TIM_Base_SetConfig+0xc0>)
 800396e:	4290      	cmp	r0, r2
 8003970:	d0f4      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 8003972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003976:	4290      	cmp	r0, r2
 8003978:	d0f0      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 800397a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800397e:	4290      	cmp	r0, r2
 8003980:	d0ec      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 8003982:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003986:	4290      	cmp	r0, r2
 8003988:	d0e8      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 800398a:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <TIM_Base_SetConfig+0xc4>)
 800398c:	4290      	cmp	r0, r2
 800398e:	d0e5      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 8003990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003994:	4290      	cmp	r0, r2
 8003996:	d0e1      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 8003998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800399c:	4290      	cmp	r0, r2
 800399e:	d0dd      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 80039a0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80039a4:	4290      	cmp	r0, r2
 80039a6:	d0d9      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 80039a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ac:	4290      	cmp	r0, r2
 80039ae:	d0d5      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
 80039b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039b4:	4290      	cmp	r0, r2
 80039b6:	d0d1      	beq.n	800395c <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 80039b8:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ba:	688b      	ldr	r3, [r1, #8]
 80039bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80039be:	680b      	ldr	r3, [r1, #0]
 80039c0:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <TIM_Base_SetConfig+0xbc>)
 80039c4:	4298      	cmp	r0, r3
 80039c6:	d006      	beq.n	80039d6 <TIM_Base_SetConfig+0xb6>
 80039c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039cc:	4298      	cmp	r0, r3
 80039ce:	d002      	beq.n	80039d6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d0:	2301      	movs	r3, #1
 80039d2:	6143      	str	r3, [r0, #20]
}
 80039d4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80039d6:	690b      	ldr	r3, [r1, #16]
 80039d8:	6303      	str	r3, [r0, #48]	; 0x30
 80039da:	e7f9      	b.n	80039d0 <TIM_Base_SetConfig+0xb0>
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40014000 	.word	0x40014000

080039e8 <HAL_TIM_Base_Init>:
{ 
 80039e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80039ea:	4604      	mov	r4, r0
 80039ec:	b1a0      	cbz	r0, 8003a18 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80039ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80039f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039f6:	b91b      	cbnz	r3, 8003a00 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80039fc:	f7ff fede 	bl	80037bc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	1d21      	adds	r1, r4, #4
 8003a0a:	f7ff ff89 	bl	8003920 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003a14:	2000      	movs	r0, #0
 8003a16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a18:	2001      	movs	r0, #1
}
 8003a1a:	bd10      	pop	{r4, pc}

08003a1c <HAL_TIMEx_CommutationCallback>:
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	4770      	bx	lr

08003a20 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <SDMMC_GetCmdResp2+0x48>)
 8003a22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a30:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003a32:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003a36:	d314      	bcc.n	8003a62 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003a38:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a3a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003a3e:	d0f8      	beq.n	8003a32 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a42:	075b      	lsls	r3, r3, #29
 8003a44:	d503      	bpl.n	8003a4e <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a46:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a48:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a50:	f013 0301 	ands.w	r3, r3, #1
 8003a54:	d001      	beq.n	8003a5a <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a56:	2301      	movs	r3, #1
 8003a58:	e7f6      	b.n	8003a48 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a5e:	6382      	str	r2, [r0, #56]	; 0x38
 8003a60:	e7f3      	b.n	8003a4a <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003a62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a66:	e7f0      	b.n	8003a4a <SDMMC_GetCmdResp2+0x2a>
 8003a68:	20000004 	.word	0x20000004

08003a6c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <SDMMC_GetCmdResp3+0x3c>)
 8003a6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a78:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a7c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003a7e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003a82:	d30e      	bcc.n	8003aa2 <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003a84:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a86:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003a8a:	d0f8      	beq.n	8003a7e <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a8e:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a92:	bf15      	itete	ne
 8003a94:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a96:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a9a:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a9c:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003aa2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000004 	.word	0x20000004

08003aac <SDIO_Init>:
{
 8003aac:	b084      	sub	sp, #16
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	ac03      	add	r4, sp, #12
 8003ab2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003ab6:	9904      	ldr	r1, [sp, #16]
 8003ab8:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003aba:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003abc:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003abe:	9905      	ldr	r1, [sp, #20]
 8003ac0:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003ac2:	9906      	ldr	r1, [sp, #24]
 8003ac4:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003ac6:	9907      	ldr	r1, [sp, #28]
 8003ac8:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003aca:	9908      	ldr	r1, [sp, #32]
}
 8003acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ad0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8003ad4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ad6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003ada:	4313      	orrs	r3, r2
 8003adc:	6043      	str	r3, [r0, #4]
}
 8003ade:	b004      	add	sp, #16
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	4770      	bx	lr

08003ae4 <SDIO_ReadFIFO>:
 8003ae4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8003ae8:	4770      	bx	lr

08003aea <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8003aea:	680b      	ldr	r3, [r1, #0]
 8003aec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8003af0:	2000      	movs	r0, #0
 8003af2:	4770      	bx	lr

08003af4 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003af4:	2303      	movs	r3, #3
 8003af6:	6003      	str	r3, [r0, #0]
}
 8003af8:	2000      	movs	r0, #0
 8003afa:	4770      	bx	lr

08003afc <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003afc:	6800      	ldr	r0, [r0, #0]
}
 8003afe:	f000 0003 	and.w	r0, r0, #3
 8003b02:	4770      	bx	lr

08003b04 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003b04:	680b      	ldr	r3, [r1, #0]
{
 8003b06:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8003b08:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b0a:	688c      	ldr	r4, [r1, #8]
 8003b0c:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b0e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b10:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003b12:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003b14:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8003b16:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b18:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8003b1c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b1e:	f022 020f 	bic.w	r2, r2, #15
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60c3      	str	r3, [r0, #12]
}
 8003b26:	2000      	movs	r0, #0
 8003b28:	bd10      	pop	{r4, pc}

08003b2a <SDIO_GetResponse>:
{
 8003b2a:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003b2c:	3014      	adds	r0, #20
 8003b2e:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003b34:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
}  
 8003b3a:	b002      	add	sp, #8
 8003b3c:	4770      	bx	lr
	...

08003b40 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <SDMMC_GetCmdResp1+0x118>)
{
 8003b42:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8003b4a:	fbb3 f3f4 	udiv	r3, r3, r4
 8003b4e:	435a      	muls	r2, r3
    if (count-- == 0U)
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	d04a      	beq.n	8003bea <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003b54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b56:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003b5a:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b5e:	d0f7      	beq.n	8003b50 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b62:	075c      	lsls	r4, r3, #29
 8003b64:	d503      	bpl.n	8003b6e <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b66:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b68:	6383      	str	r3, [r0, #56]	; 0x38
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b70:	f013 0301 	ands.w	r3, r3, #1
 8003b74:	d001      	beq.n	8003b7a <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b76:	2301      	movs	r3, #1
 8003b78:	e7f6      	b.n	8003b68 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8003b7a:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	d136      	bne.n	8003bf0 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003b82:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003b86:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003b88:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003b8a:	f7ff ffce 	bl	8003b2a <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <SDMMC_GetCmdResp1+0x11c>)
 8003b90:	4003      	ands	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0e9      	beq.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003b96:	2800      	cmp	r0, #0
 8003b98:	db2c      	blt.n	8003bf4 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003b9a:	0042      	lsls	r2, r0, #1
 8003b9c:	d42d      	bmi.n	8003bfa <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003b9e:	0084      	lsls	r4, r0, #2
 8003ba0:	d42d      	bmi.n	8003bfe <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003ba2:	00c1      	lsls	r1, r0, #3
 8003ba4:	d42d      	bmi.n	8003c02 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003ba6:	0102      	lsls	r2, r0, #4
 8003ba8:	d42e      	bmi.n	8003c08 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003baa:	0144      	lsls	r4, r0, #5
 8003bac:	d42f      	bmi.n	8003c0e <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003bae:	01c1      	lsls	r1, r0, #7
 8003bb0:	d430      	bmi.n	8003c14 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003bb2:	0202      	lsls	r2, r0, #8
 8003bb4:	d431      	bmi.n	8003c1a <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003bb6:	0244      	lsls	r4, r0, #9
 8003bb8:	d432      	bmi.n	8003c20 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003bba:	0281      	lsls	r1, r0, #10
 8003bbc:	d433      	bmi.n	8003c26 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003bbe:	02c2      	lsls	r2, r0, #11
 8003bc0:	d434      	bmi.n	8003c2c <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003bc2:	0344      	lsls	r4, r0, #13
 8003bc4:	d435      	bmi.n	8003c32 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003bc6:	0381      	lsls	r1, r0, #14
 8003bc8:	d436      	bmi.n	8003c38 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003bca:	03c2      	lsls	r2, r0, #15
 8003bcc:	d437      	bmi.n	8003c3e <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003bce:	0404      	lsls	r4, r0, #16
 8003bd0:	d438      	bmi.n	8003c44 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003bd2:	0441      	lsls	r1, r0, #17
 8003bd4:	d439      	bmi.n	8003c4a <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003bd6:	0482      	lsls	r2, r0, #18
 8003bd8:	d43a      	bmi.n	8003c50 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003bda:	f010 0f08 	tst.w	r0, #8
 8003bde:	bf14      	ite	ne
 8003be0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003be4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003be8:	e7bf      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bee:	e7bc      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e7ba      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf8:	e7b7      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003bfa:	2340      	movs	r3, #64	; 0x40
 8003bfc:	e7b5      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	e7b3      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c06:	e7b0      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c0c:	e7ad      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c12:	e7aa      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c18:	e7a7      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1e:	e7a4      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c24:	e7a1      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c2a:	e79e      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8003c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c30:	e79b      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c36:	e798      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003c38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c3c:	e795      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003c3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c42:	e792      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c48:	e78f      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003c4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c4e:	e78c      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8003c50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c54:	e789      	b.n	8003b6a <SDMMC_GetCmdResp1+0x2a>
 8003c56:	bf00      	nop
 8003c58:	20000004 	.word	0x20000004
 8003c5c:	fdffe008 	.word	0xfdffe008

08003c60 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c60:	680b      	ldr	r3, [r1, #0]
{
 8003c62:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c64:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8003c66:	684b      	ldr	r3, [r1, #4]
 8003c68:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c6a:	68cc      	ldr	r4, [r1, #12]
 8003c6c:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c6e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c70:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003c72:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8003c74:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003c76:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003c78:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c7a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8003c82:	2000      	movs	r0, #0
 8003c84:	bd10      	pop	{r4, pc}

08003c86 <SDMMC_CmdBlockLength>:
{
 8003c86:	b530      	push	{r4, r5, lr}
 8003c88:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c8a:	2340      	movs	r3, #64	; 0x40
 8003c8c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c8e:	2300      	movs	r3, #0
{
 8003c90:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003c92:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003c94:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c96:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c98:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c9e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003ca0:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ca2:	f7ff ff2f 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4621      	mov	r1, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	f7ff ff47 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003cb2:	b007      	add	sp, #28
 8003cb4:	bd30      	pop	{r4, r5, pc}

08003cb6 <SDMMC_CmdReadSingleBlock>:
{
 8003cb6:	b530      	push	{r4, r5, lr}
 8003cb8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cbe:	2300      	movs	r3, #0
{
 8003cc0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003cc2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cc4:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cc6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cc8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cd0:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cd2:	f7ff ff17 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4621      	mov	r1, r4
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7ff ff2f 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003ce2:	b007      	add	sp, #28
 8003ce4:	bd30      	pop	{r4, r5, pc}

08003ce6 <SDMMC_CmdReadMultiBlock>:
{
 8003ce6:	b530      	push	{r4, r5, lr}
 8003ce8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cea:	2340      	movs	r3, #64	; 0x40
 8003cec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cee:	2300      	movs	r3, #0
{
 8003cf0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003cf2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003cf4:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cf6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cf8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003d00:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d02:	f7ff feff 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f7ff ff17 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003d12:	b007      	add	sp, #28
 8003d14:	bd30      	pop	{r4, r5, pc}

08003d16 <SDMMC_CmdWriteSingleBlock>:
{
 8003d16:	b530      	push	{r4, r5, lr}
 8003d18:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d1e:	2300      	movs	r3, #0
{
 8003d20:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d22:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d24:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d26:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d28:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d30:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d32:	f7ff fee7 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f7ff feff 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003d42:	b007      	add	sp, #28
 8003d44:	bd30      	pop	{r4, r5, pc}

08003d46 <SDMMC_CmdWriteMultiBlock>:
{
 8003d46:	b530      	push	{r4, r5, lr}
 8003d48:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d4e:	2300      	movs	r3, #0
{
 8003d50:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d52:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003d54:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d56:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d58:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003d60:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d62:	f7ff fecf 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f7ff fee7 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003d72:	b007      	add	sp, #28
 8003d74:	bd30      	pop	{r4, r5, pc}
	...

08003d78 <SDMMC_CmdStopTransfer>:
{
 8003d78:	b530      	push	{r4, r5, lr}
 8003d7a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003d7c:	2300      	movs	r3, #0
{
 8003d7e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003d80:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003d82:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d84:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d86:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d88:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d8e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d90:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003d92:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d94:	f7ff feb6 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003d98:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <SDMMC_CmdStopTransfer+0x30>)
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f7ff fecf 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003da2:	b007      	add	sp, #28
 8003da4:	bd30      	pop	{r4, r5, pc}
 8003da6:	bf00      	nop
 8003da8:	05f5e100 	.word	0x05f5e100

08003dac <SDMMC_CmdSelDesel>:
{
 8003dac:	b530      	push	{r4, r5, lr}
 8003dae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003db0:	2340      	movs	r3, #64	; 0x40
 8003db2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003db4:	2300      	movs	r3, #0
{
 8003db6:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003db8:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dba:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dbc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003dc2:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dc4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003dc6:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dc8:	f7ff fe9c 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f7ff feb4 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003dd8:	b007      	add	sp, #28
 8003dda:	bd30      	pop	{r4, r5, pc}

08003ddc <SDMMC_CmdGoIdleState>:
{
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003de4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003de6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003de8:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df0:	9305      	str	r3, [sp, #20]
{
 8003df2:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003df4:	f7ff fe86 	bl	8003b04 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <SDMMC_CmdGoIdleState+0x4c>)
 8003dfa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e04:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e08:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003e0a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e0e:	d308      	bcc.n	8003e22 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003e10:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e12:	0612      	lsls	r2, r2, #24
 8003e14:	d5f9      	bpl.n	8003e0a <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003e16:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003e1a:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8003e1c:	2000      	movs	r0, #0
}
 8003e1e:	b006      	add	sp, #24
 8003e20:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003e22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8003e26:	e7fa      	b.n	8003e1e <SDMMC_CmdGoIdleState+0x42>
 8003e28:	20000004 	.word	0x20000004

08003e2c <SDMMC_CmdOperCond>:
{
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003e30:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003e34:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003e36:	2308      	movs	r3, #8
 8003e38:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e42:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e48:	9305      	str	r3, [sp, #20]
{
 8003e4a:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e4c:	f7ff fe5a 	bl	8003b04 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <SDMMC_CmdOperCond+0x6c>)
 8003e52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e60:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003e62:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e66:	d314      	bcc.n	8003e92 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003e68:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e6a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003e6e:	d0f8      	beq.n	8003e62 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e70:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e72:	f012 0204 	ands.w	r2, r2, #4
 8003e76:	d004      	beq.n	8003e82 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003e78:	2340      	movs	r3, #64	; 0x40
 8003e7a:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e7c:	2004      	movs	r0, #4
}
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003e82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e84:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003e88:	d0f9      	beq.n	8003e7e <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e8e:	4610      	mov	r0, r2
 8003e90:	e7f5      	b.n	8003e7e <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8003e92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003e96:	e7f2      	b.n	8003e7e <SDMMC_CmdOperCond+0x52>
 8003e98:	20000004 	.word	0x20000004

08003e9c <SDMMC_CmdAppCommand>:
{
 8003e9c:	b530      	push	{r4, r5, lr}
 8003e9e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ea4:	2300      	movs	r3, #0
{
 8003ea6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003ea8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003eaa:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eac:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003eb6:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eb8:	f7ff fe24 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f7ff fe3c 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8003ec8:	b007      	add	sp, #28
 8003eca:	bd30      	pop	{r4, r5, pc}

08003ecc <SDMMC_CmdAppOperCommand>:
{
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003ed0:	2329      	movs	r3, #41	; 0x29
 8003ed2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003ed4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ed8:	2340      	movs	r3, #64	; 0x40
 8003eda:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ee0:	2300      	movs	r3, #0
{
 8003ee2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003ee4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ee6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ee8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eee:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ef0:	f7ff fe08 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff fdb9 	bl	8003a6c <SDMMC_GetCmdResp3>
}
 8003efa:	b006      	add	sp, #24
 8003efc:	bd10      	pop	{r4, pc}

08003efe <SDMMC_CmdSendCID>:
{
 8003efe:	b510      	push	{r4, lr}
 8003f00:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003f02:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f04:	2202      	movs	r2, #2
{
 8003f06:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003f08:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f0a:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f0c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f0e:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f14:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f16:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f18:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f1a:	f7ff fdf3 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff fd7e 	bl	8003a20 <SDMMC_GetCmdResp2>
}
 8003f24:	b006      	add	sp, #24
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <SDMMC_CmdSendCSD>:
{
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003f2c:	2309      	movs	r3, #9
 8003f2e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f30:	23c0      	movs	r3, #192	; 0xc0
 8003f32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f34:	2300      	movs	r3, #0
{
 8003f36:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003f38:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f3a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f3c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f42:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f44:	f7ff fdde 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7ff fd69 	bl	8003a20 <SDMMC_GetCmdResp2>
}
 8003f4e:	b006      	add	sp, #24
 8003f50:	bd10      	pop	{r4, pc}
	...

08003f54 <SDMMC_CmdSetRelAdd>:
{
 8003f54:	b530      	push	{r4, r5, lr}
 8003f56:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003f58:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003f5a:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8003f5c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003f5e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f60:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f62:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8003f68:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f6a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f6c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f6e:	9305      	str	r3, [sp, #20]
{
 8003f70:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f72:	f7ff fdc7 	bl	8003b04 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <SDMMC_CmdSetRelAdd+0xa4>)
 8003f78:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f86:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003f88:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003f8c:	d32b      	bcc.n	8003fe6 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003f8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f90:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003f94:	d0f8      	beq.n	8003f88 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f98:	075a      	lsls	r2, r3, #29
 8003f9a:	d503      	bpl.n	8003fa4 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f9c:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f9e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003fa0:	b007      	add	sp, #28
 8003fa2:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fa6:	f011 0101 	ands.w	r1, r1, #1
 8003faa:	d001      	beq.n	8003fb0 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7f6      	b.n	8003f9e <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 8003fb0:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d119      	bne.n	8003fec <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003fb8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003fbc:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7ff fdb3 	bl	8003b2a <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003fc4:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8003fc8:	d103      	bne.n	8003fd2 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003fca:	0c00      	lsrs	r0, r0, #16
 8003fcc:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8003fce:	4618      	mov	r0, r3
 8003fd0:	e7e6      	b.n	8003fa0 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003fd2:	0443      	lsls	r3, r0, #17
 8003fd4:	d40c      	bmi.n	8003ff0 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003fd6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003fda:	bf14      	ite	ne
 8003fdc:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003fe0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003fe4:	e7dc      	b.n	8003fa0 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8003fe6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003fea:	e7d9      	b.n	8003fa0 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fec:	2001      	movs	r0, #1
 8003fee:	e7d7      	b.n	8003fa0 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ff0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ff4:	e7d4      	b.n	8003fa0 <SDMMC_CmdSetRelAdd+0x4c>
 8003ff6:	bf00      	nop
 8003ff8:	20000004 	.word	0x20000004

08003ffc <SDMMC_CmdSendStatus>:
{
 8003ffc:	b530      	push	{r4, r5, lr}
 8003ffe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004000:	2340      	movs	r3, #64	; 0x40
 8004002:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004004:	2300      	movs	r3, #0
{
 8004006:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004008:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800400a:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800400c:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800400e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004014:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004016:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004018:	f7ff fd74 	bl	8003b04 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4621      	mov	r1, r4
 8004022:	4628      	mov	r0, r5
 8004024:	f7ff fd8c 	bl	8003b40 <SDMMC_GetCmdResp1>
}
 8004028:	b007      	add	sp, #28
 800402a:	bd30      	pop	{r4, r5, pc}

0800402c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <disk_status+0x10>)
 800402e:	181a      	adds	r2, r3, r0
 8004030:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004034:	7a10      	ldrb	r0, [r2, #8]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4718      	bx	r3
 800403c:	2000004c 	.word	0x2000004c

08004040 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <disk_initialize+0x1c>)
 8004042:	5c1a      	ldrb	r2, [r3, r0]
 8004044:	b942      	cbnz	r2, 8004058 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8004046:	2201      	movs	r2, #1
 8004048:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800404a:	181a      	adds	r2, r3, r0
 800404c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004050:	7a10      	ldrb	r0, [r2, #8]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4718      	bx	r3
  }
  return stat;
}
 8004058:	2000      	movs	r0, #0
 800405a:	4770      	bx	lr
 800405c:	2000004c 	.word	0x2000004c

08004060 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004060:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004062:	4c05      	ldr	r4, [pc, #20]	; (8004078 <disk_read+0x18>)
 8004064:	1825      	adds	r5, r4, r0
 8004066:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800406a:	6860      	ldr	r0, [r4, #4]
 800406c:	6884      	ldr	r4, [r0, #8]
 800406e:	7a28      	ldrb	r0, [r5, #8]
 8004070:	46a4      	mov	ip, r4
  return res;
}
 8004072:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004074:	4760      	bx	ip
 8004076:	bf00      	nop
 8004078:	2000004c 	.word	0x2000004c

0800407c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800407c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800407e:	4c05      	ldr	r4, [pc, #20]	; (8004094 <disk_write+0x18>)
 8004080:	1825      	adds	r5, r4, r0
 8004082:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004086:	6860      	ldr	r0, [r4, #4]
 8004088:	68c4      	ldr	r4, [r0, #12]
 800408a:	7a28      	ldrb	r0, [r5, #8]
 800408c:	46a4      	mov	ip, r4
  return res;
}
 800408e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004090:	4760      	bx	ip
 8004092:	bf00      	nop
 8004094:	2000004c 	.word	0x2000004c

08004098 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <disk_ioctl+0x18>)
{
 800409a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800409c:	181c      	adds	r4, r3, r0
 800409e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80040a2:	7a20      	ldrb	r0, [r4, #8]
 80040a4:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80040a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4718      	bx	r3
 80040ae:	bf00      	nop
 80040b0:	2000004c 	.word	0x2000004c

080040b4 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80040b4:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80040b6:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80040b8:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80040ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80040be:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80040c2:	4770      	bx	lr

080040c4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80040c4:	0a0b      	lsrs	r3, r1, #8
 80040c6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040c8:	7043      	strb	r3, [r0, #1]
 80040ca:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80040cc:	0e09      	lsrs	r1, r1, #24
 80040ce:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80040d0:	70c1      	strb	r1, [r0, #3]
 80040d2:	4770      	bx	lr

080040d4 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80040d4:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80040d6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80040da:	4290      	cmp	r0, r2
 80040dc:	d1fb      	bne.n	80040d6 <mem_set+0x2>
}
 80040de:	4770      	bx	lr

080040e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80040e0:	4b15      	ldr	r3, [pc, #84]	; (8004138 <chk_lock+0x58>)
 80040e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80040e4:	2500      	movs	r5, #0
 80040e6:	462a      	mov	r2, r5
 80040e8:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80040ea:	681e      	ldr	r6, [r3, #0]
 80040ec:	b1a6      	cbz	r6, 8004118 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80040ee:	6807      	ldr	r7, [r0, #0]
 80040f0:	42be      	cmp	r6, r7
 80040f2:	d112      	bne.n	800411a <chk_lock+0x3a>
 80040f4:	685f      	ldr	r7, [r3, #4]
 80040f6:	6886      	ldr	r6, [r0, #8]
 80040f8:	42b7      	cmp	r7, r6
 80040fa:	d10e      	bne.n	800411a <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80040fc:	689f      	ldr	r7, [r3, #8]
 80040fe:	6946      	ldr	r6, [r0, #20]
 8004100:	42b7      	cmp	r7, r6
 8004102:	d10a      	bne.n	800411a <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004104:	b9b1      	cbnz	r1, 8004134 <chk_lock+0x54>
 8004106:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800410a:	8993      	ldrh	r3, [r2, #12]
 800410c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004110:	bf14      	ite	ne
 8004112:	2000      	movne	r0, #0
 8004114:	2010      	moveq	r0, #16
 8004116:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8004118:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800411a:	3201      	adds	r2, #1
 800411c:	2a02      	cmp	r2, #2
 800411e:	f103 0310 	add.w	r3, r3, #16
 8004122:	d1e2      	bne.n	80040ea <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004124:	b10d      	cbz	r5, 800412a <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004126:	2000      	movs	r0, #0
 8004128:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800412a:	2902      	cmp	r1, #2
 800412c:	bf0c      	ite	eq
 800412e:	2000      	moveq	r0, #0
 8004130:	2012      	movne	r0, #18
 8004132:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004134:	2010      	movs	r0, #16
 8004136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004138:	20000028 	.word	0x20000028

0800413c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <inc_lock+0x74>)
 800413e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004140:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004142:	2300      	movs	r3, #0
 8004144:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8004146:	6814      	ldr	r4, [r2, #0]
 8004148:	42ac      	cmp	r4, r5
 800414a:	d107      	bne.n	800415c <inc_lock+0x20>
 800414c:	6857      	ldr	r7, [r2, #4]
 800414e:	6884      	ldr	r4, [r0, #8]
 8004150:	42a7      	cmp	r7, r4
 8004152:	d103      	bne.n	800415c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8004154:	6897      	ldr	r7, [r2, #8]
 8004156:	6944      	ldr	r4, [r0, #20]
 8004158:	42a7      	cmp	r7, r4
 800415a:	d01d      	beq.n	8004198 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800415c:	3301      	adds	r3, #1
 800415e:	2b02      	cmp	r3, #2
 8004160:	f102 0210 	add.w	r2, r2, #16
 8004164:	d1ef      	bne.n	8004146 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004166:	6833      	ldr	r3, [r6, #0]
 8004168:	b113      	cbz	r3, 8004170 <inc_lock+0x34>
 800416a:	6933      	ldr	r3, [r6, #16]
 800416c:	b9eb      	cbnz	r3, 80041aa <inc_lock+0x6e>
 800416e:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8004170:	011c      	lsls	r4, r3, #4
 8004172:	1932      	adds	r2, r6, r4
 8004174:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8004176:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8004178:	6940      	ldr	r0, [r0, #20]
 800417a:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800417c:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 800417e:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8004180:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004182:	b979      	cbnz	r1, 80041a4 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004184:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8004188:	8992      	ldrh	r2, [r2, #12]
 800418a:	3201      	adds	r2, #1
 800418c:	b292      	uxth	r2, r2
 800418e:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8004192:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004194:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004198:	2900      	cmp	r1, #0
 800419a:	d0f3      	beq.n	8004184 <inc_lock+0x48>
 800419c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80041a0:	8992      	ldrh	r2, [r2, #12]
 80041a2:	b912      	cbnz	r2, 80041aa <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80041a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a8:	e7f1      	b.n	800418e <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80041aa:	2000      	movs	r0, #0
 80041ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000028 	.word	0x20000028

080041b4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80041b4:	3801      	subs	r0, #1
 80041b6:	2801      	cmp	r0, #1
 80041b8:	d80e      	bhi.n	80041d8 <dec_lock+0x24>
		n = Files[i].ctr;
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <dec_lock+0x2c>)
 80041bc:	0103      	lsls	r3, r0, #4
 80041be:	18d1      	adds	r1, r2, r3
 80041c0:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80041c2:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80041c6:	b280      	uxth	r0, r0
 80041c8:	b108      	cbz	r0, 80041ce <dec_lock+0x1a>
 80041ca:	1e48      	subs	r0, r1, #1
 80041cc:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80041ce:	18d1      	adds	r1, r2, r3
 80041d0:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80041d2:	b918      	cbnz	r0, 80041dc <dec_lock+0x28>
 80041d4:	50d0      	str	r0, [r2, r3]
 80041d6:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80041d8:	2002      	movs	r0, #2
 80041da:	4770      	bx	lr
		res = FR_OK;
 80041dc:	2000      	movs	r0, #0
	}
	return res;
}
 80041de:	4770      	bx	lr
 80041e0:	20000028 	.word	0x20000028

080041e4 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041e4:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80041e6:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041e8:	3b02      	subs	r3, #2
 80041ea:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80041ec:	bf3d      	ittte	cc
 80041ee:	8943      	ldrhcc	r3, [r0, #10]
 80041f0:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 80041f2:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041f6:	2000      	movcs	r0, #0
}
 80041f8:	4770      	bx	lr

080041fa <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80041fc:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041fe:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004200:	0a49      	lsrs	r1, r1, #9
 8004202:	8952      	ldrh	r2, [r2, #10]
 8004204:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004208:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800420a:	b130      	cbz	r0, 800421a <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800420c:	4281      	cmp	r1, r0
 800420e:	d302      	bcc.n	8004216 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004210:	1a09      	subs	r1, r1, r0
 8004212:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004214:	e7f8      	b.n	8004208 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8004216:	6858      	ldr	r0, [r3, #4]
 8004218:	4408      	add	r0, r1
}
 800421a:	4770      	bx	lr

0800421c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800421c:	6802      	ldr	r2, [r0, #0]
{
 800421e:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004220:	b152      	cbz	r2, 8004238 <get_ldnumber+0x1c>
 8004222:	4611      	mov	r1, r2
 8004224:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800422a:	2c20      	cmp	r4, #32
 800422c:	d90c      	bls.n	8004248 <get_ldnumber+0x2c>
 800422e:	2c3a      	cmp	r4, #58	; 0x3a
 8004230:	d1f8      	bne.n	8004224 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8004232:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004234:	428b      	cmp	r3, r1
 8004236:	d002      	beq.n	800423e <get_ldnumber+0x22>
	int vol = -1;
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 800423c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	2a30      	cmp	r2, #48	; 0x30
 8004242:	d1f9      	bne.n	8004238 <get_ldnumber+0x1c>
					*path = ++tt;
 8004244:	3301      	adds	r3, #1
 8004246:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8004248:	2000      	movs	r0, #0
 800424a:	bd10      	pop	{r4, pc}

0800424c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8004250:	4604      	mov	r4, r0
 8004252:	b918      	cbnz	r0, 800425c <validate+0x10>
		*fs = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8004258:	2009      	movs	r0, #9
 800425a:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800425c:	6803      	ldr	r3, [r0, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f8      	beq.n	8004254 <validate+0x8>
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	2a00      	cmp	r2, #0
 8004266:	d0f5      	beq.n	8004254 <validate+0x8>
 8004268:	88d9      	ldrh	r1, [r3, #6]
 800426a:	8882      	ldrh	r2, [r0, #4]
 800426c:	4291      	cmp	r1, r2
 800426e:	d1f1      	bne.n	8004254 <validate+0x8>
 8004270:	7858      	ldrb	r0, [r3, #1]
 8004272:	f7ff fedb 	bl	800402c <disk_status>
 8004276:	f010 0001 	ands.w	r0, r0, #1
 800427a:	d1eb      	bne.n	8004254 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8004280:	bd38      	pop	{r3, r4, r5, pc}

08004282 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004282:	3801      	subs	r0, #1
 8004284:	440a      	add	r2, r1
			*d++ = *s++;
 8004286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800428a:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800428e:	4291      	cmp	r1, r2
 8004290:	d1f9      	bne.n	8004286 <mem_cpy.part.0+0x4>
}
 8004292:	4770      	bx	lr

08004294 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8004294:	7eca      	ldrb	r2, [r1, #27]
 8004296:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8004298:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800429a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800429e:	bf01      	itttt	eq
 80042a0:	7d48      	ldrbeq	r0, [r1, #21]
 80042a2:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80042a4:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80042a8:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	4770      	bx	lr

080042b0 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 80042b0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80042b4:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80042b6:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80042b8:	7803      	ldrb	r3, [r0, #0]
 80042ba:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80042bc:	bf01      	itttt	eq
 80042be:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80042c0:	750a      	strbeq	r2, [r1, #20]
 80042c2:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80042c4:	754a      	strbeq	r2, [r1, #21]
 80042c6:	4770      	bx	lr

080042c8 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 80042ca:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80042cc:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80042d0:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80042d2:	2301      	movs	r3, #1
 80042d4:	462a      	mov	r2, r5
 80042d6:	4639      	mov	r1, r7
 80042d8:	7840      	ldrb	r0, [r0, #1]
 80042da:	f7ff fecf 	bl	800407c <disk_write>
 80042de:	b9a0      	cbnz	r0, 800430a <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80042e0:	6a23      	ldr	r3, [r4, #32]
 80042e2:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80042e4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80042e6:	1aeb      	subs	r3, r5, r3
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d301      	bcc.n	80042f0 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 80042ec:	2000      	movs	r0, #0
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042f0:	78a6      	ldrb	r6, [r4, #2]
 80042f2:	2e01      	cmp	r6, #1
 80042f4:	d9fa      	bls.n	80042ec <sync_window.part.4+0x24>
					wsect += fs->fsize;
 80042f6:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80042f8:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80042fa:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80042fc:	462a      	mov	r2, r5
 80042fe:	2301      	movs	r3, #1
 8004300:	4639      	mov	r1, r7
 8004302:	f7ff febb 	bl	800407c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004306:	3e01      	subs	r6, #1
 8004308:	e7f3      	b.n	80042f2 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 800430a:	2001      	movs	r0, #1
}
 800430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800430e <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800430e:	78c3      	ldrb	r3, [r0, #3]
 8004310:	b10b      	cbz	r3, 8004316 <sync_window+0x8>
 8004312:	f7ff bfd9 	b.w	80042c8 <sync_window.part.4>
}
 8004316:	4618      	mov	r0, r3
 8004318:	4770      	bx	lr

0800431a <sync_fs>:
{
 800431a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431c:	4604      	mov	r4, r0
	res = sync_window(fs);
 800431e:	f7ff fff6 	bl	800430e <sync_window>
 8004322:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004324:	2800      	cmp	r0, #0
 8004326:	d142      	bne.n	80043ae <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004328:	7823      	ldrb	r3, [r4, #0]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d137      	bne.n	800439e <sync_fs+0x84>
 800432e:	7927      	ldrb	r7, [r4, #4]
 8004330:	2f01      	cmp	r7, #1
 8004332:	d134      	bne.n	800439e <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004334:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004338:	4601      	mov	r1, r0
 800433a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff fec8 	bl	80040d4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004344:	2355      	movs	r3, #85	; 0x55
 8004346:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 800434a:	23aa      	movs	r3, #170	; 0xaa
 800434c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8004350:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8004352:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004354:	2172      	movs	r1, #114	; 0x72
 8004356:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800435a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 800435e:	2361      	movs	r3, #97	; 0x61
 8004360:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8004364:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8004368:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 800436c:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 8004370:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8004374:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004378:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800437c:	6921      	ldr	r1, [r4, #16]
 800437e:	f7ff fea1 	bl	80040c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004382:	68e1      	ldr	r1, [r4, #12]
 8004384:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004388:	f7ff fe9c 	bl	80040c4 <st_dword>
			fs->winsect = fs->volbase + 1;
 800438c:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800438e:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004390:	3201      	adds	r2, #1
 8004392:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004394:	463b      	mov	r3, r7
 8004396:	4631      	mov	r1, r6
 8004398:	f7ff fe70 	bl	800407c <disk_write>
			fs->fsi_flag = 0;
 800439c:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800439e:	2200      	movs	r2, #0
 80043a0:	4611      	mov	r1, r2
 80043a2:	7860      	ldrb	r0, [r4, #1]
 80043a4:	f7ff fe78 	bl	8004098 <disk_ioctl>
 80043a8:	3000      	adds	r0, #0
 80043aa:	bf18      	it	ne
 80043ac:	2001      	movne	r0, #1
}
 80043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080043b0 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80043b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80043b2:	428b      	cmp	r3, r1
{
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4606      	mov	r6, r0
 80043b8:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80043ba:	d012      	beq.n	80043e2 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80043bc:	f7ff ffa7 	bl	800430e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80043c0:	4604      	mov	r4, r0
 80043c2:	b960      	cbnz	r0, 80043de <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80043c4:	462a      	mov	r2, r5
 80043c6:	2301      	movs	r3, #1
 80043c8:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80043cc:	7870      	ldrb	r0, [r6, #1]
 80043ce:	f7ff fe47 	bl	8004060 <disk_read>
 80043d2:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80043d4:	bf1c      	itt	ne
 80043d6:	f04f 35ff 	movne.w	r5, #4294967295
 80043da:	2401      	movne	r4, #1
			fs->winsect = sector;
 80043dc:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 80043de:	4620      	mov	r0, r4
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80043e2:	2400      	movs	r4, #0
 80043e4:	e7fb      	b.n	80043de <move_window+0x2e>
	...

080043e8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80043e8:	2300      	movs	r3, #0
{
 80043ea:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80043ec:	70c3      	strb	r3, [r0, #3]
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80043f4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80043f6:	f7ff ffdb 	bl	80043b0 <move_window>
 80043fa:	bb30      	cbnz	r0, 800444a <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80043fc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8004400:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8004404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004408:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800440c:	4293      	cmp	r3, r2
 800440e:	d11e      	bne.n	800444e <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004410:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004414:	2be9      	cmp	r3, #233	; 0xe9
 8004416:	d005      	beq.n	8004424 <check_fs+0x3c>
 8004418:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800441a:	4a10      	ldr	r2, [pc, #64]	; (800445c <check_fs+0x74>)
 800441c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004420:	4293      	cmp	r3, r2
 8004422:	d116      	bne.n	8004452 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004424:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8004428:	f7ff fe44 	bl	80040b4 <ld_dword>
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <check_fs+0x78>)
 800442e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004432:	4298      	cmp	r0, r3
 8004434:	d00f      	beq.n	8004456 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004436:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800443a:	f7ff fe3b 	bl	80040b4 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <check_fs+0x7c>)
 8004440:	4298      	cmp	r0, r3
 8004442:	bf14      	ite	ne
 8004444:	2002      	movne	r0, #2
 8004446:	2000      	moveq	r0, #0
 8004448:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800444a:	2004      	movs	r0, #4
 800444c:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800444e:	2003      	movs	r0, #3
 8004450:	bd10      	pop	{r4, pc}
	return 2;
 8004452:	2002      	movs	r0, #2
 8004454:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004456:	2000      	movs	r0, #0
}
 8004458:	bd10      	pop	{r4, pc}
 800445a:	bf00      	nop
 800445c:	009000eb 	.word	0x009000eb
 8004460:	00544146 	.word	0x00544146
 8004464:	33544146 	.word	0x33544146

08004468 <find_volume>:
{
 8004468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800446c:	2300      	movs	r3, #0
{
 800446e:	b085      	sub	sp, #20
	*rfs = 0;
 8004470:	600b      	str	r3, [r1, #0]
{
 8004472:	460f      	mov	r7, r1
 8004474:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8004476:	f7ff fed1 	bl	800421c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800447a:	1e06      	subs	r6, r0, #0
 800447c:	f2c0 8140 	blt.w	8004700 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004480:	4ba3      	ldr	r3, [pc, #652]	; (8004710 <find_volume+0x2a8>)
 8004482:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004486:	2c00      	cmp	r4, #0
 8004488:	f000 813c 	beq.w	8004704 <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 800448c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800448e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004490:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004494:	b173      	cbz	r3, 80044b4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8004496:	7860      	ldrb	r0, [r4, #1]
 8004498:	f7ff fdc8 	bl	800402c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800449c:	07c1      	lsls	r1, r0, #31
 800449e:	d409      	bmi.n	80044b4 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	f000 8131 	beq.w	8004708 <find_volume+0x2a0>
 80044a6:	f010 0004 	ands.w	r0, r0, #4
 80044aa:	d000      	beq.n	80044ae <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80044ac:	200a      	movs	r0, #10
}
 80044ae:	b005      	add	sp, #20
 80044b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80044b4:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80044b6:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80044b8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80044ba:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80044bc:	f7ff fdc0 	bl	8004040 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80044c0:	07c2      	lsls	r2, r0, #31
 80044c2:	f100 8123 	bmi.w	800470c <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80044c6:	b10d      	cbz	r5, 80044cc <find_volume+0x64>
 80044c8:	0743      	lsls	r3, r0, #29
 80044ca:	d4ef      	bmi.n	80044ac <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80044cc:	2100      	movs	r1, #0
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7ff ff8a 	bl	80043e8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80044d4:	2802      	cmp	r0, #2
 80044d6:	f040 80f7 	bne.w	80046c8 <find_volume+0x260>
 80044da:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 80044de:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80044e0:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80044e4:	b110      	cbz	r0, 80044ec <find_volume+0x84>
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7ff fde4 	bl	80040b4 <ld_dword>
 80044ec:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80044f0:	3101      	adds	r1, #1
 80044f2:	2904      	cmp	r1, #4
 80044f4:	f105 0510 	add.w	r5, r5, #16
 80044f8:	d1f2      	bne.n	80044e0 <find_volume+0x78>
 80044fa:	2500      	movs	r5, #0
			bsect = br[i];
 80044fc:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004500:	2e00      	cmp	r6, #0
 8004502:	f000 80d8 	beq.w	80046b6 <find_volume+0x24e>
 8004506:	4631      	mov	r1, r6
 8004508:	4620      	mov	r0, r4
 800450a:	f7ff ff6d 	bl	80043e8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800450e:	2801      	cmp	r0, #1
 8004510:	f200 80d2 	bhi.w	80046b8 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8004514:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004518:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800451c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	f040 80d4 	bne.w	80046d0 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8004528:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800452c:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004530:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8004534:	d104      	bne.n	8004540 <find_volume+0xd8>
 8004536:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800453a:	f7ff fdbb 	bl	80040b4 <ld_dword>
 800453e:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004540:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8004544:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004546:	f109 33ff 	add.w	r3, r9, #4294967295
 800454a:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800454c:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004550:	f200 80be 	bhi.w	80046d0 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004554:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8004558:	b2bb      	uxth	r3, r7
 800455a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80b7 	beq.w	80046d0 <find_volume+0x268>
 8004562:	1e7b      	subs	r3, r7, #1
 8004564:	423b      	tst	r3, r7
 8004566:	f040 80b3 	bne.w	80046d0 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 800456a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800456e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 8004572:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004576:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800457a:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800457e:	f040 80a7 	bne.w	80046d0 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8004582:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8004586:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800458a:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800458e:	d103      	bne.n	8004598 <find_volume+0x130>
 8004590:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004594:	f7ff fd8e 	bl	80040b4 <ld_dword>
	rv = rv << 8 | ptr[0];
 8004598:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800459c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80045a0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 80045a4:	f000 8094 	beq.w	80046d0 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80045a8:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80045ac:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 80045b0:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80045b2:	4570      	cmp	r0, lr
 80045b4:	f0c0 808c 	bcc.w	80046d0 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80045b8:	eba0 010e 	sub.w	r1, r0, lr
 80045bc:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80045c0:	2900      	cmp	r1, #0
 80045c2:	f000 8085 	beq.w	80046d0 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80045c6:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80045ca:	4281      	cmp	r1, r0
 80045cc:	f200 8084 	bhi.w	80046d8 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80045d0:	f640 77f5 	movw	r7, #4085	; 0xff5
 80045d4:	42b9      	cmp	r1, r7
 80045d6:	bf8c      	ite	hi
 80045d8:	2702      	movhi	r7, #2
 80045da:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80045dc:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80045de:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80045e0:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 80045e4:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80045e6:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80045e8:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80045ea:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80045ec:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80045ee:	d175      	bne.n	80046dc <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 80045f0:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 80045f4:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80045f8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80045fc:	d168      	bne.n	80046d0 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80045fe:	f1b8 0f00 	cmp.w	r8, #0
 8004602:	d165      	bne.n	80046d0 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004608:	f7ff fd54 	bl	80040b4 <ld_dword>
 800460c:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800460e:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004610:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8004614:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8004618:	d35a      	bcc.n	80046d0 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004622:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8004624:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004628:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800462a:	d12f      	bne.n	800468c <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 800462c:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8004630:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d127      	bne.n	800468c <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 800463c:	1c71      	adds	r1, r6, #1
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff feb6 	bl	80043b0 <move_window>
 8004644:	bb10      	cbnz	r0, 800468c <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8004646:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 800464a:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 800464e:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8004650:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004654:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004658:	4293      	cmp	r3, r2
 800465a:	d117      	bne.n	800468c <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800465c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004660:	f7ff fd28 	bl	80040b4 <ld_dword>
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <find_volume+0x2ac>)
 8004666:	4298      	cmp	r0, r3
 8004668:	d110      	bne.n	800468c <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800466a:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800466e:	f7ff fd21 	bl	80040b4 <ld_dword>
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <find_volume+0x2b0>)
 8004674:	4298      	cmp	r0, r3
 8004676:	d109      	bne.n	800468c <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004678:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800467c:	f7ff fd1a 	bl	80040b4 <ld_dword>
 8004680:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004682:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004686:	f7ff fd15 	bl	80040b4 <ld_dword>
 800468a:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 800468c:	4a23      	ldr	r2, [pc, #140]	; (800471c <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800468e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004690:	8813      	ldrh	r3, [r2, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	b29b      	uxth	r3, r3
 8004696:	8013      	strh	r3, [r2, #0]
 8004698:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800469a:	4b21      	ldr	r3, [pc, #132]	; (8004720 <find_volume+0x2b8>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4294      	cmp	r4, r2
 80046a0:	bf04      	itt	eq
 80046a2:	2200      	moveq	r2, #0
 80046a4:	601a      	streq	r2, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	4294      	cmp	r4, r2
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f47f aefe 	bne.w	80044ae <find_volume+0x46>
 80046b2:	6118      	str	r0, [r3, #16]
 80046b4:	e6fb      	b.n	80044ae <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80046b6:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80046b8:	3501      	adds	r5, #1
 80046ba:	2d04      	cmp	r5, #4
 80046bc:	f47f af1e 	bne.w	80044fc <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80046c0:	2804      	cmp	r0, #4
 80046c2:	d105      	bne.n	80046d0 <find_volume+0x268>
 80046c4:	2001      	movs	r0, #1
 80046c6:	e6f2      	b.n	80044ae <find_volume+0x46>
 80046c8:	2804      	cmp	r0, #4
 80046ca:	d0fb      	beq.n	80046c4 <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80046cc:	2801      	cmp	r0, #1
 80046ce:	d901      	bls.n	80046d4 <find_volume+0x26c>
 80046d0:	200d      	movs	r0, #13
 80046d2:	e6ec      	b.n	80044ae <find_volume+0x46>
	bsect = 0;
 80046d4:	2600      	movs	r6, #0
 80046d6:	e71d      	b.n	8004514 <find_volume+0xac>
		fmt = FS_FAT32;
 80046d8:	2703      	movs	r7, #3
 80046da:	e77f      	b.n	80045dc <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80046dc:	f1b8 0f00 	cmp.w	r8, #0
 80046e0:	d0f6      	beq.n	80046d0 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80046e2:	2f02      	cmp	r7, #2
 80046e4:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80046e8:	bf18      	it	ne
 80046ea:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80046ec:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80046ee:	bf18      	it	ne
 80046f0:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80046f4:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80046f6:	bf0c      	ite	eq
 80046f8:	4601      	moveq	r1, r0
 80046fa:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 80046fe:	e787      	b.n	8004610 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004700:	200b      	movs	r0, #11
 8004702:	e6d4      	b.n	80044ae <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004704:	200c      	movs	r0, #12
 8004706:	e6d2      	b.n	80044ae <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8004708:	4628      	mov	r0, r5
 800470a:	e6d0      	b.n	80044ae <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800470c:	2003      	movs	r0, #3
 800470e:	e6ce      	b.n	80044ae <find_volume+0x46>
 8004710:	20000024 	.word	0x20000024
 8004714:	41615252 	.word	0x41615252
 8004718:	61417272 	.word	0x61417272
 800471c:	20000048 	.word	0x20000048
 8004720:	20000028 	.word	0x20000028

08004724 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004724:	2901      	cmp	r1, #1
{
 8004726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472a:	4605      	mov	r5, r0
 800472c:	460c      	mov	r4, r1
 800472e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004730:	d972      	bls.n	8004818 <put_fat+0xf4>
 8004732:	6943      	ldr	r3, [r0, #20]
 8004734:	4299      	cmp	r1, r3
 8004736:	d26f      	bcs.n	8004818 <put_fat+0xf4>
		switch (fs->fs_type) {
 8004738:	7803      	ldrb	r3, [r0, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d03f      	beq.n	80047be <put_fat+0x9a>
 800473e:	2b03      	cmp	r3, #3
 8004740:	d050      	beq.n	80047e4 <put_fat+0xc0>
 8004742:	2b01      	cmp	r3, #1
 8004744:	d168      	bne.n	8004818 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8004746:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800474a:	6a01      	ldr	r1, [r0, #32]
 800474c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004750:	f7ff fe2e 	bl	80043b0 <move_window>
 8004754:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8004756:	bb38      	cbnz	r0, 80047a8 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8004758:	f105 0930 	add.w	r9, r5, #48	; 0x30
 800475c:	f108 0a01 	add.w	sl, r8, #1
 8004760:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004764:	f014 0401 	ands.w	r4, r4, #1
 8004768:	bf1f      	itttt	ne
 800476a:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800476e:	f003 020f 	andne.w	r2, r3, #15
 8004772:	013b      	lslne	r3, r7, #4
 8004774:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004778:	bf14      	ite	ne
 800477a:	4313      	orrne	r3, r2
 800477c:	b2fb      	uxtbeq	r3, r7
 800477e:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004782:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8004784:	2301      	movs	r3, #1
 8004786:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004788:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800478c:	4628      	mov	r0, r5
 800478e:	f7ff fe0f 	bl	80043b0 <move_window>
			if (res != FR_OK) break;
 8004792:	4606      	mov	r6, r0
 8004794:	b940      	cbnz	r0, 80047a8 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8004796:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800479a:	b144      	cbz	r4, 80047ae <put_fat+0x8a>
 800479c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80047a0:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80047a4:	2301      	movs	r3, #1
 80047a6:	70eb      	strb	r3, [r5, #3]
}
 80047a8:	4630      	mov	r0, r6
 80047aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80047ae:	f819 300a 	ldrb.w	r3, [r9, sl]
 80047b2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80047b6:	f023 030f 	bic.w	r3, r3, #15
 80047ba:	431f      	orrs	r7, r3
 80047bc:	e7f0      	b.n	80047a0 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80047be:	6a01      	ldr	r1, [r0, #32]
 80047c0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80047c4:	f7ff fdf4 	bl	80043b0 <move_window>
			if (res != FR_OK) break;
 80047c8:	4606      	mov	r6, r0
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d1ec      	bne.n	80047a8 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80047ce:	0064      	lsls	r4, r4, #1
 80047d0:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80047d4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80047d8:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80047da:	551f      	strb	r7, [r3, r4]
 80047dc:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80047e0:	7057      	strb	r7, [r2, #1]
 80047e2:	e7df      	b.n	80047a4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80047e4:	6a01      	ldr	r1, [r0, #32]
 80047e6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80047ea:	f7ff fde1 	bl	80043b0 <move_window>
			if (res != FR_OK) break;
 80047ee:	4606      	mov	r6, r0
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d1d9      	bne.n	80047a8 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80047f4:	00a4      	lsls	r4, r4, #2
 80047f6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80047fa:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80047fe:	441c      	add	r4, r3
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff fc57 	bl	80040b4 <ld_dword>
 8004806:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800480a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800480e:	4339      	orrs	r1, r7
 8004810:	4620      	mov	r0, r4
 8004812:	f7ff fc57 	bl	80040c4 <st_dword>
 8004816:	e7c5      	b.n	80047a4 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8004818:	2602      	movs	r6, #2
 800481a:	e7c5      	b.n	80047a8 <put_fat+0x84>

0800481c <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800481c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800481e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004820:	4605      	mov	r5, r0
 8004822:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004824:	d952      	bls.n	80048cc <get_fat.isra.8+0xb0>
 8004826:	6943      	ldr	r3, [r0, #20]
 8004828:	4299      	cmp	r1, r3
 800482a:	d24f      	bcs.n	80048cc <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 800482c:	7803      	ldrb	r3, [r0, #0]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d029      	beq.n	8004886 <get_fat.isra.8+0x6a>
 8004832:	2b03      	cmp	r3, #3
 8004834:	d038      	beq.n	80048a8 <get_fat.isra.8+0x8c>
 8004836:	2b01      	cmp	r3, #1
 8004838:	d148      	bne.n	80048cc <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800483a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800483e:	6a01      	ldr	r1, [r0, #32]
 8004840:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8004844:	f7ff fdb4 	bl	80043b0 <move_window>
 8004848:	b110      	cbz	r0, 8004850 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004850:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004852:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8004854:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004858:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800485a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800485e:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8004860:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004864:	f7ff fda4 	bl	80043b0 <move_window>
 8004868:	2800      	cmp	r0, #0
 800486a:	d1ee      	bne.n	800484a <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800486c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004870:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004872:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004874:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8004878:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800487c:	bf4c      	ite	mi
 800487e:	0900      	lsrmi	r0, r0, #4
 8004880:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004886:	6a01      	ldr	r1, [r0, #32]
 8004888:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800488c:	f7ff fd90 	bl	80043b0 <move_window>
 8004890:	2800      	cmp	r0, #0
 8004892:	d1da      	bne.n	800484a <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004894:	0064      	lsls	r4, r4, #1
 8004896:	3530      	adds	r5, #48	; 0x30
 8004898:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800489c:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800489e:	5d28      	ldrb	r0, [r5, r4]
 80048a0:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80048a2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80048a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80048a8:	6a01      	ldr	r1, [r0, #32]
 80048aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80048ae:	f7ff fd7f 	bl	80043b0 <move_window>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d1c9      	bne.n	800484a <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80048b6:	00a4      	lsls	r4, r4, #2
 80048b8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80048bc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80048c0:	4420      	add	r0, r4
 80048c2:	f7ff fbf7 	bl	80040b4 <ld_dword>
 80048c6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80048cc:	2001      	movs	r0, #1
}
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048d0 <create_chain>:
{
 80048d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d4:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80048d6:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80048d8:	460f      	mov	r7, r1
 80048da:	b971      	cbnz	r1, 80048fa <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80048dc:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80048de:	b1f6      	cbz	r6, 800491e <create_chain+0x4e>
 80048e0:	696b      	ldr	r3, [r5, #20]
 80048e2:	429e      	cmp	r6, r3
 80048e4:	bf28      	it	cs
 80048e6:	2601      	movcs	r6, #1
 80048e8:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80048ea:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 80048ec:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80048ee:	429c      	cmp	r4, r3
 80048f0:	d318      	bcc.n	8004924 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80048f2:	2e01      	cmp	r6, #1
 80048f4:	d815      	bhi.n	8004922 <create_chain+0x52>
 80048f6:	2400      	movs	r4, #0
 80048f8:	e009      	b.n	800490e <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80048fa:	4628      	mov	r0, r5
 80048fc:	f7ff ff8e 	bl	800481c <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004900:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004902:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004904:	d937      	bls.n	8004976 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d104      	bne.n	8004914 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800490a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004914:	696b      	ldr	r3, [r5, #20]
 8004916:	4298      	cmp	r0, r3
 8004918:	d3f9      	bcc.n	800490e <create_chain+0x3e>
 800491a:	463e      	mov	r6, r7
 800491c:	e7e4      	b.n	80048e8 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800491e:	2601      	movs	r6, #1
 8004920:	e7e2      	b.n	80048e8 <create_chain+0x18>
				ncl = 2;
 8004922:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004924:	4621      	mov	r1, r4
 8004926:	f8d8 0000 	ldr.w	r0, [r8]
 800492a:	f7ff ff77 	bl	800481c <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 800492e:	b130      	cbz	r0, 800493e <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004930:	2801      	cmp	r0, #1
 8004932:	d020      	beq.n	8004976 <create_chain+0xa6>
 8004934:	3001      	adds	r0, #1
 8004936:	d0e8      	beq.n	800490a <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8004938:	42b4      	cmp	r4, r6
 800493a:	d1d6      	bne.n	80048ea <create_chain+0x1a>
 800493c:	e7db      	b.n	80048f6 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800493e:	f04f 32ff 	mov.w	r2, #4294967295
 8004942:	4621      	mov	r1, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f7ff feed 	bl	8004724 <put_fat>
		if (res == FR_OK && clst != 0) {
 800494a:	b990      	cbnz	r0, 8004972 <create_chain+0xa2>
 800494c:	b957      	cbnz	r7, 8004964 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800494e:	696a      	ldr	r2, [r5, #20]
 8004950:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8004952:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004954:	3a02      	subs	r2, #2
 8004956:	4293      	cmp	r3, r2
 8004958:	d90f      	bls.n	800497a <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800495a:	792b      	ldrb	r3, [r5, #4]
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	712b      	strb	r3, [r5, #4]
 8004962:	e7d4      	b.n	800490e <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004964:	4622      	mov	r2, r4
 8004966:	4639      	mov	r1, r7
 8004968:	4628      	mov	r0, r5
 800496a:	f7ff fedb 	bl	8004724 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800496e:	2800      	cmp	r0, #0
 8004970:	d0ed      	beq.n	800494e <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004972:	2801      	cmp	r0, #1
 8004974:	d0c9      	beq.n	800490a <create_chain+0x3a>
 8004976:	2401      	movs	r4, #1
 8004978:	e7c9      	b.n	800490e <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800497a:	3b01      	subs	r3, #1
 800497c:	612b      	str	r3, [r5, #16]
 800497e:	e7ec      	b.n	800495a <create_chain+0x8a>

08004980 <remove_chain>:
{
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004984:	2d01      	cmp	r5, #1
{
 8004986:	4607      	mov	r7, r0
 8004988:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800498a:	d801      	bhi.n	8004990 <remove_chain+0x10>
 800498c:	2002      	movs	r0, #2
 800498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8004990:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004992:	6963      	ldr	r3, [r4, #20]
 8004994:	429d      	cmp	r5, r3
 8004996:	d2f9      	bcs.n	800498c <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004998:	b12a      	cbz	r2, 80049a6 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff fec0 	bl	8004724 <put_fat>
		if (res != FR_OK) return res;
 80049a4:	bb08      	cbnz	r0, 80049ea <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80049a6:	4629      	mov	r1, r5
 80049a8:	6838      	ldr	r0, [r7, #0]
 80049aa:	f7ff ff37 	bl	800481c <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 80049ae:	4606      	mov	r6, r0
 80049b0:	b908      	cbnz	r0, 80049b6 <remove_chain+0x36>
	return FR_OK;
 80049b2:	2000      	movs	r0, #0
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80049b6:	2801      	cmp	r0, #1
 80049b8:	d0e8      	beq.n	800498c <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d014      	beq.n	80049e8 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80049be:	2200      	movs	r2, #0
 80049c0:	4629      	mov	r1, r5
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff feae 	bl	8004724 <put_fat>
			if (res != FR_OK) return res;
 80049c8:	b978      	cbnz	r0, 80049ea <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80049ca:	6962      	ldr	r2, [r4, #20]
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	1e91      	subs	r1, r2, #2
 80049d0:	428b      	cmp	r3, r1
 80049d2:	d205      	bcs.n	80049e0 <remove_chain+0x60>
			fs->free_clst++;
 80049d4:	3301      	adds	r3, #1
 80049d6:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 80049d8:	7923      	ldrb	r3, [r4, #4]
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80049e0:	4296      	cmp	r6, r2
 80049e2:	4635      	mov	r5, r6
 80049e4:	d3df      	bcc.n	80049a6 <remove_chain+0x26>
 80049e6:	e7e4      	b.n	80049b2 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80049e8:	2001      	movs	r0, #1
}
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049ec <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80049ec:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80049ee:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80049f0:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80049f2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80049f4:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80049f6:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80049f8:	b992      	cbnz	r2, 8004a20 <dir_sdi.constprop.11+0x34>
 80049fa:	7823      	ldrb	r3, [r4, #0]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8004a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004a02:	b973      	cbnz	r3, 8004a22 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004a04:	8923      	ldrh	r3, [r4, #8]
 8004a06:	b90b      	cbnz	r3, 8004a0c <dir_sdi.constprop.11+0x20>
 8004a08:	2002      	movs	r0, #2
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8004a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a0e:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8004a10:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8004a12:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f7      	beq.n	8004a08 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004a18:	3430      	adds	r4, #48	; 0x30
 8004a1a:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004a20:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004a22:	8961      	ldrh	r1, [r4, #10]
 8004a24:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a26:	b961      	cbnz	r1, 8004a42 <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a28:	4611      	mov	r1, r2
 8004a2a:	6828      	ldr	r0, [r5, #0]
 8004a2c:	f7ff fef6 	bl	800481c <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a30:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a32:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a34:	d00b      	beq.n	8004a4e <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a36:	2801      	cmp	r0, #1
 8004a38:	d9e6      	bls.n	8004a08 <dir_sdi.constprop.11+0x1c>
 8004a3a:	6963      	ldr	r3, [r4, #20]
 8004a3c:	4298      	cmp	r0, r3
 8004a3e:	d3f3      	bcc.n	8004a28 <dir_sdi.constprop.11+0x3c>
 8004a40:	e7e2      	b.n	8004a08 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8004a42:	4619      	mov	r1, r3
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7ff fbcd 	bl	80041e4 <clust2sect>
 8004a4a:	61e8      	str	r0, [r5, #28]
 8004a4c:	e7e0      	b.n	8004a10 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a4e:	2001      	movs	r0, #1
}
 8004a50:	bd38      	pop	{r3, r4, r5, pc}

08004a52 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a52:	69c3      	ldr	r3, [r0, #28]
{
 8004a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	4605      	mov	r5, r0
 8004a5a:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a5c:	b1ab      	cbz	r3, 8004a8a <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004a5e:	6942      	ldr	r2, [r0, #20]
 8004a60:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a64:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8004a68:	d20f      	bcs.n	8004a8a <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a6a:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004a6e:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a70:	f1b9 0f00 	cmp.w	r9, #0
 8004a74:	d14f      	bne.n	8004b16 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8004a76:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004a7c:	b941      	cbnz	r1, 8004a90 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004a7e:	8923      	ldrh	r3, [r4, #8]
 8004a80:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004a84:	d847      	bhi.n	8004b16 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a8a:	2004      	movs	r0, #4
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a90:	8963      	ldrh	r3, [r4, #10]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8004a98:	d13d      	bne.n	8004b16 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7ff febe 	bl	800481c <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004aa0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004aa2:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004aa4:	d802      	bhi.n	8004aac <dir_next+0x5a>
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004aac:	1c42      	adds	r2, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <dir_next+0x64>
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004ab6:	6963      	ldr	r3, [r4, #20]
 8004ab8:	4298      	cmp	r0, r3
 8004aba:	d326      	bcc.n	8004b0a <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	d0e2      	beq.n	8004a86 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ac0:	69a9      	ldr	r1, [r5, #24]
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7ff ff04 	bl	80048d0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ac8:	4606      	mov	r6, r0
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d037      	beq.n	8004b3e <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ace:	2801      	cmp	r0, #1
 8004ad0:	d0e9      	beq.n	8004aa6 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	d0ec      	beq.n	8004ab0 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff fc19 	bl	800430e <sync_window>
 8004adc:	4607      	mov	r7, r0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d1e6      	bne.n	8004ab0 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004aec:	f7ff faf2 	bl	80040d4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004af0:	4631      	mov	r1, r6
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7ff fb76 	bl	80041e4 <clust2sect>
						fs->wflag = 1;
 8004af8:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004afc:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004afe:	8963      	ldrh	r3, [r4, #10]
 8004b00:	429f      	cmp	r7, r3
 8004b02:	d310      	bcc.n	8004b26 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8004b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b06:	1bdf      	subs	r7, r3, r7
 8004b08:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8004b0a:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7ff fb68 	bl	80041e4 <clust2sect>
 8004b14:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b16:	3430      	adds	r4, #48	; 0x30
 8004b18:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8004b1a:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b1e:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004b20:	2000      	movs	r0, #0
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8004b26:	f884 a003 	strb.w	sl, [r4, #3]
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7ff fbcc 	bl	80042c8 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1bd      	bne.n	8004ab0 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b36:	3301      	adds	r3, #1
 8004b38:	3701      	adds	r7, #1
 8004b3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b3c:	e7df      	b.n	8004afe <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b3e:	2007      	movs	r0, #7
}
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b44 <follow_path>:
{
 8004b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8004b48:	6807      	ldr	r7, [r0, #0]
{
 8004b4a:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004b4c:	780b      	ldrb	r3, [r1, #0]
 8004b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8004b50:	460d      	mov	r5, r1
 8004b52:	f101 0101 	add.w	r1, r1, #1
 8004b56:	d0f9      	beq.n	8004b4c <follow_path+0x8>
 8004b58:	2b5c      	cmp	r3, #92	; 0x5c
 8004b5a:	d0f7      	beq.n	8004b4c <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004b60:	782b      	ldrb	r3, [r5, #0]
 8004b62:	2b1f      	cmp	r3, #31
 8004b64:	d959      	bls.n	8004c1a <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004b66:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8004cc4 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8004b6a:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8004b6e:	220b      	movs	r2, #11
 8004b70:	2120      	movs	r1, #32
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff faae 	bl	80040d4 <mem_set>
	si = i = 0; ni = 8;
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f105 3eff 	add.w	lr, r5, #4294967295
 8004b7e:	4611      	mov	r1, r2
 8004b80:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8004b82:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b86:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8004b88:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b8c:	d90b      	bls.n	8004ba6 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004b8e:	2b2f      	cmp	r3, #47	; 0x2f
 8004b90:	d14b      	bne.n	8004c2a <follow_path+0xe6>
 8004b92:	1868      	adds	r0, r5, r1
 8004b94:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b96:	f810 eb01 	ldrb.w	lr, [r0], #1
 8004b9a:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8004b9e:	d0f9      	beq.n	8004b94 <follow_path+0x50>
 8004ba0:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8004ba4:	d0f6      	beq.n	8004b94 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8004ba6:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004ba8:	2a00      	cmp	r2, #0
 8004baa:	d054      	beq.n	8004c56 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004bac:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8004bb0:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004bb4:	2ae5      	cmp	r2, #229	; 0xe5
 8004bb6:	bf04      	itt	eq
 8004bb8:	2205      	moveq	r2, #5
 8004bba:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004bbe:	2b21      	cmp	r3, #33	; 0x21
 8004bc0:	bf34      	ite	cc
 8004bc2:	2304      	movcc	r3, #4
 8004bc4:	2300      	movcs	r3, #0
 8004bc6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ff0e 	bl	80049ec <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d145      	bne.n	8004c60 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8004bd4:	69e1      	ldr	r1, [r4, #28]
 8004bd6:	4648      	mov	r0, r9
 8004bd8:	f7ff fbea 	bl	80043b0 <move_window>
		if (res != FR_OK) break;
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d13f      	bne.n	8004c60 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8004be0:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	d046      	beq.n	8004c76 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004be8:	7ada      	ldrb	r2, [r3, #11]
 8004bea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004bee:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004bf0:	7ada      	ldrb	r2, [r3, #11]
 8004bf2:	0711      	lsls	r1, r2, #28
 8004bf4:	d40c      	bmi.n	8004c10 <follow_path+0xcc>
 8004bf6:	f103 0e0b 	add.w	lr, r3, #11
 8004bfa:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8004bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c00:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8004c04:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8004c06:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8004c0a:	d027      	beq.n	8004c5c <follow_path+0x118>
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	d0f5      	beq.n	8004bfc <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8004c10:	2100      	movs	r1, #0
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7ff ff1d 	bl	8004a52 <dir_next>
 8004c18:	e7da      	b.n	8004bd0 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004c20:	4620      	mov	r0, r4
}
 8004c22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8004c26:	f7ff bee1 	b.w	80049ec <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004c2a:	2b5c      	cmp	r3, #92	; 0x5c
 8004c2c:	d0b1      	beq.n	8004b92 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c30:	d036      	beq.n	8004ca0 <follow_path+0x15c>
 8004c32:	4290      	cmp	r0, r2
 8004c34:	d90f      	bls.n	8004c56 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8004c36:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c3a:	bf18      	it	ne
 8004c3c:	3b80      	subne	r3, #128	; 0x80
 8004c3e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004cc8 <follow_path+0x184>
 8004c42:	bf18      	it	ne
 8004c44:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8004c48:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8004c4c:	f1bc 0f00 	cmp.w	ip, #0
 8004c50:	d02b      	beq.n	8004caa <follow_path+0x166>
 8004c52:	4563      	cmp	r3, ip
 8004c54:	d1f8      	bne.n	8004c48 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c56:	2006      	movs	r0, #6
	return res;
 8004c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d1d7      	bne.n	8004c10 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8004c60:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8004c64:	b148      	cbz	r0, 8004c7a <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004c66:	2804      	cmp	r0, #4
 8004c68:	d129      	bne.n	8004cbe <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c6a:	f013 0f04 	tst.w	r3, #4
 8004c6e:	bf08      	it	eq
 8004c70:	2005      	moveq	r0, #5
 8004c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c76:	2004      	movs	r0, #4
 8004c78:	e7f2      	b.n	8004c60 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c7a:	075a      	lsls	r2, r3, #29
 8004c7c:	d41f      	bmi.n	8004cbe <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c7e:	79a3      	ldrb	r3, [r4, #6]
 8004c80:	06db      	lsls	r3, r3, #27
 8004c82:	d50a      	bpl.n	8004c9a <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c84:	6963      	ldr	r3, [r4, #20]
 8004c86:	7838      	ldrb	r0, [r7, #0]
 8004c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004c90:	4419      	add	r1, r3
 8004c92:	f7ff faff 	bl	8004294 <ld_clust.isra.1>
 8004c96:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c98:	e767      	b.n	8004b6a <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c9a:	2005      	movs	r0, #5
 8004c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004ca0:	280b      	cmp	r0, #11
 8004ca2:	d0d8      	beq.n	8004c56 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	200b      	movs	r0, #11
 8004ca8:	e76b      	b.n	8004b82 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004caa:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8004cae:	f1bc 0f19 	cmp.w	ip, #25
 8004cb2:	d801      	bhi.n	8004cb8 <follow_path+0x174>
 8004cb4:	3b20      	subs	r3, #32
 8004cb6:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8004cb8:	54b3      	strb	r3, [r6, r2]
 8004cba:	3201      	adds	r2, #1
 8004cbc:	e761      	b.n	8004b82 <follow_path+0x3e>
}
 8004cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08006440 	.word	0x08006440
 8004cc8:	080064bf 	.word	0x080064bf

08004ccc <dir_register>:
{
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8004cd0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8004cd2:	f7ff fe8b 	bl	80049ec <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	bb28      	cbnz	r0, 8004d26 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8004cda:	69e9      	ldr	r1, [r5, #28]
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7ff fb67 	bl	80043b0 <move_window>
			if (res != FR_OK) break;
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b9f8      	cbnz	r0, 8004d26 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004ce6:	6a2b      	ldr	r3, [r5, #32]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2be5      	cmp	r3, #229	; 0xe5
 8004cec:	d114      	bne.n	8004d18 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8004cee:	69e9      	ldr	r1, [r5, #28]
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff fb5d 	bl	80043b0 <move_window>
		if (res == FR_OK) {
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	b960      	cbnz	r0, 8004d14 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	6a28      	ldr	r0, [r5, #32]
 8004d00:	f7ff f9e8 	bl	80040d4 <mem_set>
 8004d04:	220b      	movs	r2, #11
 8004d06:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004d0a:	6a28      	ldr	r0, [r5, #32]
 8004d0c:	f7ff fab9 	bl	8004282 <mem_cpy.part.0>
			fs->wflag = 1;
 8004d10:	2301      	movs	r3, #1
 8004d12:	70f3      	strb	r3, [r6, #3]
}
 8004d14:	4620      	mov	r0, r4
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0e8      	beq.n	8004cee <dir_register+0x22>
			res = dir_next(dp, 1);
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f7ff fe97 	bl	8004a52 <dir_next>
 8004d24:	e7d7      	b.n	8004cd6 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004d26:	2c04      	cmp	r4, #4
 8004d28:	bf08      	it	eq
 8004d2a:	2407      	moveq	r4, #7
 8004d2c:	e7f2      	b.n	8004d14 <dir_register+0x48>
	...

08004d30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004d30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004d32:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004d34:	a804      	add	r0, sp, #16
{
 8004d36:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004d38:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8004d3c:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004d3e:	f7ff fa6d 	bl	800421c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d42:	1e05      	subs	r5, r0, #0
 8004d44:	db1f      	blt.n	8004d86 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004d46:	4912      	ldr	r1, [pc, #72]	; (8004d90 <f_mount+0x60>)
 8004d48:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8004d4c:	b15c      	cbz	r4, 8004d66 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <f_mount+0x64>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4294      	cmp	r4, r2
 8004d54:	bf04      	itt	eq
 8004d56:	2200      	moveq	r2, #0
 8004d58:	601a      	streq	r2, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4294      	cmp	r4, r2
 8004d60:	bf08      	it	eq
 8004d62:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004d64:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8004d66:	9801      	ldr	r0, [sp, #4]
 8004d68:	b108      	cbz	r0, 8004d6e <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004d6e:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d72:	b130      	cbz	r0, 8004d82 <f_mount+0x52>
 8004d74:	2e01      	cmp	r6, #1
 8004d76:	d108      	bne.n	8004d8a <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004d78:	2200      	movs	r2, #0
 8004d7a:	a901      	add	r1, sp, #4
 8004d7c:	4668      	mov	r0, sp
 8004d7e:	f7ff fb73 	bl	8004468 <find_volume>
	LEAVE_FF(fs, res);
}
 8004d82:	b004      	add	sp, #16
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d86:	200b      	movs	r0, #11
 8004d88:	e7fb      	b.n	8004d82 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	e7f9      	b.n	8004d82 <f_mount+0x52>
 8004d8e:	bf00      	nop
 8004d90:	20000024 	.word	0x20000024
 8004d94:	20000028 	.word	0x20000028

08004d98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	b090      	sub	sp, #64	; 0x40
 8004d9e:	4690      	mov	r8, r2
 8004da0:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004da2:	4604      	mov	r4, r0
 8004da4:	2800      	cmp	r0, #0
 8004da6:	f000 80ce 	beq.w	8004f46 <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004daa:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8004dae:	462a      	mov	r2, r5
 8004db0:	a903      	add	r1, sp, #12
 8004db2:	a801      	add	r0, sp, #4
 8004db4:	f7ff fb58 	bl	8004468 <find_volume>
	if (res == FR_OK) {
 8004db8:	4607      	mov	r7, r0
 8004dba:	bb38      	cbnz	r0, 8004e0c <f_open+0x74>
		dj.obj.fs = fs;
 8004dbc:	ae10      	add	r6, sp, #64	; 0x40
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004dc4:	9901      	ldr	r1, [sp, #4]
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7ff febc 	bl	8004b44 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004dcc:	b958      	cbnz	r0, 8004de6 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004dce:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db1e      	blt.n	8004e14 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004dd6:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8004dda:	bf14      	ite	ne
 8004ddc:	2101      	movne	r1, #1
 8004dde:	2100      	moveq	r1, #0
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7ff f97d 	bl	80040e0 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004de6:	f018 0f1c 	tst.w	r8, #28
 8004dea:	d073      	beq.n	8004ed4 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8004dec:	b1a0      	cbz	r0, 8004e18 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004dee:	2804      	cmp	r0, #4
 8004df0:	d109      	bne.n	8004e06 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004df2:	4b71      	ldr	r3, [pc, #452]	; (8004fb8 <f_open+0x220>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	f000 80da 	beq.w	8004fb0 <f_open+0x218>
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80d6 	beq.w	8004fb0 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004e04:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e06:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e0a:	b170      	cbz	r0, 8004e2a <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	4607      	mov	r7, r0
 8004e12:	e092      	b.n	8004f3a <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8004e14:	2006      	movs	r0, #6
 8004e16:	e7e6      	b.n	8004de6 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e18:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004e1c:	f013 0f11 	tst.w	r3, #17
 8004e20:	d163      	bne.n	8004eea <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004e22:	f018 0f04 	tst.w	r8, #4
 8004e26:	f040 80bd 	bne.w	8004fa4 <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e2a:	0728      	lsls	r0, r5, #28
 8004e2c:	d53c      	bpl.n	8004ea8 <f_open+0x110>
				dw = GET_FATTIME();
 8004e2e:	f000 ff8b 	bl	8005d48 <get_fattime>
 8004e32:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004e34:	4601      	mov	r1, r0
 8004e36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e38:	300e      	adds	r0, #14
 8004e3a:	f7ff f943 	bl	80040c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004e3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e40:	4611      	mov	r1, r2
 8004e42:	3016      	adds	r0, #22
 8004e44:	f7ff f93e 	bl	80040c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e4a:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004e4e:	2220      	movs	r2, #32
 8004e50:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e52:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e56:	f899 0000 	ldrb.w	r0, [r9]
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	f7ff fa1a 	bl	8004294 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004e60:	2200      	movs	r2, #0
 8004e62:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e64:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004e66:	4648      	mov	r0, r9
 8004e68:	f7ff fa22 	bl	80042b0 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004e6e:	2200      	movs	r2, #0
 8004e70:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e72:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e74:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8004e76:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8004e7e:	f1b8 0f00 	cmp.w	r8, #0
 8004e82:	d011      	beq.n	8004ea8 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8004e84:	4641      	mov	r1, r8
 8004e86:	4630      	mov	r0, r6
						dw = fs->winsect;
 8004e88:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8004e8c:	f7ff fd78 	bl	8004980 <remove_chain>
						if (res == FR_OK) {
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d1bb      	bne.n	8004e0c <f_open+0x74>
							res = move_window(fs, dw);
 8004e94:	4649      	mov	r1, r9
 8004e96:	9803      	ldr	r0, [sp, #12]
 8004e98:	f7ff fa8a 	bl	80043b0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004e9c:	9a03      	ldr	r2, [sp, #12]
 8004e9e:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ea2:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d1b1      	bne.n	8004e0c <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004ea8:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004eaa:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8004eb0:	bf48      	it	mi
 8004eb2:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004eb6:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8004eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ebc:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ebe:	bf14      	ite	ne
 8004ec0:	2101      	movne	r1, #1
 8004ec2:	2100      	moveq	r1, #0
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f7ff f939 	bl	800413c <inc_lock>
 8004eca:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d13c      	bne.n	8004f4a <f_open+0x1b2>
 8004ed0:	2002      	movs	r0, #2
 8004ed2:	e79b      	b.n	8004e0c <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d199      	bne.n	8004e0c <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004ed8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004edc:	06da      	lsls	r2, r3, #27
 8004ede:	d463      	bmi.n	8004fa8 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004ee0:	f018 0f02 	tst.w	r8, #2
 8004ee4:	d0e0      	beq.n	8004ea8 <f_open+0x110>
 8004ee6:	07db      	lsls	r3, r3, #31
 8004ee8:	d5de      	bpl.n	8004ea8 <f_open+0x110>
					res = FR_DENIED;
 8004eea:	2007      	movs	r0, #7
 8004eec:	e78e      	b.n	8004e0c <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8004eee:	6820      	ldr	r0, [r4, #0]
 8004ef0:	f7ff fc94 	bl	800481c <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8004ef4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004ef6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004ef8:	d923      	bls.n	8004f42 <f_open+0x1aa>
 8004efa:	1c42      	adds	r2, r0, #1
 8004efc:	4250      	negs	r0, r2
 8004efe:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f00:	eba5 0508 	sub.w	r5, r5, r8
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d049      	beq.n	8004f9c <f_open+0x204>
				fp->clust = clst;
 8004f08:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f47f af7e 	bne.w	8004e0c <f_open+0x74>
 8004f10:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004f14:	b18b      	cbz	r3, 8004f3a <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004f16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f7ff f962 	bl	80041e4 <clust2sect>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d0d5      	beq.n	8004ed0 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004f24:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004f28:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004f32:	f7ff f895 	bl	8004060 <disk_read>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d138      	bne.n	8004fac <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	b010      	add	sp, #64	; 0x40
 8004f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8004f42:	2002      	movs	r0, #2
 8004f44:	e7dc      	b.n	8004f00 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8004f46:	2709      	movs	r7, #9
 8004f48:	e7f7      	b.n	8004f3a <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004f4a:	9e03      	ldr	r6, [sp, #12]
 8004f4c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004f50:	7830      	ldrb	r0, [r6, #0]
 8004f52:	4641      	mov	r1, r8
 8004f54:	f7ff f99e 	bl	8004294 <ld_clust.isra.1>
 8004f58:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004f5a:	f108 001c 	add.w	r0, r8, #28
 8004f5e:	f7ff f8a9 	bl	80040b4 <ld_dword>
			fp->obj.id = fs->id;
 8004f62:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004f64:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004f66:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004f68:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004f6c:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8004f6e:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004f70:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8004f72:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8004f74:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004f76:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004f78:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff f8a8 	bl	80040d4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004f84:	06ab      	lsls	r3, r5, #26
 8004f86:	d5d8      	bpl.n	8004f3a <f_open+0x1a2>
 8004f88:	68e5      	ldr	r5, [r4, #12]
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	d0d5      	beq.n	8004f3a <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004f8e:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004f90:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004f92:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004f96:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004f98:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f9c:	45a8      	cmp	r8, r5
 8004f9e:	d3a6      	bcc.n	8004eee <f_open+0x156>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e7b1      	b.n	8004f08 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004fa4:	2008      	movs	r0, #8
 8004fa6:	e731      	b.n	8004e0c <f_open+0x74>
					res = FR_NO_FILE;
 8004fa8:	2004      	movs	r0, #4
 8004faa:	e72f      	b.n	8004e0c <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004fac:	2001      	movs	r0, #1
 8004fae:	e72d      	b.n	8004e0c <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f7ff fe8b 	bl	8004ccc <dir_register>
 8004fb6:	e726      	b.n	8004e06 <f_open+0x6e>
 8004fb8:	20000028 	.word	0x20000028

08004fbc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	469b      	mov	fp, r3
 8004fc2:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004fc4:	2300      	movs	r3, #0
{
 8004fc6:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8004fc8:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004fcc:	a903      	add	r1, sp, #12
{
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004fd2:	f7ff f93b 	bl	800424c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	bb58      	cbnz	r0, 8005032 <f_write+0x76>
 8004fda:	7d66      	ldrb	r6, [r4, #21]
 8004fdc:	bb4e      	cbnz	r6, 8005032 <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004fde:	7d23      	ldrb	r3, [r4, #20]
 8004fe0:	079a      	lsls	r2, r3, #30
 8004fe2:	f140 80ae 	bpl.w	8005142 <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004fe6:	69a3      	ldr	r3, [r4, #24]
 8004fe8:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004fea:	bf28      	it	cs
 8004fec:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004fee:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 8004ff2:	b1d7      	cbz	r7, 800502a <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004ff4:	69a1      	ldr	r1, [r4, #24]
 8004ff6:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 808f 	bne.w	800511e <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	895b      	ldrh	r3, [r3, #10]
 8005004:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8005006:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	d124      	bne.n	8005058 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800500e:	b931      	cbnz	r1, 800501e <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005010:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8005012:	b9a0      	cbnz	r0, 800503e <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005014:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005016:	4620      	mov	r0, r4
 8005018:	f7ff fc5a 	bl	80048d0 <create_chain>
 800501c:	e004      	b.n	8005028 <f_write+0x6c>
					if (fp->cltbl) {
 800501e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005020:	b15b      	cbz	r3, 800503a <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005022:	4620      	mov	r0, r4
 8005024:	f7ff f8e9 	bl	80041fa <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005028:	b948      	cbnz	r0, 800503e <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800502a:	7d23      	ldrb	r3, [r4, #20]
 800502c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005030:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8005032:	4630      	mov	r0, r6
 8005034:	b005      	add	sp, #20
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800503a:	69e1      	ldr	r1, [r4, #28]
 800503c:	e7eb      	b.n	8005016 <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800503e:	2801      	cmp	r0, #1
 8005040:	d102      	bne.n	8005048 <f_write+0x8c>
 8005042:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005044:	7566      	strb	r6, [r4, #21]
 8005046:	e7f4      	b.n	8005032 <f_write+0x76>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d101      	bne.n	8005050 <f_write+0x94>
 800504c:	2601      	movs	r6, #1
 800504e:	e7f9      	b.n	8005044 <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005050:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8005052:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005054:	b903      	cbnz	r3, 8005058 <f_write+0x9c>
 8005056:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005058:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	da0c      	bge.n	800507a <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005060:	9803      	ldr	r0, [sp, #12]
 8005062:	6a22      	ldr	r2, [r4, #32]
 8005064:	7840      	ldrb	r0, [r0, #1]
 8005066:	2301      	movs	r3, #1
 8005068:	4651      	mov	r1, sl
 800506a:	f7ff f807 	bl	800407c <disk_write>
 800506e:	2800      	cmp	r0, #0
 8005070:	d1ec      	bne.n	800504c <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005072:	7d23      	ldrb	r3, [r4, #20]
 8005074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005078:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	69e1      	ldr	r1, [r4, #28]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f8af 	bl	80041e4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005086:	2800      	cmp	r0, #0
 8005088:	d0db      	beq.n	8005042 <f_write+0x86>
			sect += csect;
 800508a:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800508c:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800508e:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005092:	d032      	beq.n	80050fa <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	9a01      	ldr	r2, [sp, #4]
 8005098:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800509a:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800509c:	442a      	add	r2, r5
 800509e:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80050a0:	bf88      	it	hi
 80050a2:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050a4:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 80050a6:	bf88      	it	hi
 80050a8:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050aa:	462b      	mov	r3, r5
 80050ac:	4642      	mov	r2, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fe ffe4 	bl	800407c <disk_write>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d1c9      	bne.n	800504c <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80050b8:	6a21      	ldr	r1, [r4, #32]
 80050ba:	eba1 0108 	sub.w	r1, r1, r8
 80050be:	428d      	cmp	r5, r1
 80050c0:	d90a      	bls.n	80050d8 <f_write+0x11c>
 80050c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c6:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80050ca:	4650      	mov	r0, sl
 80050cc:	f7ff f8d9 	bl	8004282 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80050d0:	7d23      	ldrb	r3, [r4, #20]
 80050d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d6:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80050d8:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80050da:	69a3      	ldr	r3, [r4, #24]
 80050dc:	68e2      	ldr	r2, [r4, #12]
 80050de:	442b      	add	r3, r5
 80050e0:	61a3      	str	r3, [r4, #24]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf2c      	ite	cs
 80050e6:	60e2      	strcs	r2, [r4, #12]
 80050e8:	60e3      	strcc	r3, [r4, #12]
 80050ea:	f8db 3000 	ldr.w	r3, [fp]
 80050ee:	442b      	add	r3, r5
 80050f0:	44a9      	add	r9, r5
 80050f2:	f8cb 3000 	str.w	r3, [fp]
 80050f6:	1b7f      	subs	r7, r7, r5
 80050f8:	e77b      	b.n	8004ff2 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80050fa:	6a23      	ldr	r3, [r4, #32]
 80050fc:	4598      	cmp	r8, r3
 80050fe:	d00c      	beq.n	800511a <f_write+0x15e>
 8005100:	69a2      	ldr	r2, [r4, #24]
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	429a      	cmp	r2, r3
 8005106:	d208      	bcs.n	800511a <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005108:	9800      	ldr	r0, [sp, #0]
 800510a:	2301      	movs	r3, #1
 800510c:	4642      	mov	r2, r8
 800510e:	4651      	mov	r1, sl
 8005110:	7840      	ldrb	r0, [r0, #1]
 8005112:	f7fe ffa5 	bl	8004060 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8005116:	2800      	cmp	r0, #0
 8005118:	d198      	bne.n	800504c <f_write+0x90>
			fp->sect = sect;
 800511a:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800511e:	69a0      	ldr	r0, [r4, #24]
 8005120:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005124:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8005128:	42bd      	cmp	r5, r7
 800512a:	bf28      	it	cs
 800512c:	463d      	movcs	r5, r7
 800512e:	462a      	mov	r2, r5
 8005130:	4649      	mov	r1, r9
 8005132:	4450      	add	r0, sl
 8005134:	f7ff f8a5 	bl	8004282 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8005138:	7d23      	ldrb	r3, [r4, #20]
 800513a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800513e:	7523      	strb	r3, [r4, #20]
 8005140:	e7cb      	b.n	80050da <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005142:	2607      	movs	r6, #7
 8005144:	e775      	b.n	8005032 <f_write+0x76>

08005146 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005146:	290a      	cmp	r1, #10
{
 8005148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800514a:	4604      	mov	r4, r0
 800514c:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800514e:	d102      	bne.n	8005156 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8005150:	210d      	movs	r1, #13
 8005152:	f7ff fff8 	bl	8005146 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005156:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8005158:	2b00      	cmp	r3, #0
 800515a:	db14      	blt.n	8005186 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800515c:	1c5d      	adds	r5, r3, #1
 800515e:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005160:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8005162:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005164:	dd0b      	ble.n	800517e <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005166:	ab01      	add	r3, sp, #4
 8005168:	462a      	mov	r2, r5
 800516a:	f104 010c 	add.w	r1, r4, #12
 800516e:	6820      	ldr	r0, [r4, #0]
 8005170:	f7ff ff24 	bl	8004fbc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005174:	9b01      	ldr	r3, [sp, #4]
 8005176:	1b5d      	subs	r5, r3, r5
 8005178:	bf18      	it	ne
 800517a:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 800517e:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8005180:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8005182:	3301      	adds	r3, #1
 8005184:	60a3      	str	r3, [r4, #8]
}
 8005186:	b002      	add	sp, #8
 8005188:	bd70      	pop	{r4, r5, r6, pc}

0800518a <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800518a:	6842      	ldr	r2, [r0, #4]
 800518c:	2a00      	cmp	r2, #0
{
 800518e:	b513      	push	{r0, r1, r4, lr}
 8005190:	4604      	mov	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005192:	da03      	bge.n	800519c <putc_flush+0x12>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005198:	b002      	add	sp, #8
 800519a:	bd10      	pop	{r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800519c:	f100 010c 	add.w	r1, r0, #12
 80051a0:	ab01      	add	r3, sp, #4
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	f7ff ff0a 	bl	8004fbc <f_write>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d1f3      	bne.n	8005194 <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80051ac:	6862      	ldr	r2, [r4, #4]
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d1ef      	bne.n	8005194 <putc_flush+0xa>
 80051b4:	68a0      	ldr	r0, [r4, #8]
 80051b6:	e7ef      	b.n	8005198 <putc_flush+0xe>

080051b8 <f_sync>:
{
 80051b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80051ba:	a901      	add	r1, sp, #4
{
 80051bc:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80051be:	f7ff f845 	bl	800424c <validate>
	if (res == FR_OK) {
 80051c2:	4605      	mov	r5, r0
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d13a      	bne.n	800523e <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80051c8:	7d23      	ldrb	r3, [r4, #20]
 80051ca:	065a      	lsls	r2, r3, #25
 80051cc:	d537      	bpl.n	800523e <f_sync+0x86>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	d50c      	bpl.n	80051ec <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80051d2:	9801      	ldr	r0, [sp, #4]
 80051d4:	6a22      	ldr	r2, [r4, #32]
 80051d6:	7840      	ldrb	r0, [r0, #1]
 80051d8:	2301      	movs	r3, #1
 80051da:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80051de:	f7fe ff4d 	bl	800407c <disk_write>
 80051e2:	bb78      	cbnz	r0, 8005244 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80051e4:	7d23      	ldrb	r3, [r4, #20]
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 80051ec:	f000 fdac 	bl	8005d48 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80051f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80051f2:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80051f4:	9801      	ldr	r0, [sp, #4]
 80051f6:	f7ff f8db 	bl	80043b0 <move_window>
				if (res == FR_OK) {
 80051fa:	4605      	mov	r5, r0
 80051fc:	b9f8      	cbnz	r0, 800523e <f_sync+0x86>
					dir = fp->dir_ptr;
 80051fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005200:	7af3      	ldrb	r3, [r6, #11]
 8005202:	f043 0320 	orr.w	r3, r3, #32
 8005206:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005208:	68a2      	ldr	r2, [r4, #8]
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	4631      	mov	r1, r6
 800520e:	f7ff f84f 	bl	80042b0 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005212:	68e1      	ldr	r1, [r4, #12]
 8005214:	f106 001c 	add.w	r0, r6, #28
 8005218:	f7fe ff54 	bl	80040c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800521c:	4639      	mov	r1, r7
 800521e:	f106 0016 	add.w	r0, r6, #22
 8005222:	f7fe ff4f 	bl	80040c4 <st_dword>
					fs->wflag = 1;
 8005226:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005228:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 800522a:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800522c:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800522e:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005230:	f7ff f873 	bl	800431a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005234:	7d23      	ldrb	r3, [r4, #20]
 8005236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800523a:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800523c:	7523      	strb	r3, [r4, #20]
}
 800523e:	4628      	mov	r0, r5
 8005240:	b003      	add	sp, #12
 8005242:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005244:	2501      	movs	r5, #1
 8005246:	e7fa      	b.n	800523e <f_sync+0x86>

08005248 <f_close>:
{
 8005248:	b513      	push	{r0, r1, r4, lr}
 800524a:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800524c:	f7ff ffb4 	bl	80051b8 <f_sync>
	if (res == FR_OK)
 8005250:	b948      	cbnz	r0, 8005266 <f_close+0x1e>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005252:	a901      	add	r1, sp, #4
 8005254:	4620      	mov	r0, r4
 8005256:	f7fe fff9 	bl	800424c <validate>
		if (res == FR_OK) {
 800525a:	b920      	cbnz	r0, 8005266 <f_close+0x1e>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800525c:	6920      	ldr	r0, [r4, #16]
 800525e:	f7fe ffa9 	bl	80041b4 <dec_lock>
			if (res == FR_OK)
 8005262:	b900      	cbnz	r0, 8005266 <f_close+0x1e>
				fp->obj.fs = 0;			/* Invalidate file object */
 8005264:	6020      	str	r0, [r4, #0]
}
 8005266:	b002      	add	sp, #8
 8005268:	bd10      	pop	{r4, pc}

0800526a <f_lseek>:
{
 800526a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526e:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005270:	a901      	add	r1, sp, #4
{
 8005272:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005274:	f7fe ffea 	bl	800424c <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005278:	4606      	mov	r6, r0
 800527a:	b9e0      	cbnz	r0, 80052b6 <f_lseek+0x4c>
 800527c:	7d66      	ldrb	r6, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800527e:	b9d6      	cbnz	r6, 80052b6 <f_lseek+0x4c>
	if (fp->cltbl) {	/* Fast seek */
 8005280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d078      	beq.n	8005378 <f_lseek+0x10e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005286:	1c6a      	adds	r2, r5, #1
 8005288:	d139      	bne.n	80052fe <f_lseek+0x94>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800528a:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800528e:	f8d3 b000 	ldr.w	fp, [r3]
 8005292:	1d1f      	adds	r7, r3, #4
 8005294:	2502      	movs	r5, #2
			if (cl) {
 8005296:	f1b8 0f00 	cmp.w	r8, #0
 800529a:	d028      	beq.n	80052ee <f_lseek+0x84>
 800529c:	46c1      	mov	r9, r8
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800529e:	f04f 0a00 	mov.w	sl, #0
						cl = get_fat(&fp->obj, cl);
 80052a2:	4649      	mov	r1, r9
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	f7ff fab9 	bl	800481c <get_fat.isra.8>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80052aa:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 80052ac:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80052b0:	d807      	bhi.n	80052c2 <f_lseek+0x58>
 80052b2:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052b4:	7566      	strb	r6, [r4, #21]
}
 80052b6:	4630      	mov	r0, r6
 80052b8:	b003      	add	sp, #12
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	4680      	mov	r8, r0
 80052c0:	e7ec      	b.n	800529c <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d101      	bne.n	80052ca <f_lseek+0x60>
 80052c6:	2601      	movs	r6, #1
 80052c8:	e7f4      	b.n	80052b4 <f_lseek+0x4a>
					} while (cl == pcl + 1);
 80052ca:	f109 0301 	add.w	r3, r9, #1
 80052ce:	4298      	cmp	r0, r3
 80052d0:	4681      	mov	r9, r0
 80052d2:	d0e6      	beq.n	80052a2 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80052d4:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80052d6:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 80052d8:	bf21      	itttt	cs
 80052da:	463b      	movcs	r3, r7
 80052dc:	f843 ab08 	strcs.w	sl, [r3], #8
 80052e0:	f8c7 8004 	strcs.w	r8, [r7, #4]
 80052e4:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4298      	cmp	r0, r3
 80052ec:	d3e7      	bcc.n	80052be <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 80052ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 80052f0:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 80052f2:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 80052f4:	f200 80d4 	bhi.w	80054a0 <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
 80052f8:	2300      	movs	r3, #0
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	e7db      	b.n	80052b6 <f_lseek+0x4c>
 80052fe:	68e0      	ldr	r0, [r4, #12]
 8005300:	4285      	cmp	r5, r0
 8005302:	bf28      	it	cs
 8005304:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8005306:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8005308:	2d00      	cmp	r5, #0
 800530a:	d0d4      	beq.n	80052b6 <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800530c:	f105 38ff 	add.w	r8, r5, #4294967295
 8005310:	4641      	mov	r1, r8
 8005312:	4620      	mov	r0, r4
 8005314:	f7fe ff71 	bl	80041fa <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8005318:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 800531a:	61e0      	str	r0, [r4, #28]
 800531c:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 800531e:	4638      	mov	r0, r7
 8005320:	f7fe ff60 	bl	80041e4 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8005324:	2800      	cmp	r0, #0
 8005326:	d0c4      	beq.n	80052b2 <f_lseek+0x48>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8005328:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800532c:	2d00      	cmp	r5, #0
 800532e:	d0c2      	beq.n	80052b6 <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8005330:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8005332:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8005334:	3d01      	subs	r5, #1
 8005336:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 800533a:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800533c:	4295      	cmp	r5, r2
 800533e:	d0ba      	beq.n	80052b6 <f_lseek+0x4c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005340:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800534a:	da0a      	bge.n	8005362 <f_lseek+0xf8>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800534c:	2301      	movs	r3, #1
 800534e:	4641      	mov	r1, r8
 8005350:	7878      	ldrb	r0, [r7, #1]
 8005352:	f7fe fe93 	bl	800407c <disk_write>
 8005356:	2800      	cmp	r0, #0
 8005358:	d1b5      	bne.n	80052c6 <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800535a:	7d23      	ldrb	r3, [r4, #20]
 800535c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005360:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8005362:	9801      	ldr	r0, [sp, #4]
 8005364:	2301      	movs	r3, #1
 8005366:	462a      	mov	r2, r5
 8005368:	4641      	mov	r1, r8
 800536a:	7840      	ldrb	r0, [r0, #1]
 800536c:	f7fe fe78 	bl	8004060 <disk_read>
 8005370:	2800      	cmp	r0, #0
 8005372:	d1a8      	bne.n	80052c6 <f_lseek+0x5c>
					fp->sect = dsc;
 8005374:	6225      	str	r5, [r4, #32]
 8005376:	e79e      	b.n	80052b6 <f_lseek+0x4c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	429d      	cmp	r5, r3
 800537c:	d904      	bls.n	8005388 <f_lseek+0x11e>
 800537e:	7d22      	ldrb	r2, [r4, #20]
 8005380:	f012 0f02 	tst.w	r2, #2
 8005384:	bf08      	it	eq
 8005386:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8005388:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800538a:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 800538c:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800538e:	2d00      	cmp	r5, #0
 8005390:	d132      	bne.n	80053f8 <f_lseek+0x18e>
		fp->fptr = nsect = 0;
 8005392:	462f      	mov	r7, r5
 8005394:	e009      	b.n	80053aa <f_lseek+0x140>
 8005396:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005398:	68e3      	ldr	r3, [r4, #12]
 800539a:	69a5      	ldr	r5, [r4, #24]
 800539c:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 800539e:	bf81      	itttt	hi
 80053a0:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 80053a2:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 80053a4:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 80053a8:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80053aa:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	d081      	beq.n	80052b6 <f_lseek+0x4c>
 80053b2:	6a22      	ldr	r2, [r4, #32]
 80053b4:	42ba      	cmp	r2, r7
 80053b6:	f43f af7e 	beq.w	80052b6 <f_lseek+0x4c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80053ba:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f104 0530 	add.w	r5, r4, #48	; 0x30
 80053c4:	da0c      	bge.n	80053e0 <f_lseek+0x176>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80053c6:	9801      	ldr	r0, [sp, #4]
 80053c8:	2301      	movs	r3, #1
 80053ca:	4629      	mov	r1, r5
 80053cc:	7840      	ldrb	r0, [r0, #1]
 80053ce:	f7fe fe55 	bl	800407c <disk_write>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	f47f af77 	bne.w	80052c6 <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053d8:	7d23      	ldrb	r3, [r4, #20]
 80053da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053de:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80053e0:	9801      	ldr	r0, [sp, #4]
 80053e2:	2301      	movs	r3, #1
 80053e4:	463a      	mov	r2, r7
 80053e6:	4629      	mov	r1, r5
 80053e8:	7840      	ldrb	r0, [r0, #1]
 80053ea:	f7fe fe39 	bl	8004060 <disk_read>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f47f af69 	bne.w	80052c6 <f_lseek+0x5c>
			fp->sect = nsect;
 80053f4:	6227      	str	r7, [r4, #32]
 80053f6:	e75e      	b.n	80052b6 <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80053f8:	9a01      	ldr	r2, [sp, #4]
 80053fa:	8957      	ldrh	r7, [r2, #10]
 80053fc:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80053fe:	b303      	cbz	r3, 8005442 <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005400:	3b01      	subs	r3, #1
 8005402:	1e6a      	subs	r2, r5, #1
 8005404:	fbb3 f1f7 	udiv	r1, r3, r7
 8005408:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800540c:	428a      	cmp	r2, r1
 800540e:	d318      	bcc.n	8005442 <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005410:	427a      	negs	r2, r7
 8005412:	4013      	ands	r3, r2
				clst = fp->clust;
 8005414:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005416:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8005418:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 800541a:	2900      	cmp	r1, #0
 800541c:	d0bb      	beq.n	8005396 <f_lseek+0x12c>
				while (ofs > bcs) {						/* Cluster following loop */
 800541e:	42bd      	cmp	r5, r7
 8005420:	d81e      	bhi.n	8005460 <f_lseek+0x1f6>
				fp->fptr += ofs;
 8005422:	69a3      	ldr	r3, [r4, #24]
 8005424:	442b      	add	r3, r5
 8005426:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8005428:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0b2      	beq.n	8005396 <f_lseek+0x12c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005430:	9801      	ldr	r0, [sp, #4]
 8005432:	f7fe fed7 	bl	80041e4 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8005436:	2800      	cmp	r0, #0
 8005438:	f43f af3b 	beq.w	80052b2 <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 800543c:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 8005440:	e7aa      	b.n	8005398 <f_lseek+0x12e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005442:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005444:	b951      	cbnz	r1, 800545c <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
 8005446:	4620      	mov	r0, r4
 8005448:	f7ff fa42 	bl	80048d0 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800544c:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800544e:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005450:	f43f af2f 	beq.w	80052b2 <f_lseek+0x48>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005454:	3001      	adds	r0, #1
 8005456:	f43f af36 	beq.w	80052c6 <f_lseek+0x5c>
					fp->obj.sclust = clst;
 800545a:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 800545c:	61e1      	str	r1, [r4, #28]
 800545e:	e7dc      	b.n	800541a <f_lseek+0x1b0>
					ofs -= bcs; fp->fptr += bcs;
 8005460:	69a3      	ldr	r3, [r4, #24]
 8005462:	443b      	add	r3, r7
 8005464:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005466:	7d23      	ldrb	r3, [r4, #20]
 8005468:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 800546a:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800546e:	d506      	bpl.n	800547e <f_lseek+0x214>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fa2d 	bl	80048d0 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005476:	4601      	mov	r1, r0
 8005478:	b928      	cbnz	r0, 8005486 <f_lseek+0x21c>
							ofs = 0; break;
 800547a:	4605      	mov	r5, r0
 800547c:	e7d1      	b.n	8005422 <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	f7ff f9cc 	bl	800481c <get_fat.isra.8>
 8005484:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005486:	1c4b      	adds	r3, r1, #1
 8005488:	f43f af1d 	beq.w	80052c6 <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800548c:	2901      	cmp	r1, #1
 800548e:	f67f af10 	bls.w	80052b2 <f_lseek+0x48>
 8005492:	9b01      	ldr	r3, [sp, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4299      	cmp	r1, r3
 8005498:	f4bf af0b 	bcs.w	80052b2 <f_lseek+0x48>
					fp->clust = clst;
 800549c:	61e1      	str	r1, [r4, #28]
 800549e:	e7be      	b.n	800541e <f_lseek+0x1b4>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80054a0:	2611      	movs	r6, #17
 80054a2:	e708      	b.n	80052b6 <f_lseek+0x4c>

080054a4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80054a4:	b40e      	push	{r1, r2, r3}
 80054a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054aa:	b09d      	sub	sp, #116	; 0x74
 80054ac:	aa25      	add	r2, sp, #148	; 0x94
	pb->nchr = pb->idx = 0;
 80054ae:	2100      	movs	r1, #0
{
 80054b0:	f852 3b04 	ldr.w	r3, [r2], #4
	pb->fp = fp;
 80054b4:	9009      	str	r0, [sp, #36]	; 0x24
	pb->nchr = pb->idx = 0;
 80054b6:	910a      	str	r1, [sp, #40]	; 0x28
 80054b8:	910b      	str	r1, [sp, #44]	; 0x2c
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
 80054ba:	9200      	str	r2, [sp, #0]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
 80054bc:	ae01      	add	r6, sp, #4
		c = *fmt++;
 80054be:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 80054c0:	2900      	cmp	r1, #0
 80054c2:	f000 80e0 	beq.w	8005686 <f_printf+0x1e2>
		if (c != '%') {				/* Non escape character */
 80054c6:	2925      	cmp	r1, #37	; 0x25
 80054c8:	d004      	beq.n	80054d4 <f_printf+0x30>
		c = *fmt++;
 80054ca:	1c5d      	adds	r5, r3, #1
			putc_bfd(&pb, c); continue;
 80054cc:	a809      	add	r0, sp, #36	; 0x24
 80054ce:	f7ff fe3a 	bl	8005146 <putc_bfd>
 80054d2:	e05d      	b.n	8005590 <f_printf+0xec>
		c = *fmt++;
 80054d4:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 80054d6:	2930      	cmp	r1, #48	; 0x30
 80054d8:	d129      	bne.n	800552e <f_printf+0x8a>
			f = 1; c = *fmt++;
 80054da:	7899      	ldrb	r1, [r3, #2]
 80054dc:	1cdd      	adds	r5, r3, #3
 80054de:	2201      	movs	r2, #1
 80054e0:	2700      	movs	r7, #0
			w = w * 10 + c - '0';
 80054e2:	200a      	movs	r0, #10
		while (IsDigit(c)) {		/* Precision */
 80054e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	d929      	bls.n	8005540 <f_printf+0x9c>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80054ec:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 80054f0:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 80054f2:	bf02      	ittt	eq
 80054f4:	7829      	ldrbeq	r1, [r5, #0]
 80054f6:	f042 0204 	orreq.w	r2, r2, #4
 80054fa:	3501      	addeq	r5, #1
		if (!c) break;
 80054fc:	2900      	cmp	r1, #0
 80054fe:	f000 80c2 	beq.w	8005686 <f_printf+0x1e2>
		if (IsLower(d)) d -= 0x20;
 8005502:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8005506:	2b19      	cmp	r3, #25
 8005508:	bf9a      	itte	ls
 800550a:	f1a1 0320 	subls.w	r3, r1, #32
 800550e:	b2db      	uxtbls	r3, r3
 8005510:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 8005512:	2b4f      	cmp	r3, #79	; 0x4f
 8005514:	d03e      	beq.n	8005594 <f_printf+0xf0>
 8005516:	d819      	bhi.n	800554c <f_printf+0xa8>
 8005518:	2b43      	cmp	r3, #67	; 0x43
 800551a:	f000 8096 	beq.w	800564a <f_printf+0x1a6>
 800551e:	2b44      	cmp	r3, #68	; 0x44
 8005520:	f000 809b 	beq.w	800565a <f_printf+0x1b6>
 8005524:	2b42      	cmp	r3, #66	; 0x42
 8005526:	d1d1      	bne.n	80054cc <f_printf+0x28>
			r = 2; break;
 8005528:	f04f 0e02 	mov.w	lr, #2
 800552c:	e034      	b.n	8005598 <f_printf+0xf4>
			if (c == '-') {			/* Flag: left justified */
 800552e:	292d      	cmp	r1, #45	; 0x2d
		c = *fmt++;
 8005530:	bf19      	ittee	ne
 8005532:	1c9d      	addne	r5, r3, #2
		w = f = 0;
 8005534:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 8005536:	1cdd      	addeq	r5, r3, #3
 8005538:	7899      	ldrbeq	r1, [r3, #2]
 800553a:	bf08      	it	eq
 800553c:	2202      	moveq	r2, #2
 800553e:	e7cf      	b.n	80054e0 <f_printf+0x3c>
			w = w * 10 + c - '0';
 8005540:	fb00 1707 	mla	r7, r0, r7, r1
 8005544:	3f30      	subs	r7, #48	; 0x30
			c = *fmt++;
 8005546:	f815 1b01 	ldrb.w	r1, [r5], #1
 800554a:	e7cb      	b.n	80054e4 <f_printf+0x40>
		switch (d) {				/* Type is... */
 800554c:	2b55      	cmp	r3, #85	; 0x55
 800554e:	f000 8084 	beq.w	800565a <f_printf+0x1b6>
 8005552:	2b58      	cmp	r3, #88	; 0x58
 8005554:	d07e      	beq.n	8005654 <f_printf+0x1b0>
 8005556:	2b53      	cmp	r3, #83	; 0x53
 8005558:	d1b8      	bne.n	80054cc <f_printf+0x28>
			p = va_arg(arp, TCHAR*);
 800555a:	9b00      	ldr	r3, [sp, #0]
 800555c:	f8d3 8000 	ldr.w	r8, [r3]
 8005560:	1d19      	adds	r1, r3, #4
 8005562:	9100      	str	r1, [sp, #0]
			for (j = 0; p[j]; j++) ;
 8005564:	4643      	mov	r3, r8
 8005566:	eba3 0408 	sub.w	r4, r3, r8
 800556a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800556e:	2900      	cmp	r1, #0
 8005570:	d1f9      	bne.n	8005566 <f_printf+0xc2>
			if (!(f & 2)) {
 8005572:	0793      	lsls	r3, r2, #30
 8005574:	d404      	bmi.n	8005580 <f_printf+0xdc>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005576:	4623      	mov	r3, r4
 8005578:	42bb      	cmp	r3, r7
 800557a:	f104 0401 	add.w	r4, r4, #1
 800557e:	d355      	bcc.n	800562c <f_printf+0x188>
 8005580:	f108 38ff 	add.w	r8, r8, #4294967295
			while (*p) putc_bfd(&pb, *p++);
 8005584:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8005588:	2900      	cmp	r1, #0
 800558a:	d154      	bne.n	8005636 <f_printf+0x192>
			while (j++ < w) putc_bfd(&pb, ' ');
 800558c:	42a7      	cmp	r7, r4
 800558e:	d856      	bhi.n	800563e <f_printf+0x19a>
{
 8005590:	462b      	mov	r3, r5
 8005592:	e794      	b.n	80054be <f_printf+0x1a>
			r = 8; break;
 8005594:	f04f 0e08 	mov.w	lr, #8
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005598:	f012 0f04 	tst.w	r2, #4
 800559c:	9800      	ldr	r0, [sp, #0]
 800559e:	d05f      	beq.n	8005660 <f_printf+0x1bc>
 80055a0:	1d04      	adds	r4, r0, #4
 80055a2:	6800      	ldr	r0, [r0, #0]
 80055a4:	9400      	str	r4, [sp, #0]
		if (d == 'D' && (v & 0x80000000)) {
 80055a6:	2b44      	cmp	r3, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80055a8:	d104      	bne.n	80055b4 <f_printf+0x110>
		if (d == 'D' && (v & 0x80000000)) {
 80055aa:	2800      	cmp	r0, #0
			v = 0 - v;
 80055ac:	bfbc      	itt	lt
 80055ae:	4240      	neglt	r0, r0
			f |= 8;
 80055b0:	f042 0208 	orrlt.w	r2, r2, #8
 80055b4:	2978      	cmp	r1, #120	; 0x78
 80055b6:	bf0c      	ite	eq
 80055b8:	f04f 0827 	moveq.w	r8, #39	; 0x27
 80055bc:	f04f 0807 	movne.w	r8, #7
		i = 0;
 80055c0:	2100      	movs	r1, #0
			d = (TCHAR)(v % r); v /= r;
 80055c2:	fbb0 fcfe 	udiv	ip, r0, lr
 80055c6:	fb0e 041c 	mls	r4, lr, ip, r0
 80055ca:	b2e3      	uxtb	r3, r4
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80055cc:	2c09      	cmp	r4, #9
 80055ce:	bf84      	itt	hi
 80055d0:	4443      	addhi	r3, r8
 80055d2:	b2db      	uxtbhi	r3, r3
			str[i++] = d + '0';
 80055d4:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 80055d6:	4660      	mov	r0, ip
			str[i++] = d + '0';
 80055d8:	1c4c      	adds	r4, r1, #1
 80055da:	5473      	strb	r3, [r6, r1]
		} while (v && i < sizeof str / sizeof str[0]);
 80055dc:	f1bc 0f00 	cmp.w	ip, #0
 80055e0:	d002      	beq.n	80055e8 <f_printf+0x144>
 80055e2:	2c20      	cmp	r4, #32
 80055e4:	d142      	bne.n	800566c <f_printf+0x1c8>
 80055e6:	211f      	movs	r1, #31
		if (f & 8) str[i++] = '-';
 80055e8:	0710      	lsls	r0, r2, #28
 80055ea:	d505      	bpl.n	80055f8 <f_printf+0x154>
 80055ec:	ab1c      	add	r3, sp, #112	; 0x70
 80055ee:	441c      	add	r4, r3
 80055f0:	232d      	movs	r3, #45	; 0x2d
 80055f2:	f804 3c6c 	strb.w	r3, [r4, #-108]
 80055f6:	1c8c      	adds	r4, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 80055f8:	f012 0f01 	tst.w	r2, #1
 80055fc:	bf14      	ite	ne
 80055fe:	f04f 0930 	movne.w	r9, #48	; 0x30
 8005602:	f04f 0920 	moveq.w	r9, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005606:	0793      	lsls	r3, r2, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8005608:	46a0      	mov	r8, r4
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800560a:	d536      	bpl.n	800567a <f_printf+0x1d6>
		do {
			putc_bfd(&pb, str[--i]);
 800560c:	3c01      	subs	r4, #1
 800560e:	a809      	add	r0, sp, #36	; 0x24
 8005610:	5d31      	ldrb	r1, [r6, r4]
 8005612:	f7ff fd98 	bl	8005146 <putc_bfd>
		} while (i);
 8005616:	2c00      	cmp	r4, #0
 8005618:	d1f8      	bne.n	800560c <f_printf+0x168>
		while (j++ < w) putc_bfd(&pb, d);
 800561a:	4547      	cmp	r7, r8
 800561c:	d9b8      	bls.n	8005590 <f_printf+0xec>
 800561e:	4649      	mov	r1, r9
 8005620:	a809      	add	r0, sp, #36	; 0x24
 8005622:	f7ff fd90 	bl	8005146 <putc_bfd>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	e7f6      	b.n	800561a <f_printf+0x176>
				while (j++ < w) putc_bfd(&pb, ' ');
 800562c:	2120      	movs	r1, #32
 800562e:	a809      	add	r0, sp, #36	; 0x24
 8005630:	f7ff fd89 	bl	8005146 <putc_bfd>
 8005634:	e79f      	b.n	8005576 <f_printf+0xd2>
			while (*p) putc_bfd(&pb, *p++);
 8005636:	a809      	add	r0, sp, #36	; 0x24
 8005638:	f7ff fd85 	bl	8005146 <putc_bfd>
 800563c:	e7a2      	b.n	8005584 <f_printf+0xe0>
			while (j++ < w) putc_bfd(&pb, ' ');
 800563e:	2120      	movs	r1, #32
 8005640:	a809      	add	r0, sp, #36	; 0x24
 8005642:	f7ff fd80 	bl	8005146 <putc_bfd>
 8005646:	3401      	adds	r4, #1
 8005648:	e7a0      	b.n	800558c <f_printf+0xe8>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800564a:	9b00      	ldr	r3, [sp, #0]
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	9200      	str	r2, [sp, #0]
 8005650:	7819      	ldrb	r1, [r3, #0]
 8005652:	e73b      	b.n	80054cc <f_printf+0x28>
			r = 16; break;
 8005654:	f04f 0e10 	mov.w	lr, #16
 8005658:	e79e      	b.n	8005598 <f_printf+0xf4>
			r = 10; break;
 800565a:	f04f 0e0a 	mov.w	lr, #10
 800565e:	e79b      	b.n	8005598 <f_printf+0xf4>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005660:	2b44      	cmp	r3, #68	; 0x44
 8005662:	f100 0304 	add.w	r3, r0, #4
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	6800      	ldr	r0, [r0, #0]
 800566a:	e79d      	b.n	80055a8 <f_printf+0x104>
 800566c:	4621      	mov	r1, r4
 800566e:	e7a8      	b.n	80055c2 <f_printf+0x11e>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005670:	4649      	mov	r1, r9
 8005672:	a809      	add	r0, sp, #36	; 0x24
 8005674:	f7ff fd67 	bl	8005146 <putc_bfd>
 8005678:	46d0      	mov	r8, sl
 800567a:	45b8      	cmp	r8, r7
 800567c:	f108 0a01 	add.w	sl, r8, #1
 8005680:	d3f6      	bcc.n	8005670 <f_printf+0x1cc>
 8005682:	46d0      	mov	r8, sl
 8005684:	e7c2      	b.n	800560c <f_printf+0x168>
	}

	va_end(arp);

	return putc_flush(&pb);
 8005686:	a809      	add	r0, sp, #36	; 0x24
 8005688:	f7ff fd7f 	bl	800518a <putc_flush>
}
 800568c:	b01d      	add	sp, #116	; 0x74
 800568e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005692:	b003      	add	sp, #12
 8005694:	4770      	bx	lr
	...

08005698 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005698:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <FATFS_LinkDriverEx+0x40>)
 800569c:	7a5d      	ldrb	r5, [r3, #9]
 800569e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80056a2:	b9b5      	cbnz	r5, 80056d2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80056a4:	7a5d      	ldrb	r5, [r3, #9]
 80056a6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80056a8:	7a5d      	ldrb	r5, [r3, #9]
 80056aa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80056ae:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80056b0:	7a58      	ldrb	r0, [r3, #9]
 80056b2:	4418      	add	r0, r3
 80056b4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80056b6:	7a5a      	ldrb	r2, [r3, #9]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	1c50      	adds	r0, r2, #1
 80056bc:	b2c0      	uxtb	r0, r0
 80056be:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80056c0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80056c2:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80056c4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80056c6:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80056c8:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80056ca:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80056cc:	70cc      	strb	r4, [r1, #3]
 80056ce:	4620      	mov	r0, r4
 80056d0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80056d2:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80056d4:	bd30      	pop	{r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	2000004c 	.word	0x2000004c

080056dc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80056dc:	2200      	movs	r2, #0
 80056de:	f7ff bfdb 	b.w	8005698 <FATFS_LinkDriverEx>
	...

080056e4 <bnO_write>:
	HAL_Delay(10);
	bnO_setMode(mode);
	HAL_Delay(100);
}

int bnO_write(bnO_Registers reg, uint8_t pValue){
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	b086      	sub	sp, #24
	while(HAL_I2C_IsDeviceReady(phi2c, bnO_Address,1,0xff)!= HAL_OK){
 80056e8:	4d10      	ldr	r5, [pc, #64]	; (800572c <bnO_write+0x48>)
int bnO_write(bnO_Registers reg, uint8_t pValue){
 80056ea:	f88d 1017 	strb.w	r1, [sp, #23]
 80056ee:	4606      	mov	r6, r0
	while(HAL_I2C_IsDeviceReady(phi2c, bnO_Address,1,0xff)!= HAL_OK){
 80056f0:	23ff      	movs	r3, #255	; 0xff
 80056f2:	2201      	movs	r2, #1
 80056f4:	2150      	movs	r1, #80	; 0x50
 80056f6:	6828      	ldr	r0, [r5, #0]
 80056f8:	f7fc f964 	bl	80019c4 <HAL_I2C_IsDeviceReady>
 80056fc:	b970      	cbnz	r0, 800571c <bnO_write+0x38>
		HAL_Delay(50);
	}
	if(HAL_I2C_Mem_Write(phi2c, bnO_Address, reg,sizeof(reg), &pValue, sizeof(pValue),0xff) != HAL_OK){
 80056fe:	23ff      	movs	r3, #255	; 0xff
 8005700:	2401      	movs	r4, #1
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	f10d 0317 	add.w	r3, sp, #23
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	9401      	str	r4, [sp, #4]
 800570c:	4623      	mov	r3, r4
 800570e:	4632      	mov	r2, r6
 8005710:	2150      	movs	r1, #80	; 0x50
 8005712:	6828      	ldr	r0, [r5, #0]
 8005714:	f7fb ffb0 	bl	8001678 <HAL_I2C_Mem_Write>
 8005718:	b120      	cbz	r0, 8005724 <bnO_write+0x40>
 800571a:	e7fe      	b.n	800571a <bnO_write+0x36>
		HAL_Delay(50);
 800571c:	2032      	movs	r0, #50	; 0x32
 800571e:	f7fb fba1 	bl	8000e64 <HAL_Delay>
 8005722:	e7e5      	b.n	80056f0 <bnO_write+0xc>
		//error handling
		for(;;);
		return 0;
	}
	return 1;
}
 8005724:	4620      	mov	r0, r4
 8005726:	b006      	add	sp, #24
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	bf00      	nop
 800572c:	20000058 	.word	0x20000058

08005730 <bnO_read>:

signed char bnO_read(bnO_Registers reg){
 8005730:	b510      	push	{r4, lr}
 8005732:	b086      	sub	sp, #24
	uint8_t dataBuffer = 0;
 8005734:	aa06      	add	r2, sp, #24
 8005736:	2400      	movs	r4, #0
 8005738:	f802 4d01 	strb.w	r4, [r2, #-1]!
	if(HAL_I2C_Mem_Read(phi2c, bnO_Address, reg, sizeof(reg), &dataBuffer, sizeof(uint8_t),0xff) != HAL_OK){
 800573c:	23ff      	movs	r3, #255	; 0xff
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	2301      	movs	r3, #1
 8005742:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005746:	4602      	mov	r2, r0
 8005748:	4805      	ldr	r0, [pc, #20]	; (8005760 <bnO_read+0x30>)
 800574a:	2150      	movs	r1, #80	; 0x50
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f7fc f829 	bl	80017a4 <HAL_I2C_Mem_Read>
 8005752:	b908      	cbnz	r0, 8005758 <bnO_read+0x28>
		//error handling
		return 0;
	}
	return dataBuffer;
 8005754:	f89d 4017 	ldrb.w	r4, [sp, #23]
}
 8005758:	b260      	sxtb	r0, r4
 800575a:	b006      	add	sp, #24
 800575c:	bd10      	pop	{r4, pc}
 800575e:	bf00      	nop
 8005760:	20000058 	.word	0x20000058

08005764 <bnO_setMode>:
		return 0;
	}
	return 1;
}

int bnO_setMode(bnO_OPModes mode){
 8005764:	b510      	push	{r4, lr}
	if(bnO_write(BNO055_OPR_MODE_ADDR, mode) != 1){
 8005766:	4601      	mov	r1, r0
 8005768:	203d      	movs	r0, #61	; 0x3d
 800576a:	f7ff ffbb 	bl	80056e4 <bnO_write>
 800576e:	2801      	cmp	r0, #1
 8005770:	4604      	mov	r4, r0
 8005772:	d104      	bne.n	800577e <bnO_setMode+0x1a>
		//hanlde error
		return 0;
	}
	HAL_Delay(50);
 8005774:	2032      	movs	r0, #50	; 0x32
 8005776:	f7fb fb75 	bl	8000e64 <HAL_Delay>
	return 1;
}
 800577a:	4620      	mov	r0, r4
 800577c:	bd10      	pop	{r4, pc}
		return 0;
 800577e:	2400      	movs	r4, #0
 8005780:	e7fb      	b.n	800577a <bnO_setMode+0x16>

08005782 <bnO_setPWRMode>:

int bnO_setPWRMode(bnO_PWRModes mode){
 8005782:	b510      	push	{r4, lr}
	if(bnO_write(BNO055_PWR_MODE_ADDR, mode) != 1){
 8005784:	4601      	mov	r1, r0
 8005786:	203e      	movs	r0, #62	; 0x3e
 8005788:	f7ff ffac 	bl	80056e4 <bnO_write>
 800578c:	2801      	cmp	r0, #1
 800578e:	4604      	mov	r4, r0
 8005790:	d104      	bne.n	800579c <bnO_setPWRMode+0x1a>
		//handle error
		return 0;
	}
	HAL_Delay(50);
 8005792:	2032      	movs	r0, #50	; 0x32
 8005794:	f7fb fb66 	bl	8000e64 <HAL_Delay>
	return 1;
}
 8005798:	4620      	mov	r0, r4
 800579a:	bd10      	pop	{r4, pc}
		return 0;
 800579c:	2400      	movs	r4, #0
 800579e:	e7fb      	b.n	8005798 <bnO_setPWRMode+0x16>

080057a0 <bnO_init>:
void bnO_init(I2C_HandleTypeDef * i2c_handle, bnO_OPModes mode){
 80057a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	phi2c = i2c_handle;
 80057a2:	4b20      	ldr	r3, [pc, #128]	; (8005824 <bnO_init+0x84>)
	volatile uint8_t id = 0;
 80057a4:	2400      	movs	r4, #0
	phi2c = i2c_handle;
 80057a6:	6018      	str	r0, [r3, #0]
	id = bnO_read(BNO055_CHIP_ID_ADDR);
 80057a8:	4620      	mov	r0, r4
void bnO_init(I2C_HandleTypeDef * i2c_handle, bnO_OPModes mode){
 80057aa:	460d      	mov	r5, r1
	volatile uint8_t id = 0;
 80057ac:	f88d 4007 	strb.w	r4, [sp, #7]
	id = bnO_read(BNO055_CHIP_ID_ADDR);
 80057b0:	f7ff ffbe 	bl	8005730 <bnO_read>
	if(id != BNO055_ID){
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <bnO_init+0x88>)
	id = bnO_read(BNO055_CHIP_ID_ADDR);
 80057b6:	b2c0      	uxtb	r0, r0
 80057b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if(id != BNO055_ID){
 80057bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d00b      	beq.n	80057de <bnO_init+0x3e>
		HAL_Delay(300);
 80057c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80057ca:	f7fb fb4b 	bl	8000e64 <HAL_Delay>
		id = bnO_read(BNO055_CHIP_ID_ADDR);
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff ffae 	bl	8005730 <bnO_read>
 80057d4:	b2c0      	uxtb	r0, r0
 80057d6:	f88d 0007 	strb.w	r0, [sp, #7]
		if(id != BNO055_ID){
 80057da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	bnO_setMode(OPERATION_MODE_CONFIG);
 80057de:	2000      	movs	r0, #0
 80057e0:	f7ff ffc0 	bl	8005764 <bnO_setMode>
	bnO_write(BNO055_SYS_TRIGGER_ADDR, 0x20);
 80057e4:	2120      	movs	r1, #32
 80057e6:	203f      	movs	r0, #63	; 0x3f
 80057e8:	f7ff ff7c 	bl	80056e4 <bnO_write>
	HAL_Delay(50);
 80057ec:	2032      	movs	r0, #50	; 0x32
 80057ee:	f7fb fb39 	bl	8000e64 <HAL_Delay>
	bnO_setPWRMode(POWER_MODE_NORMAL);
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7ff ffc5 	bl	8005782 <bnO_setPWRMode>
	HAL_Delay(10);
 80057f8:	200a      	movs	r0, #10
 80057fa:	f7fb fb33 	bl	8000e64 <HAL_Delay>
	bnO_write(BNO055_PAGE_ID_ADDR, 0x0);
 80057fe:	2100      	movs	r1, #0
 8005800:	2007      	movs	r0, #7
 8005802:	f7ff ff6f 	bl	80056e4 <bnO_write>
	bnO_write(BNO055_SYS_TRIGGER_ADDR, 0x0);
 8005806:	2100      	movs	r1, #0
 8005808:	203f      	movs	r0, #63	; 0x3f
 800580a:	f7ff ff6b 	bl	80056e4 <bnO_write>
	HAL_Delay(10);
 800580e:	200a      	movs	r0, #10
 8005810:	f7fb fb28 	bl	8000e64 <HAL_Delay>
	bnO_setMode(mode);
 8005814:	4628      	mov	r0, r5
 8005816:	f7ff ffa5 	bl	8005764 <bnO_setMode>
	HAL_Delay(100);
 800581a:	2064      	movs	r0, #100	; 0x64
 800581c:	f7fb fb22 	bl	8000e64 <HAL_Delay>
}
 8005820:	b003      	add	sp, #12
 8005822:	bd30      	pop	{r4, r5, pc}
 8005824:	20000058 	.word	0x20000058
 8005828:	20000001 	.word	0x20000001

0800582c <bnO_getTemp>:

uint8_t bnO_getTemp(){
 800582c:	b508      	push	{r3, lr}
	uint8_t temp = 0;
	temp = bnO_read(BNO055_TEMP_ADDR);
 800582e:	2034      	movs	r0, #52	; 0x34
 8005830:	f7ff ff7e 	bl	8005730 <bnO_read>
	return temp;
}
 8005834:	b2c0      	uxtb	r0, r0
 8005836:	bd08      	pop	{r3, pc}

08005838 <getCalibrationStatus>:
	volatile char status;
 	status = HAL_I2C_Master_Receive(phi2c,8<<1,data,2,0xff);
 	volatile int x = 0;
}

calib_Status getCalibrationStatus(){
 8005838:	b507      	push	{r0, r1, r2, lr}
	calib_Status Status;
	unsigned char calib = 0;
	calib = bnO_read(BNO055_CALIB_STAT_ADDR);
 800583a:	2035      	movs	r0, #53	; 0x35
 800583c:	f7ff ff78 	bl	8005730 <bnO_read>
 8005840:	b2c3      	uxtb	r3, r0
	Status.SYS = (calib & 0b11000000) >> 6; //SYS
	Status.GYR = (calib & 0b00110000) >> 4; //GYR
	Status.ACC = (calib & 0b00001100) >> 2; //ACC
	Status.MAG = (calib & 0b00000011); //MAG
	return Status;
 8005842:	099a      	lsrs	r2, r3, #6
 8005844:	2000      	movs	r0, #0
 8005846:	f362 0007 	bfi	r0, r2, #0, #8
 800584a:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800584e:	f362 200f 	bfi	r0, r2, #8, #8
 8005852:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8005856:	f362 4017 	bfi	r0, r2, #16, #8
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	f363 601f 	bfi	r0, r3, #24, #8
}
 8005862:	b003      	add	sp, #12
 8005864:	f85d fb04 	ldr.w	pc, [sp], #4

08005868 <getGravVector>:
	Mag.Y = (float)twosCompliment((MSB[1]<<8) | (LSB[1]))/16.0;
	Mag.Z = (float)twosCompliment((MSB[2]<<8) | (LSB[2]))/16.0;
	return Mag;
}

vector getGravVector(){
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	ed2d 8b02 	vpush	{d8}
	vector Grav;
	volatile char LSB[3];
	volatile char MSB[3];
	for(int i = 0; i < 3; i++){
 800586e:	2500      	movs	r5, #0
vector getGravVector(){
 8005870:	b08a      	sub	sp, #40	; 0x28
 8005872:	b2ec      	uxtb	r4, r5
		LSB[i] = bnO_read(46+(i*2));
 8005874:	f104 0017 	add.w	r0, r4, #23
 8005878:	0040      	lsls	r0, r0, #1
 800587a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800587e:	f7ff ff57 	bl	8005730 <bnO_read>
 8005882:	ab0a      	add	r3, sp, #40	; 0x28
 8005884:	195e      	adds	r6, r3, r5
 8005886:	b2c0      	uxtb	r0, r0
 8005888:	f806 0c14 	strb.w	r0, [r6, #-20]
		MSB[i] = bnO_read(47+(i*2));
 800588c:	0060      	lsls	r0, r4, #1
 800588e:	302f      	adds	r0, #47	; 0x2f
 8005890:	b2c0      	uxtb	r0, r0
 8005892:	f7ff ff4d 	bl	8005730 <bnO_read>
	for(int i = 0; i < 3; i++){
 8005896:	3501      	adds	r5, #1
		MSB[i] = bnO_read(47+(i*2));
 8005898:	b2c0      	uxtb	r0, r0
	for(int i = 0; i < 3; i++){
 800589a:	2d03      	cmp	r5, #3
		MSB[i] = bnO_read(47+(i*2));
 800589c:	f806 0c10 	strb.w	r0, [r6, #-16]
	for(int i = 0; i < 3; i++){
 80058a0:	d1e7      	bne.n	8005872 <getGravVector+0xa>
	}
	Grav.X = (float)twosCompliment((MSB[0]<<8) | (LSB[0]))/100.0;
 80058a2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80058a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80058aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80058ae:	f000 f92f 	bl	8005b10 <twosCompliment>
 80058b2:	ee08 0a90 	vmov	s17, r0
	Grav.Y = (float)twosCompliment((MSB[1]<<8) | (LSB[1]))/100.0;
 80058b6:	f89d 0019 	ldrb.w	r0, [sp, #25]
 80058ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80058be:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80058c2:	f000 f925 	bl	8005b10 <twosCompliment>
 80058c6:	ee08 0a10 	vmov	s16, r0
	Grav.Z = (float)twosCompliment((MSB[2]<<8) | (LSB[2]))/100.0;
 80058ca:	f89d 001a 	ldrb.w	r0, [sp, #26]
 80058ce:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80058d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80058d6:	f000 f91b 	bl	8005b10 <twosCompliment>
 80058da:	ee07 0a10 	vmov	s14, r0
	Grav.X = (float)twosCompliment((MSB[0]<<8) | (LSB[0]))/100.0;
 80058de:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005904 <getGravVector+0x9c>
 80058e2:	eeb8 0ae8 	vcvt.f32.s32	s0, s17
	Grav.Y = (float)twosCompliment((MSB[1]<<8) | (LSB[1]))/100.0;
 80058e6:	eef8 0ac8 	vcvt.f32.s32	s1, s16
	Grav.Z = (float)twosCompliment((MSB[2]<<8) | (LSB[2]))/100.0;
 80058ea:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
	return Grav;
}
 80058ee:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80058f2:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 80058f6:	ee81 1a27 	vdiv.f32	s2, s2, s15
 80058fa:	b00a      	add	sp, #40	; 0x28
 80058fc:	ecbd 8b02 	vpop	{d8}
 8005900:	bd70      	pop	{r4, r5, r6, pc}
 8005902:	bf00      	nop
 8005904:	42c80000 	.word	0x42c80000

08005908 <SD_Config>:
#include "main.h"
#include <stdio.h>
/*@brief mounts sd card
 * @ret return 1 if succesful 0 if unsucessfull
 */
int SD_Config(){
 8005908:	b508      	push	{r3, lr}
	if(f_mount(&myFatFS,SDPath,1) == FR_OK){
 800590a:	2201      	movs	r2, #1
 800590c:	4903      	ldr	r1, [pc, #12]	; (800591c <SD_Config+0x14>)
 800590e:	4804      	ldr	r0, [pc, #16]	; (8005920 <SD_Config+0x18>)
 8005910:	f7ff fa0e 	bl	8004d30 <f_mount>
		return 1;
	}
	return 0;
}
 8005914:	fab0 f080 	clz	r0, r0
 8005918:	0940      	lsrs	r0, r0, #5
 800591a:	bd08      	pop	{r3, pc}
 800591c:	200004e1 	.word	0x200004e1
 8005920:	20000080 	.word	0x20000080

08005924 <createFile>:

int createFile(char name[]){
 8005924:	b510      	push	{r4, lr}
	if(f_open(&fileObj, name, FA_CREATE_NEW) == FR_OK){
 8005926:	4601      	mov	r1, r0
 8005928:	2204      	movs	r2, #4
 800592a:	4806      	ldr	r0, [pc, #24]	; (8005944 <createFile+0x20>)
 800592c:	f7ff fa34 	bl	8004d98 <f_open>
 8005930:	4604      	mov	r4, r0
 8005932:	b920      	cbnz	r0, 800593e <createFile+0x1a>
		f_close(&fileObj);
 8005934:	4803      	ldr	r0, [pc, #12]	; (8005944 <createFile+0x20>)
 8005936:	f7ff fc87 	bl	8005248 <f_close>
		return 0;
 800593a:	4620      	mov	r0, r4
 800593c:	bd10      	pop	{r4, pc}
	}
	return 1;
 800593e:	2001      	movs	r0, #1
}
 8005940:	bd10      	pop	{r4, pc}
 8005942:	bf00      	nop
 8005944:	200002b0 	.word	0x200002b0

08005948 <formattedWriteFloat>:
		f_close(&fileObj);
	}
	return bytesWritten;
}

UINT formattedWriteFloat(char name[], float data[], int size){
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UINT bytesWritten = 0;
	RTC_TimeTypeDef RTC_Time;
	RTC_DateTypeDef RTC_Date;
	volatile FRESULT FR= f_open(&fileObj, name, FA_WRITE | FA_OPEN_APPEND);
 800594c:	4c44      	ldr	r4, [pc, #272]	; (8005a60 <formattedWriteFloat+0x118>)
UINT formattedWriteFloat(char name[], float data[], int size){
 800594e:	b08f      	sub	sp, #60	; 0x3c
 8005950:	4607      	mov	r7, r0
 8005952:	4688      	mov	r8, r1
 8005954:	4616      	mov	r6, r2
	volatile FRESULT FR= f_open(&fileObj, name, FA_WRITE | FA_OPEN_APPEND);
 8005956:	4601      	mov	r1, r0
 8005958:	2232      	movs	r2, #50	; 0x32
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff fa1c 	bl	8004d98 <f_open>
 8005960:	f88d 000b 	strb.w	r0, [sp, #11]
	if(FR == FR_OK){
 8005964:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005968:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800596c:	2b00      	cmp	r3, #0
 800596e:	d16b      	bne.n	8005a48 <formattedWriteFloat+0x100>
		f_lseek(&fileObj, f_size(&fileObj));
 8005970:	68e1      	ldr	r1, [r4, #12]
		f_printf(&fileObj,"%d/%d/%d,",RTC_Date.Date,RTC_Date.Month,RTC_Date.Year);
		f_printf(&fileObj,"%d:%d:%d,",RTC_Time.Hours,RTC_Time.Minutes,RTC_Time.Seconds);
		for(int i = 0; i < size; i++){
			char buffer[20];
			floatToString(data[i],buffer);
			int test = f_printf(&fileObj,"%s",buffer);
 8005972:	f8df a104 	ldr.w	sl, [pc, #260]	; 8005a78 <formattedWriteFloat+0x130>
			if(test){
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
 8005976:	f8df b104 	ldr.w	fp, [pc, #260]	; 8005a7c <formattedWriteFloat+0x134>
		f_lseek(&fileObj, f_size(&fileObj));
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fc75 	bl	800526a <f_lseek>
		HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8005980:	462a      	mov	r2, r5
 8005982:	a904      	add	r1, sp, #16
 8005984:	4837      	ldr	r0, [pc, #220]	; (8005a64 <formattedWriteFloat+0x11c>)
 8005986:	f7fd fb0f 	bl	8002fa8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
 800598a:	462a      	mov	r2, r5
 800598c:	a903      	add	r1, sp, #12
 800598e:	4835      	ldr	r0, [pc, #212]	; (8005a64 <formattedWriteFloat+0x11c>)
 8005990:	f7fd fb32 	bl	8002ff8 <HAL_RTC_GetDate>
		f_printf(&fileObj,"%d/%d/%d,",RTC_Date.Date,RTC_Date.Month,RTC_Date.Year);
 8005994:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8005998:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800599c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80059a0:	9100      	str	r1, [sp, #0]
 80059a2:	4620      	mov	r0, r4
 80059a4:	4930      	ldr	r1, [pc, #192]	; (8005a68 <formattedWriteFloat+0x120>)
 80059a6:	f7ff fd7d 	bl	80054a4 <f_printf>
		f_printf(&fileObj,"%d:%d:%d,",RTC_Time.Hours,RTC_Time.Minutes,RTC_Time.Seconds);
 80059aa:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80059ae:	9100      	str	r1, [sp, #0]
 80059b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80059b4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80059b8:	492c      	ldr	r1, [pc, #176]	; (8005a6c <formattedWriteFloat+0x124>)
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff fd72 	bl	80054a4 <f_printf>
 80059c0:	46c1      	mov	r9, r8
		for(int i = 0; i < size; i++){
 80059c2:	42b5      	cmp	r5, r6
 80059c4:	db0c      	blt.n	80059e0 <formattedWriteFloat+0x98>
			}
			if(i != size-1){
				f_printf(&fileObj,",");
			}
		}
		f_printf(&fileObj,"\n");
 80059c6:	492a      	ldr	r1, [pc, #168]	; (8005a70 <formattedWriteFloat+0x128>)
 80059c8:	4825      	ldr	r0, [pc, #148]	; (8005a60 <formattedWriteFloat+0x118>)
 80059ca:	f7ff fd6b 	bl	80054a4 <f_printf>
		FR = f_close(&fileObj);
 80059ce:	4824      	ldr	r0, [pc, #144]	; (8005a60 <formattedWriteFloat+0x118>)
 80059d0:	f7ff fc3a 	bl	8005248 <f_close>
 80059d4:	f88d 000b 	strb.w	r0, [sp, #11]
		HAL_Delay(100);
		SD_Config();
		formattedWriteFloat(name, data,size);
	}
	return bytesWritten;
}
 80059d8:	2000      	movs	r0, #0
 80059da:	b00f      	add	sp, #60	; 0x3c
 80059dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			floatToString(data[i],buffer);
 80059e0:	f859 0b04 	ldr.w	r0, [r9], #4
 80059e4:	f7fa fd74 	bl	80004d0 <__aeabi_f2d>
 80059e8:	ec41 0b10 	vmov	d0, r0, r1
 80059ec:	a809      	add	r0, sp, #36	; 0x24
 80059ee:	f000 f8d7 	bl	8005ba0 <floatToString>
			int test = f_printf(&fileObj,"%s",buffer);
 80059f2:	aa09      	add	r2, sp, #36	; 0x24
 80059f4:	4651      	mov	r1, sl
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff fd54 	bl	80054a4 <f_printf>
			if(test){
 80059fc:	b1d0      	cbz	r0, 8005a34 <formattedWriteFloat+0xec>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
 80059fe:	2201      	movs	r2, #1
 8005a00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a04:	4658      	mov	r0, fp
 8005a06:	f7fb fbfb 	bl	8001200 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8005a0a:	200a      	movs	r0, #10
 8005a0c:	f7fb fa2a 	bl	8000e64 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_RESET);
 8005a10:	4658      	mov	r0, fp
 8005a12:	2200      	movs	r2, #0
 8005a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a18:	f7fb fbf2 	bl	8001200 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8005a1c:	200a      	movs	r0, #10
 8005a1e:	f7fb fa21 	bl	8000e64 <HAL_Delay>
			if(i != size-1){
 8005a22:	1e73      	subs	r3, r6, #1
 8005a24:	429d      	cmp	r5, r3
 8005a26:	d003      	beq.n	8005a30 <formattedWriteFloat+0xe8>
				f_printf(&fileObj,",");
 8005a28:	4912      	ldr	r1, [pc, #72]	; (8005a74 <formattedWriteFloat+0x12c>)
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f7ff fd3a 	bl	80054a4 <f_printf>
		for(int i = 0; i < size; i++){
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7c6      	b.n	80059c2 <formattedWriteFloat+0x7a>
				HAL_Delay(1000);
 8005a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a38:	f7fb fa14 	bl	8000e64 <HAL_Delay>
				formattedWriteFloat(name, data,size);
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4641      	mov	r1, r8
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff ff81 	bl	8005948 <formattedWriteFloat>
 8005a46:	e7ec      	b.n	8005a22 <formattedWriteFloat+0xda>
		HAL_Delay(100);
 8005a48:	2064      	movs	r0, #100	; 0x64
 8005a4a:	f7fb fa0b 	bl	8000e64 <HAL_Delay>
		SD_Config();
 8005a4e:	f7ff ff5b 	bl	8005908 <SD_Config>
		formattedWriteFloat(name, data,size);
 8005a52:	4632      	mov	r2, r6
 8005a54:	4641      	mov	r1, r8
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff ff76 	bl	8005948 <formattedWriteFloat>
 8005a5c:	e7bc      	b.n	80059d8 <formattedWriteFloat+0x90>
 8005a5e:	bf00      	nop
 8005a60:	200002b0 	.word	0x200002b0
 8005a64:	20000060 	.word	0x20000060
 8005a68:	080064cf 	.word	0x080064cf
 8005a6c:	080064d9 	.word	0x080064d9
 8005a70:	080064e9 	.word	0x080064e9
 8005a74:	080064d7 	.word	0x080064d7
 8005a78:	080064e3 	.word	0x080064e3
 8005a7c:	40020800 	.word	0x40020800

08005a80 <writeString>:

UINT writeString(char name[], char data[]){
 8005a80:	b538      	push	{r3, r4, r5, lr}
	UINT bytesWritten = 0;
	if(f_open(&fileObj, name, FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 8005a82:	4c0d      	ldr	r4, [pc, #52]	; (8005ab8 <writeString+0x38>)
UINT writeString(char name[], char data[]){
 8005a84:	460d      	mov	r5, r1
	if(f_open(&fileObj, name, FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 8005a86:	2232      	movs	r2, #50	; 0x32
 8005a88:	4601      	mov	r1, r0
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7ff f984 	bl	8004d98 <f_open>
 8005a90:	b978      	cbnz	r0, 8005ab2 <writeString+0x32>
		f_lseek(&fileObj, f_size(&fileObj));
 8005a92:	68e1      	ldr	r1, [r4, #12]
 8005a94:	4620      	mov	r0, r4
 8005a96:	f7ff fbe8 	bl	800526a <f_lseek>
		f_printf(&fileObj,"%s",data);
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <writeString+0x3c>)
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fd00 	bl	80054a4 <f_printf>
		f_printf(&fileObj,"\n");
 8005aa4:	4906      	ldr	r1, [pc, #24]	; (8005ac0 <writeString+0x40>)
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7ff fcfc 	bl	80054a4 <f_printf>
		f_close(&fileObj);
 8005aac:	4620      	mov	r0, r4
 8005aae:	f7ff fbcb 	bl	8005248 <f_close>
	}
	return bytesWritten;
}
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	bd38      	pop	{r3, r4, r5, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200002b0 	.word	0x200002b0
 8005abc:	080064e3 	.word	0x080064e3
 8005ac0:	080064e9 	.word	0x080064e9

08005ac4 <getFileSize>:


char getFileSize(char fileName[]){
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
	FIL sizeObj;
	f_open(&sizeObj,fileName,FA_READ);
 8005aca:	4601      	mov	r1, r0
 8005acc:	2201      	movs	r2, #1
 8005ace:	4668      	mov	r0, sp
 8005ad0:	f7ff f962 	bl	8004d98 <f_open>
	char size = (int)f_size(&sizeObj);
	f_close(&sizeObj);
 8005ad4:	4668      	mov	r0, sp
	char size = (int)f_size(&sizeObj);
 8005ad6:	f89d 400c 	ldrb.w	r4, [sp, #12]
	f_close(&sizeObj);
 8005ada:	f7ff fbb5 	bl	8005248 <f_close>
	return size;
}
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
 8005ae4:	bd10      	pop	{r4, pc}
	...

08005ae8 <initFileSystem>:

int initFileSystem(){
 8005ae8:	b508      	push	{r3, lr}
	SD_Config();
 8005aea:	f7ff ff0d 	bl	8005908 <SD_Config>
	createFile("GravData.csv");
 8005aee:	4806      	ldr	r0, [pc, #24]	; (8005b08 <initFileSystem+0x20>)
 8005af0:	f7ff ff18 	bl	8005924 <createFile>
	if(getFileSize("GravData.csv") < 1){
 8005af4:	4804      	ldr	r0, [pc, #16]	; (8005b08 <initFileSystem+0x20>)
 8005af6:	f7ff ffe5 	bl	8005ac4 <getFileSize>
 8005afa:	b918      	cbnz	r0, 8005b04 <initFileSystem+0x1c>
		writeString("GravData.csv","Date,Time,GravX,GravY,GravZ,Calibration Status,BNO Temp");
 8005afc:	4903      	ldr	r1, [pc, #12]	; (8005b0c <initFileSystem+0x24>)
 8005afe:	4802      	ldr	r0, [pc, #8]	; (8005b08 <initFileSystem+0x20>)
 8005b00:	f7ff ffbe 	bl	8005a80 <writeString>
	}
	return 1;
}
 8005b04:	2001      	movs	r0, #1
 8005b06:	bd08      	pop	{r3, pc}
 8005b08:	080064eb 	.word	0x080064eb
 8005b0c:	080064f8 	.word	0x080064f8

08005b10 <twosCompliment>:
	  }
}



int twosCompliment(volatile int data){
 8005b10:	b082      	sub	sp, #8
 8005b12:	9001      	str	r0, [sp, #4]
	if(data > 32768){
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1a:	dd0b      	ble.n	8005b34 <twosCompliment+0x24>
		data = data ^ 0b1111111111111111;
 8005b1c:	9b01      	ldr	r3, [sp, #4]
 8005b1e:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8005b22:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8005b26:	9301      	str	r3, [sp, #4]
		data = data+1;
 8005b28:	9b01      	ldr	r3, [sp, #4]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	9301      	str	r3, [sp, #4]
		data = data * -1;
 8005b2e:	9b01      	ldr	r3, [sp, #4]
 8005b30:	425b      	negs	r3, r3
 8005b32:	9301      	str	r3, [sp, #4]
	}
	return data;
 8005b34:	9801      	ldr	r0, [sp, #4]
}
 8005b36:	b002      	add	sp, #8
 8005b38:	4770      	bx	lr

08005b3a <intToString>:

int intToString(int intVal, char * buffer,int len,int negative){
 8005b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = 0;
	char temp[20];
	if(intVal < 0){
 8005b3c:	1e04      	subs	r4, r0, #0
int intToString(int intVal, char * buffer,int len,int negative){
 8005b3e:	b087      	sub	sp, #28
		negative = 1;
		intVal*=-1;
 8005b40:	bfbc      	itt	lt
 8005b42:	4264      	neglt	r4, r4
		negative = 1;
 8005b44:	2301      	movlt	r3, #1
 8005b46:	2500      	movs	r5, #0
	}
	while(intVal  > 0){
		if(intVal>=0){
			temp[i++] = (intVal%10) + '0';
 8005b48:	af01      	add	r7, sp, #4
 8005b4a:	200a      	movs	r0, #10
	while(intVal  > 0){
 8005b4c:	b9a4      	cbnz	r4, 8005b78 <intToString+0x3e>
			intVal = intVal/10;
		}
	}
	while(i < len){
			temp[i++] = '0';
 8005b4e:	ae01      	add	r6, sp, #4
 8005b50:	2730      	movs	r7, #48	; 0x30
	while(i < len){
 8005b52:	4295      	cmp	r5, r2
 8005b54:	4628      	mov	r0, r5
 8005b56:	db18      	blt.n	8005b8a <intToString+0x50>
	}
	if(negative){
 8005b58:	b12b      	cbz	r3, 8005b66 <intToString+0x2c>
			temp[i++] = '-';
 8005b5a:	ab06      	add	r3, sp, #24
 8005b5c:	442b      	add	r3, r5
 8005b5e:	222d      	movs	r2, #45	; 0x2d
 8005b60:	f803 2c14 	strb.w	r2, [r3, #-20]
 8005b64:	3001      	adds	r0, #1
 8005b66:	4401      	add	r1, r0
 8005b68:	460b      	mov	r3, r1
	}
	for(int j = 0; j < i;j++){
		buffer[i-1-j] = temp[j];
 8005b6a:	aa01      	add	r2, sp, #4
	for(int j = 0; j < i;j++){
 8005b6c:	42a0      	cmp	r0, r4
 8005b6e:	dc0f      	bgt.n	8005b90 <intToString+0x56>
	}
	buffer[i] = '\0';
 8005b70:	2300      	movs	r3, #0
 8005b72:	700b      	strb	r3, [r1, #0]
	return i;
}
 8005b74:	b007      	add	sp, #28
 8005b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp[i++] = (intVal%10) + '0';
 8005b78:	fb94 f6f0 	sdiv	r6, r4, r0
 8005b7c:	fb00 4416 	mls	r4, r0, r6, r4
 8005b80:	3430      	adds	r4, #48	; 0x30
 8005b82:	55ec      	strb	r4, [r5, r7]
			intVal = intVal/10;
 8005b84:	4634      	mov	r4, r6
 8005b86:	3501      	adds	r5, #1
 8005b88:	e7e0      	b.n	8005b4c <intToString+0x12>
			temp[i++] = '0';
 8005b8a:	55af      	strb	r7, [r5, r6]
 8005b8c:	3501      	adds	r5, #1
 8005b8e:	e7e0      	b.n	8005b52 <intToString+0x18>
		buffer[i-1-j] = temp[j];
 8005b90:	5ca5      	ldrb	r5, [r4, r2]
 8005b92:	f803 5d01 	strb.w	r5, [r3, #-1]!
	for(int j = 0; j < i;j++){
 8005b96:	3401      	adds	r4, #1
 8005b98:	e7e8      	b.n	8005b6c <intToString+0x32>
 8005b9a:	0000      	movs	r0, r0
 8005b9c:	0000      	movs	r0, r0
	...

08005ba0 <floatToString>:
void floatToString(double number, char buffer[]){
 8005ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba4:	ec57 6b10 	vmov	r6, r7, d0
 8005ba8:	b086      	sub	sp, #24
 8005baa:	4605      	mov	r5, r0
	int intVal = (int)number;
 8005bac:	4639      	mov	r1, r7
 8005bae:	ee10 0a10 	vmov	r0, s0
 8005bb2:	f7fa ff7b 	bl	8000aac <__aeabi_d2iz>
	int negative = 0;
	if(number < 0)
 8005bb6:	4639      	mov	r1, r7
	int intVal = (int)number;
 8005bb8:	4680      	mov	r8, r0
	if(number < 0)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7fa ff4c 	bl	8000a5c <__aeabi_dcmplt>
		negative = 1;
	int place = intToString(intVal,buffer,1,negative);
 8005bc4:	1c03      	adds	r3, r0, #0
 8005bc6:	bf18      	it	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f7ff ffb3 	bl	8005b3a <intToString>
	char temp[20];
	buffer[place] = '.';
 8005bd4:	232e      	movs	r3, #46	; 0x2e
 8005bd6:	542b      	strb	r3, [r5, r0]
	int place = intToString(intVal,buffer,1,negative);
 8005bd8:	4604      	mov	r4, r0
	number -= intVal;
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f7fa fc66 	bl	80004ac <__aeabi_i2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa fb12 	bl	8000210 <__aeabi_dsub>
	if(number>0){
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
	number -= intVal;
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	460f      	mov	r7, r1
	if(number>0){
 8005bf4:	f7fa ff50 	bl	8000a98 <__aeabi_dcmpgt>
 8005bf8:	b1a8      	cbz	r0, 8005c26 <floatToString+0x86>
		number*=100000.0;
 8005bfa:	a311      	add	r3, pc, #68	; (adr r3, 8005c40 <floatToString+0xa0>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
	}else{
		number*=-100000.0;
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	f7fa fcb8 	bl	8000578 <__aeabi_dmul>
	}
	int place2 = intToString((int)number, temp,5,0);
 8005c08:	f7fa ff50 	bl	8000aac <__aeabi_d2iz>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2205      	movs	r2, #5
 8005c10:	a901      	add	r1, sp, #4
 8005c12:	f7ff ff92 	bl	8005b3a <intToString>
	int i = place+1;
	for(i = place+1; i < place+2+place2; i++){
 8005c16:	1ca2      	adds	r2, r4, #2
	int i = place+1;
 8005c18:	1c63      	adds	r3, r4, #1
	for(i = place+1; i < place+2+place2; i++){
 8005c1a:	4410      	add	r0, r2
 8005c1c:	4283      	cmp	r3, r0
 8005c1e:	db06      	blt.n	8005c2e <floatToString+0x8e>
		buffer[i] = temp[i-place-1];
	}
}
 8005c20:	b006      	add	sp, #24
 8005c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		number*=-100000.0;
 8005c26:	a308      	add	r3, pc, #32	; (adr r3, 8005c48 <floatToString+0xa8>)
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	e7e8      	b.n	8005c00 <floatToString+0x60>
		buffer[i] = temp[i-place-1];
 8005c2e:	1b1a      	subs	r2, r3, r4
 8005c30:	a901      	add	r1, sp, #4
 8005c32:	440a      	add	r2, r1
 8005c34:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8005c38:	54ea      	strb	r2, [r5, r3]
	for(i = place+1; i < place+2+place2; i++){
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	e7ee      	b.n	8005c1c <floatToString+0x7c>
 8005c3e:	bf00      	nop
 8005c40:	00000000 	.word	0x00000000
 8005c44:	40f86a00 	.word	0x40f86a00
 8005c48:	00000000 	.word	0x00000000
 8005c4c:	c0f86a00 	.word	0xc0f86a00

08005c50 <logGravData>:

void logGravData(){
 8005c50:	b500      	push	{lr}
 8005c52:	b08b      	sub	sp, #44	; 0x2c
	volatile vector grav;
	calib_Status calib;
	calib = getCalibrationStatus();
 8005c54:	f7ff fdf0 	bl	8005838 <getCalibrationStatus>
 8005c58:	9001      	str	r0, [sp, #4]
	grav = getGravVector();
 8005c5a:	f7ff fe05 	bl	8005868 <getGravVector>
 8005c5e:	ed8d 0a02 	vstr	s0, [sp, #8]
 8005c62:	edcd 0a03 	vstr	s1, [sp, #12]
 8005c66:	ed8d 1a04 	vstr	s2, [sp, #16]
	float gravArray[5] = {grav.X,grav.Y,grav.Z,calib.ACC,bnO_getTemp()};
 8005c6a:	9b02      	ldr	r3, [sp, #8]
 8005c6c:	9305      	str	r3, [sp, #20]
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	9306      	str	r3, [sp, #24]
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	9307      	str	r3, [sp, #28]
 8005c76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	edcd 7a08 	vstr	s15, [sp, #32]
 8005c86:	f7ff fdd1 	bl	800582c <bnO_getTemp>
 8005c8a:	ee07 0a90 	vmov	s15, r0
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	formattedWriteFloat("GravData.csv",gravArray,5);
 8005c92:	2205      	movs	r2, #5
 8005c94:	a905      	add	r1, sp, #20
 8005c96:	4804      	ldr	r0, [pc, #16]	; (8005ca8 <logGravData+0x58>)
	float gravArray[5] = {grav.X,grav.Y,grav.Z,calib.ACC,bnO_getTemp()};
 8005c98:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
	formattedWriteFloat("GravData.csv",gravArray,5);
 8005c9c:	f7ff fe54 	bl	8005948 <formattedWriteFloat>
}
 8005ca0:	b00b      	add	sp, #44	; 0x2c
 8005ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ca6:	bf00      	nop
 8005ca8:	080064eb 	.word	0x080064eb

08005cac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005cac:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8005cae:	2001      	movs	r0, #1
 8005cb0:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8005cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d102      	bne.n	8005cc2 <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8005cbc:	4802      	ldr	r0, [pc, #8]	; (8005cc8 <BSP_SD_Init+0x1c>)
 8005cbe:	f7fd fd3d 	bl	800373c <HAL_SD_Init>
}
 8005cc2:	b003      	add	sp, #12
 8005cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc8:	2000099c 	.word	0x2000099c

08005ccc <BSP_SD_ReadBlocks>:
{
 8005ccc:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <BSP_SD_ReadBlocks+0x1c>)
 8005cd8:	f7fd f9cc 	bl	8003074 <HAL_SD_ReadBlocks>
}
 8005cdc:	3000      	adds	r0, #0
 8005cde:	bf18      	it	ne
 8005ce0:	2001      	movne	r0, #1
 8005ce2:	b003      	add	sp, #12
 8005ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ce8:	2000099c 	.word	0x2000099c

08005cec <BSP_SD_WriteBlocks>:
{
 8005cec:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	4804      	ldr	r0, [pc, #16]	; (8005d08 <BSP_SD_WriteBlocks+0x1c>)
 8005cf8:	f7fd fa99 	bl	800322e <HAL_SD_WriteBlocks>
}
 8005cfc:	3000      	adds	r0, #0
 8005cfe:	bf18      	it	ne
 8005d00:	2001      	movne	r0, #1
 8005d02:	b003      	add	sp, #12
 8005d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d08:	2000099c 	.word	0x2000099c

08005d0c <BSP_SD_GetCardState>:
{
 8005d0c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d0e:	4803      	ldr	r0, [pc, #12]	; (8005d1c <BSP_SD_GetCardState+0x10>)
 8005d10:	f7fd fd40 	bl	8003794 <HAL_SD_GetCardState>
}
 8005d14:	3804      	subs	r0, #4
 8005d16:	bf18      	it	ne
 8005d18:	2001      	movne	r0, #1
 8005d1a:	bd08      	pop	{r3, pc}
 8005d1c:	2000099c 	.word	0x2000099c

08005d20 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005d20:	4601      	mov	r1, r0
 8005d22:	4801      	ldr	r0, [pc, #4]	; (8005d28 <BSP_SD_GetCardInfo+0x8>)
 8005d24:	f7fd bd24 	b.w	8003770 <HAL_SD_GetCardInfo>
 8005d28:	2000099c 	.word	0x2000099c

08005d2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005d2c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d2e:	4903      	ldr	r1, [pc, #12]	; (8005d3c <MX_FATFS_Init+0x10>)
 8005d30:	4803      	ldr	r0, [pc, #12]	; (8005d40 <MX_FATFS_Init+0x14>)
 8005d32:	f7ff fcd3 	bl	80056dc <FATFS_LinkDriver>
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <MX_FATFS_Init+0x18>)
 8005d38:	7018      	strb	r0, [r3, #0]
 8005d3a:	bd08      	pop	{r3, pc}
 8005d3c:	200004e1 	.word	0x200004e1
 8005d40:	08006530 	.word	0x08006530
 8005d44:	200004e0 	.word	0x200004e0

08005d48 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8005d48:	2000      	movs	r0, #0
 8005d4a:	4770      	bx	lr

08005d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	b0ac      	sub	sp, #176	; 0xb0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d50:	2234      	movs	r2, #52	; 0x34
 8005d52:	2100      	movs	r1, #0
 8005d54:	a808      	add	r0, sp, #32
 8005d56:	f000 fb5f 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d5a:	2214      	movs	r2, #20
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	a803      	add	r0, sp, #12
 8005d60:	f000 fb5a 	bl	8006418 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d64:	2100      	movs	r1, #0
 8005d66:	225c      	movs	r2, #92	; 0x5c
 8005d68:	a815      	add	r0, sp, #84	; 0x54
 8005d6a:	f000 fb55 	bl	8006418 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d6e:	2400      	movs	r4, #0
 8005d70:	4b22      	ldr	r3, [pc, #136]	; (8005dfc <SystemClock_Config+0xb0>)
 8005d72:	9401      	str	r4, [sp, #4]
 8005d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005d88:	9402      	str	r4, [sp, #8]
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	6813      	ldr	r3, [r2, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8005d98:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005d9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d9e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005da0:	2210      	movs	r2, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005da2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005da4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005da6:	230a      	movs	r3, #10
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005da8:	2208      	movs	r2, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005daa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005dac:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005dae:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005db0:	2248      	movs	r2, #72	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005db2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005db4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005db6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005db8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005dba:	2203      	movs	r2, #3
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dbc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005dbe:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dc0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005dc2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005dc4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005dc6:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dc8:	f7fc fdf0 	bl	80029ac <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dcc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005dce:	4621      	mov	r1, r4
 8005dd0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dd2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005dd4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dd6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005dd8:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dda:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005ddc:	f7fc face 	bl	800237c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDIO
 8005de0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005de4:	9315      	str	r3, [sp, #84]	; 0x54
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005de6:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dec:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005dee:	942a      	str	r4, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005df0:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005df2:	f7fc fb8b 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005df6:	b02c      	add	sp, #176	; 0xb0
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40007000 	.word	0x40007000

08005e04 <main>:
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8005e08:	f7fb f800 	bl	8000e0c <HAL_Init>
  SystemClock_Config();
 8005e0c:	f7ff ff9e 	bl	8005d4c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	2214      	movs	r2, #20
 8005e12:	2100      	movs	r1, #0
 8005e14:	eb0d 0002 	add.w	r0, sp, r2

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e18:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e1a:	f000 fafd 	bl	8006418 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e1e:	4b54      	ldr	r3, [pc, #336]	; (8005f70 <main+0x16c>)
 8005e20:	9401      	str	r4, [sp, #4]
 8005e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8005e24:	4853      	ldr	r0, [pc, #332]	; (8005f74 <main+0x170>)
  hi2c1.Instance = I2C1;
 8005e26:	4d54      	ldr	r5, [pc, #336]	; (8005f78 <main+0x174>)
  hrtc.Instance = RTC;
 8005e28:	4e54      	ldr	r6, [pc, #336]	; (8005f7c <main+0x178>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e2a:	f042 0204 	orr.w	r2, r2, #4
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e32:	f002 0204 	and.w	r2, r2, #4
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e3a:	9402      	str	r4, [sp, #8]
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3e:	f042 0202 	orr.w	r2, r2, #2
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
 8005e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e46:	f002 0202 	and.w	r2, r2, #2
 8005e4a:	9202      	str	r2, [sp, #8]
 8005e4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e4e:	9403      	str	r4, [sp, #12]
 8005e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
 8005e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e5a:	f002 0201 	and.w	r2, r2, #1
 8005e5e:	9203      	str	r2, [sp, #12]
 8005e60:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e62:	9404      	str	r4, [sp, #16]
 8005e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e66:	f042 0208 	orr.w	r2, r2, #8
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8005e72:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e74:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8005e76:	f44f 6180 	mov.w	r1, #1024	; 0x400

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e7a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e7c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8005e7e:	f7fb f9bf 	bl	8001200 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e86:	a905      	add	r1, sp, #20
 8005e88:	483a      	ldr	r0, [pc, #232]	; (8005f74 <main+0x170>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e8c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e90:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e92:	f7fb f8db 	bl	800104c <HAL_GPIO_Init>
  hcan1.Instance = CAN1;
 8005e96:	483a      	ldr	r0, [pc, #232]	; (8005f80 <main+0x17c>)
  hcan1.Init.Prescaler = 16;
 8005e98:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <main+0x180>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005e9a:	6084      	str	r4, [r0, #8]
  hcan1.Init.Prescaler = 16;
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	e880 000c 	stmia.w	r0, {r2, r3}
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005ea2:	60c4      	str	r4, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8005ea4:	6104      	str	r4, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8005ea6:	6144      	str	r4, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005ea8:	7604      	strb	r4, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005eaa:	7644      	strb	r4, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005eac:	7684      	strb	r4, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005eae:	76c4      	strb	r4, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005eb0:	7704      	strb	r4, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005eb2:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005eb4:	f7fa ffea 	bl	8000e8c <HAL_CAN_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8005eb8:	4933      	ldr	r1, [pc, #204]	; (8005f88 <main+0x184>)
 8005eba:	4b34      	ldr	r3, [pc, #208]	; (8005f8c <main+0x188>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ebc:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8005ebe:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ec2:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ec8:	612b      	str	r3, [r5, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8005eca:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ecc:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ece:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ed0:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ed2:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ed4:	f7fb fb62 	bl	800159c <HAL_I2C_Init>
  hsd.Instance = SDIO;
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <main+0x18c>)
 8005eda:	4a2e      	ldr	r2, [pc, #184]	; (8005f94 <main+0x190>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005edc:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005ede:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005ee2:	60dc      	str	r4, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005ee4:	611c      	str	r4, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005ee6:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8005ee8:	619c      	str	r4, [r3, #24]
  MX_FATFS_Init();
 8005eea:	f7ff ff1f 	bl	8005d2c <MX_FATFS_Init>
  RTC_TimeTypeDef sTime = {0};
 8005eee:	2214      	movs	r2, #20
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	eb0d 0002 	add.w	r0, sp, r2
 8005ef6:	f000 fa8f 	bl	8006418 <memset>
  hrtc.Instance = RTC;
 8005efa:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <main+0x194>)
  RTC_DateTypeDef sDate = {0};
 8005efc:	9400      	str	r4, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005efe:	e886 0018 	stmia.w	r6, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8005f02:	237f      	movs	r3, #127	; 0x7f
 8005f04:	60b3      	str	r3, [r6, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005f06:	4630      	mov	r0, r6
  hrtc.Init.SynchPrediv = 255;
 8005f08:	23ff      	movs	r3, #255	; 0xff
 8005f0a:	60f3      	str	r3, [r6, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005f0c:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005f0e:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005f10:	61b4      	str	r4, [r6, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005f12:	f7fc ff17 	bl	8002d44 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005f16:	463a      	mov	r2, r7
 8005f18:	a905      	add	r1, sp, #20
 8005f1a:	4630      	mov	r0, r6
  sTime.Hours = 0x0;
 8005f1c:	f88d 4014 	strb.w	r4, [sp, #20]
  sTime.Minutes = 0x0;
 8005f20:	f88d 4015 	strb.w	r4, [sp, #21]
  sTime.Seconds = 0x0;
 8005f24:	f88d 4016 	strb.w	r4, [sp, #22]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005f28:	9408      	str	r4, [sp, #32]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005f2a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005f2c:	f7fc ffc3 	bl	8002eb6 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8005f30:	2306      	movs	r3, #6
 8005f32:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_AUGUST;
 8005f36:	2308      	movs	r3, #8
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005f38:	463a      	mov	r2, r7
  sDate.Month = RTC_MONTH_AUGUST;
 8005f3a:	f88d 3001 	strb.w	r3, [sp, #1]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005f3e:	4669      	mov	r1, sp
  sDate.Date = 0x17;
 8005f40:	2317      	movs	r3, #23
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005f42:	4630      	mov	r0, r6
  sDate.Date = 0x17;
 8005f44:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x0;
 8005f48:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005f4c:	f7fc ff53 	bl	8002df6 <HAL_RTC_SetDate>
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8005f50:	4621      	mov	r1, r4
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7fd f870 	bl	8003038 <HAL_RTCEx_SetCalibrationOutPut>
  initFileSystem();
 8005f58:	f7ff fdc6 	bl	8005ae8 <initFileSystem>
  bnO_init(&hi2c1,OPERATION_MODE_NDOF);
 8005f5c:	210c      	movs	r1, #12
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f7ff fc1e 	bl	80057a0 <bnO_init>
	logGravData();
 8005f64:	f7ff fe74 	bl	8005c50 <logGravData>
	HAL_Delay(100);
 8005f68:	2064      	movs	r0, #100	; 0x64
 8005f6a:	f7fa ff7b 	bl	8000e64 <HAL_Delay>
 8005f6e:	e7f9      	b.n	8005f64 <main+0x160>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40020800 	.word	0x40020800
 8005f78:	20000948 	.word	0x20000948
 8005f7c:	20000060 	.word	0x20000060
 8005f80:	20000a20 	.word	0x20000a20
 8005f84:	40006400 	.word	0x40006400
 8005f88:	40005400 	.word	0x40005400
 8005f8c:	000186a0 	.word	0x000186a0
 8005f90:	2000099c 	.word	0x2000099c
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40002800 	.word	0x40002800

08005f9c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005f9c:	6802      	ldr	r2, [r0, #0]
 8005f9e:	4b03      	ldr	r3, [pc, #12]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8005fa4:	f7fa bf4c 	b.w	8000e40 <HAL_IncTick>
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40001000 	.word	0x40001000

08005fb0 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8005fb0:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8005fb2:	4c06      	ldr	r4, [pc, #24]	; (8005fcc <SD_CheckStatus.isra.0+0x1c>)
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005fb8:	f7ff fea8 	bl	8005d0c <BSP_SD_GetCardState>
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	b918      	cbnz	r0, 8005fc8 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8005fc0:	7822      	ldrb	r2, [r4, #0]
 8005fc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fc6:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8005fc8:	7818      	ldrb	r0, [r3, #0]
}
 8005fca:	bd10      	pop	{r4, pc}
 8005fcc:	20000002 	.word	0x20000002

08005fd0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005fd0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005fd2:	4c05      	ldr	r4, [pc, #20]	; (8005fe8 <SD_initialize+0x18>)
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005fd8:	f7ff fe68 	bl	8005cac <BSP_SD_Init>
 8005fdc:	b910      	cbnz	r0, 8005fe4 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8005fde:	f7ff ffe7 	bl	8005fb0 <SD_CheckStatus.isra.0>
 8005fe2:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8005fe4:	7820      	ldrb	r0, [r4, #0]
}
 8005fe6:	bd10      	pop	{r4, pc}
 8005fe8:	20000002 	.word	0x20000002

08005fec <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8005fec:	f7ff bfe0 	b.w	8005fb0 <SD_CheckStatus.isra.0>

08005ff0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ff0:	b508      	push	{r3, lr}
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffc:	f7ff fe66 	bl	8005ccc <BSP_SD_ReadBlocks>
 8006000:	b920      	cbnz	r0, 800600c <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006002:	f7ff fe83 	bl	8005d0c <BSP_SD_GetCardState>
 8006006:	2800      	cmp	r0, #0
 8006008:	d1fb      	bne.n	8006002 <SD_read+0x12>
 800600a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800600c:	2001      	movs	r0, #1
}
 800600e:	bd08      	pop	{r3, pc}

08006010 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006010:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <SD_ioctl+0x4c>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	07db      	lsls	r3, r3, #31
{
 8006018:	b088      	sub	sp, #32
 800601a:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800601c:	d41b      	bmi.n	8006056 <SD_ioctl+0x46>

  switch (cmd)
 800601e:	2903      	cmp	r1, #3
 8006020:	d803      	bhi.n	800602a <SD_ioctl+0x1a>
 8006022:	e8df f001 	tbb	[pc, r1]
 8006026:	0510      	.short	0x0510
 8006028:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800602a:	2004      	movs	r0, #4
  }

  return res;
}
 800602c:	b008      	add	sp, #32
 800602e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006030:	4668      	mov	r0, sp
 8006032:	f7ff fe75 	bl	8005d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006036:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	e004      	b.n	8006046 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800603c:	4668      	mov	r0, sp
 800603e:	f7ff fe6f 	bl	8005d20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006042:	9b07      	ldr	r3, [sp, #28]
 8006044:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8006046:	2000      	movs	r0, #0
 8006048:	e7f0      	b.n	800602c <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800604a:	4668      	mov	r0, sp
 800604c:	f7ff fe68 	bl	8005d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006050:	9b07      	ldr	r3, [sp, #28]
 8006052:	0a5b      	lsrs	r3, r3, #9
 8006054:	e7f0      	b.n	8006038 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006056:	2003      	movs	r0, #3
 8006058:	e7e8      	b.n	800602c <SD_ioctl+0x1c>
 800605a:	bf00      	nop
 800605c:	20000002 	.word	0x20000002

08006060 <SD_write>:
{
 8006060:	b508      	push	{r3, lr}
 8006062:	4608      	mov	r0, r1
 8006064:	4611      	mov	r1, r2
 8006066:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	f7ff fe3e 	bl	8005cec <BSP_SD_WriteBlocks>
 8006070:	b920      	cbnz	r0, 800607c <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8006072:	f7ff fe4b 	bl	8005d0c <BSP_SD_GetCardState>
 8006076:	2800      	cmp	r0, #0
 8006078:	d1fb      	bne.n	8006072 <SD_write+0x12>
 800607a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800607c:	2001      	movs	r0, #1
}
 800607e:	bd08      	pop	{r3, pc}

08006080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006080:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <HAL_MspInit+0x34>)
 8006084:	2100      	movs	r1, #0
 8006086:	9100      	str	r1, [sp, #0]
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
 8006090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006092:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006096:	9200      	str	r2, [sp, #0]
 8006098:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	9101      	str	r1, [sp, #4]
 800609c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80060a2:	641a      	str	r2, [r3, #64]	; 0x40
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060ae:	b002      	add	sp, #8
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800

080060b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4604      	mov	r4, r0
 80060bc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060be:	2214      	movs	r2, #20
 80060c0:	2100      	movs	r1, #0
 80060c2:	a803      	add	r0, sp, #12
 80060c4:	f000 f9a8 	bl	8006418 <memset>
  if(hcan->Instance==CAN1)
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_CAN_MspInit+0x64>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d123      	bne.n	8006118 <HAL_CAN_MspInit+0x60>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80060d0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80060d4:	2100      	movs	r1, #0
 80060d6:	9101      	str	r1, [sp, #4]
 80060d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060da:	4811      	ldr	r0, [pc, #68]	; (8006120 <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80060dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
 80060e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80060e8:	9201      	str	r2, [sp, #4]
 80060ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ec:	9102      	str	r1, [sp, #8]
 80060ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	9302      	str	r3, [sp, #8]
 80060fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006100:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006104:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006106:	2302      	movs	r3, #2
 8006108:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800610a:	2303      	movs	r3, #3
 800610c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006110:	2309      	movs	r3, #9
 8006112:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006114:	f7fa ff9a 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006118:	b008      	add	sp, #32
 800611a:	bd10      	pop	{r4, pc}
 800611c:	40006400 	.word	0x40006400
 8006120:	40020000 	.word	0x40020000

08006124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006124:	b530      	push	{r4, r5, lr}
 8006126:	4604      	mov	r4, r0
 8006128:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800612a:	2214      	movs	r2, #20
 800612c:	2100      	movs	r1, #0
 800612e:	a803      	add	r0, sp, #12
 8006130:	f000 f972 	bl	8006418 <memset>
  if(hi2c->Instance==I2C1)
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	4b18      	ldr	r3, [pc, #96]	; (8006198 <HAL_I2C_MspInit+0x74>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d12b      	bne.n	8006194 <HAL_I2C_MspInit+0x70>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800613c:	4c17      	ldr	r4, [pc, #92]	; (800619c <HAL_I2C_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800613e:	4818      	ldr	r0, [pc, #96]	; (80061a0 <HAL_I2C_MspInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006140:	2500      	movs	r5, #0
 8006142:	9501      	str	r5, [sp, #4]
 8006144:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006146:	f043 0302 	orr.w	r3, r3, #2
 800614a:	6323      	str	r3, [r4, #48]	; 0x30
 800614c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006156:	23c0      	movs	r3, #192	; 0xc0
 8006158:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800615a:	2312      	movs	r3, #18
 800615c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800615e:	2301      	movs	r3, #1
 8006160:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006162:	2303      	movs	r3, #3
 8006164:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006166:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006168:	2304      	movs	r3, #4
 800616a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800616c:	f7fa ff6e 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006170:	9502      	str	r5, [sp, #8]
 8006172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006178:	6423      	str	r3, [r4, #64]	; 0x40
 800617a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800617c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006180:	9302      	str	r3, [sp, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006182:	201f      	movs	r0, #31
 8006184:	462a      	mov	r2, r5
 8006186:	4629      	mov	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006188:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800618a:	f7fa ff0d 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800618e:	201f      	movs	r0, #31
 8006190:	f7fa ff3e 	bl	8001010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006194:	b009      	add	sp, #36	; 0x24
 8006196:	bd30      	pop	{r4, r5, pc}
 8006198:	40005400 	.word	0x40005400
 800619c:	40023800 	.word	0x40023800
 80061a0:	40020400 	.word	0x40020400

080061a4 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80061a4:	6802      	ldr	r2, [r0, #0]
 80061a6:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <HAL_RTC_MspInit+0x10>)
 80061a8:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80061aa:	bf02      	ittt	eq
 80061ac:	4b02      	ldreq	r3, [pc, #8]	; (80061b8 <HAL_RTC_MspInit+0x14>)
 80061ae:	2201      	moveq	r2, #1
 80061b0:	601a      	streq	r2, [r3, #0]
 80061b2:	4770      	bx	lr
 80061b4:	40002800 	.word	0x40002800
 80061b8:	42470e3c 	.word	0x42470e3c

080061bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c0:	2214      	movs	r2, #20
{
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c6:	2100      	movs	r1, #0
 80061c8:	eb0d 0002 	add.w	r0, sp, r2
 80061cc:	f000 f924 	bl	8006418 <memset>
  if(hsd->Instance==SDIO)
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	4b2a      	ldr	r3, [pc, #168]	; (800627c <HAL_SD_MspInit+0xc0>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d14d      	bne.n	8006274 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80061d8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80061dc:	2400      	movs	r4, #0
 80061de:	9401      	str	r4, [sp, #4]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061e2:	4827      	ldr	r0, [pc, #156]	; (8006280 <HAL_SD_MspInit+0xc4>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e8:	645a      	str	r2, [r3, #68]	; 0x44
 80061ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f4:	9402      	str	r4, [sp, #8]
 80061f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f8:	f042 0202 	orr.w	r2, r2, #2
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
 80061fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006200:	f002 0202 	and.w	r2, r2, #2
 8006204:	9202      	str	r2, [sp, #8]
 8006206:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006208:	9403      	str	r4, [sp, #12]
 800620a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800620c:	f042 0204 	orr.w	r2, r2, #4
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
 8006212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006214:	f002 0204 	and.w	r2, r2, #4
 8006218:	9203      	str	r2, [sp, #12]
 800621a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800621c:	9404      	str	r4, [sp, #16]
 800621e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006220:	f042 0208 	orr.w	r2, r2, #8
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622c:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622e:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006230:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006232:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006234:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006238:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800623a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800623c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006240:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006242:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006244:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006246:	f7fa ff01 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800624a:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800624e:	a905      	add	r1, sp, #20
 8006250:	480c      	ldr	r0, [pc, #48]	; (8006284 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006252:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006254:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006256:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006258:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800625a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800625c:	f7fa fef6 	bl	800104c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006260:	a905      	add	r1, sp, #20
 8006262:	4809      	ldr	r0, [pc, #36]	; (8006288 <HAL_SD_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006264:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006268:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800626c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800626e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006270:	f7fa feec 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006274:	b00a      	add	sp, #40	; 0x28
 8006276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40020400 	.word	0x40020400
 8006284:	40020800 	.word	0x40020800
 8006288:	40020c00 	.word	0x40020c00

0800628c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800628c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800628e:	4601      	mov	r1, r0
{
 8006290:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006292:	2200      	movs	r2, #0
 8006294:	2036      	movs	r0, #54	; 0x36
 8006296:	f7fa fe87 	bl	8000fa8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800629a:	2036      	movs	r0, #54	; 0x36
 800629c:	f7fa feb8 	bl	8001010 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80062a0:	2500      	movs	r5, #0
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <HAL_InitTick+0x68>)
 80062a4:	9502      	str	r5, [sp, #8]
 80062a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80062a8:	4c13      	ldr	r4, [pc, #76]	; (80062f8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80062aa:	f042 0210 	orr.w	r2, r2, #16
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062b8:	a901      	add	r1, sp, #4
 80062ba:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80062bc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062be:	f7fc f907 	bl	80024d0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80062c2:	f7fc f8f5 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <HAL_InitTick+0x70>)
 80062c8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80062ca:	f240 33e7 	movw	r3, #999	; 0x3e7
 80062ce:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_InitTick+0x74>)
 80062d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80062d6:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80062d8:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80062da:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80062dc:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062de:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80062e0:	f7fd fb82 	bl	80039e8 <HAL_TIM_Base_Init>
 80062e4:	b920      	cbnz	r0, 80062f0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7fd fa69 	bl	80037be <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80062ec:	b009      	add	sp, #36	; 0x24
 80062ee:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80062f0:	2001      	movs	r0, #1
 80062f2:	e7fb      	b.n	80062ec <HAL_InitTick+0x60>
 80062f4:	40023800 	.word	0x40023800
 80062f8:	20000a48 	.word	0x20000a48
 80062fc:	40001000 	.word	0x40001000
 8006300:	000f4240 	.word	0x000f4240

08006304 <NMI_Handler>:
 8006304:	4770      	bx	lr

08006306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006306:	e7fe      	b.n	8006306 <HardFault_Handler>

08006308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006308:	e7fe      	b.n	8006308 <MemManage_Handler>

0800630a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800630a:	e7fe      	b.n	800630a <BusFault_Handler>

0800630c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800630c:	e7fe      	b.n	800630c <UsageFault_Handler>

0800630e <SVC_Handler>:
 800630e:	4770      	bx	lr

08006310 <DebugMon_Handler>:
 8006310:	4770      	bx	lr

08006312 <PendSV_Handler>:
 8006312:	4770      	bx	lr

08006314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006314:	4770      	bx	lr
	...

08006318 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006318:	4801      	ldr	r0, [pc, #4]	; (8006320 <I2C1_EV_IRQHandler+0x8>)
 800631a:	f7fb bc9f 	b.w	8001c5c <HAL_I2C_EV_IRQHandler>
 800631e:	bf00      	nop
 8006320:	20000948 	.word	0x20000948

08006324 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006324:	4801      	ldr	r0, [pc, #4]	; (800632c <TIM6_DAC_IRQHandler+0x8>)
 8006326:	f7fd ba59 	b.w	80037dc <HAL_TIM_IRQHandler>
 800632a:	bf00      	nop
 800632c:	20000a48 	.word	0x20000a48

08006330 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006330:	490f      	ldr	r1, [pc, #60]	; (8006370 <SystemInit+0x40>)
 8006332:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006336:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <SystemInit+0x44>)
 8006340:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006342:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8006344:	f042 0201 	orr.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800634a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006352:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006356:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006358:	4a07      	ldr	r2, [pc, #28]	; (8006378 <SystemInit+0x48>)
 800635a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006362:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006364:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800636a:	608b      	str	r3, [r1, #8]
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	e000ed00 	.word	0xe000ed00
 8006374:	40023800 	.word	0x40023800
 8006378:	24003010 	.word	0x24003010

0800637c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800637c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006382:	e003      	b.n	800638c <LoopCopyDataInit>

08006384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800638a:	3104      	adds	r1, #4

0800638c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800638c:	480b      	ldr	r0, [pc, #44]	; (80063bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800638e:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006394:	d3f6      	bcc.n	8006384 <CopyDataInit>
  ldr  r2, =_sbss
 8006396:	4a0b      	ldr	r2, [pc, #44]	; (80063c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006398:	e002      	b.n	80063a0 <LoopFillZerobss>

0800639a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800639a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800639c:	f842 3b04 	str.w	r3, [r2], #4

080063a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80063a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80063a4:	d3f9      	bcc.n	800639a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80063a6:	f7ff ffc3 	bl	8006330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063aa:	f000 f811 	bl	80063d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063ae:	f7ff fd29 	bl	8005e04 <main>
  bx  lr    
 80063b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80063b8:	0800656c 	.word	0x0800656c
  ldr  r0, =_sdata
 80063bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80063c0:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80063c4:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80063c8:	20000a84 	.word	0x20000a84

080063cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063cc:	e7fe      	b.n	80063cc <ADC_IRQHandler>
	...

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4e0d      	ldr	r6, [pc, #52]	; (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	; (800640c <__libc_init_array+0x3c>)
 80063d6:	1ba4      	subs	r4, r4, r6
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2500      	movs	r5, #0
 80063dc:	42a5      	cmp	r5, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4e0b      	ldr	r6, [pc, #44]	; (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	; (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 f820 	bl	8006428 <_init>
 80063e8:	1ba4      	subs	r4, r4, r6
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2500      	movs	r5, #0
 80063ee:	42a5      	cmp	r5, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f8:	4798      	blx	r3
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006402:	4798      	blx	r3
 8006404:	3501      	adds	r5, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	08006564 	.word	0x08006564
 800640c:	08006564 	.word	0x08006564
 8006410:	08006564 	.word	0x08006564
 8006414:	08006568 	.word	0x08006568

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <_init>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr

08006434 <_fini>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr
